<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LANDFILL</title>
  
  
  <link href="/paranoiddemon.github.io/atom.xml" rel="self"/>
  
  <link href="https://paranoiddemon.github.io/blog/"/>
  <updated>2020-07-19T05:50:15.903Z</updated>
  <id>https://paranoiddemon.github.io/blog/</id>
  
  <author>
    <name>Demon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DIGITAL GRAVEYARD</title>
    <link href="https://paranoiddemon.github.io/blog/posts/gravestone.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/gravestone.html</id>
    <published>2020-07-19T16:30:46.000Z</published>
    <updated>2020-07-19T05:50:15.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贾宏声（1967-2010）"><a href="#贾宏声（1967-2010）" class="headerlink" title="贾宏声（1967-2010）"></a>贾宏声（1967-2010）</h2><p><a href="https://movie.douban.com/celebrity/1274399/" target="_blank" rel="noopener">豆瓣影人 - 贾宏声</a></p><h2 id="许立志（1990-2014）"><a href="#许立志（1990-2014）" class="headerlink" title="许立志（1990-2014）"></a>许立志（1990-2014）</h2><p><a href="http://book.ifeng.com/fukan/shikan/detail_2015_02/04/14251062_0.shtml" target="_blank" rel="noopener">许立志诗选：我咽下一枚铁做的月亮…… | 凤凰诗刊</a></p><p><a href="https://book.douban.com/subject/26342533//" target="_blank" rel="noopener">豆瓣读书 - 新的一天</a></p><h2 id="江绪林（1976-2016）"><a href="#江绪林（1976-2016）" class="headerlink" title="江绪林（1976-2016）"></a>江绪林（1976-2016）</h2><p><a href="https://theinitium.com/article/20180219-opinion-chowpochung-jiangxulin/" target="_blank" rel="noopener">周保松：一些未曾說完的話 ──紀念江緒林先生逝世兩週年</a></p><p><a href="https://www.douban.com/people/jiangxulin/" target="_blank" rel="noopener">豆瓣主页：江绪林</a></p><p><a href="https://weibo.com/u/1880142780" target="_blank" rel="noopener">微博主页：江绪林</a></p><h2 id="吴宇清（1967-2017）"><a href="#吴宇清（1967-2017）" class="headerlink" title="吴宇清（1967-2017）"></a>吴宇清（1967-2017）</h2><p><a href="https://new.qq.com/omn/20181112/20181112A0RE7G.html" target="_blank" rel="noopener">一个叫吴宇清的男人决定去死</a></p><p><a href="https://www.douban.com/people/2038558/" target="_blank" rel="noopener">豆瓣主页：外外</a></p><p><a href="https://music.douban.com/review/2695461/" target="_blank" rel="noopener">南京地下音乐记录97-98 - 关于这盒磁带</a></p><h2 id="胡波（1988-2017）"><a href="#胡波（1988-2017）" class="headerlink" title="胡波（1988-2017）"></a>胡波（1988-2017）</h2><p><a href="https://movie.douban.com/subject/27172891/" target="_blank" rel="noopener">豆瓣电影 - 大象席地而坐</a></p>]]></content>
    
    <summary type="html">
    
      记录一些名字，和生活的理由
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring 框架初步</title>
    <link href="https://paranoiddemon.github.io/blog/posts/springframework-notes.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/springframework-notes.html</id>
    <published>2020-07-18T16:30:46.000Z</published>
    <updated>2020-07-19T02:35:24.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ul><li><p>轻量级（引用的jar包少），开源，JavaEE框架</p></li><li><p>解决企业应用开发的复杂性</p></li><li><p>两个核心部分 IoC AOP</p><ul><li>IoC  Inversion of Control 把创建对象的过程交给Spring管理</li><li>AOP  Aspect Oriented Programing 不修改源代码的情况下进行功能增强<br><img src="https://i.loli.net/2020/07/18/aQGSLj2DVoY89h5.jpg" alt="Spring5模块"></li></ul></li><li><p>特点</p><ul><li>方便解耦，简化开发，对象之间的调用由spring进行</li><li>方便测试</li><li>AOP编程支持   </li><li>方便和其他框架（mybatis etc.)整合</li><li>方便事务操作</li><li>降低API开发难度</li><li>源码设计值得学习</li></ul><p>环境：Spring 5.x</p></li></ul><h3 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h3><p>1、下载<br>2、创建工程<br>3、导入相关jar包<br><a href="xxxx.xx">Spring模块</a><br>4、创建一个类，写一个方法<br>5、编写Spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.UserDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>6、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取配置创建对象</span></span><br><span class="line">    User user = context.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、IoC-容器"><a href="#2、IoC-容器" class="headerlink" title="2、IoC 容器"></a>2、IoC 容器</h2><h3 id="2-1-底层原理"><a href="#2-1-底层原理" class="headerlink" title="2.1 底层原理"></a>2.1 底层原理</h3><p>（1）控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理<br>（2）目的：为了降低耦合度<br>（3）原理<br>基于：xml解析、工厂模式、反射<br>在一个类中new另一个类的对象和方法，一旦另一个类变化，该类要跟着调整代码，耦合度过高。进一步地解耦<br>工作流程：<br>1、配置xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.UserDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2、创建工厂类，通过xml parse来获取 前面配置的class全类名的值，通过反射来创建对象，通过BeanFactory来new对象传给调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String classValue = <span class="string">"cc.landfill.spring.UserDao"</span>; <span class="comment">//xml解析获得</span></span><br><span class="line">        Class clazz = Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (UserDao)clazz.newInstance();  <span class="comment">//通过反射来new对象</span></span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-IoC接口-BeanFactory"><a href="#2-2-IoC接口-BeanFactory" class="headerlink" title="2.2 IoC接口 BeanFactory"></a>2.2 IoC接口 BeanFactory</h3><p>IoC思想基于IoC容器完成，底层本质是对象工厂<br>Spring提供了IoC容器实现的两种方式（两个接口）：</p><ul><li>BeanFactory:IoC容器基本实现，是Spring内部使用的接口，不提供开发人员进行使用<ul><li>加载配置文件的时候不会创建对象，使用的时候才去创建对象，//和jdk8以后的StringBuffer一样,延迟创建</li></ul></li><li>ApplicationContext：继承了BeanFactory，提供更多更强大的功能，开发人员使用<ul><li>一加载配置文件就会创建对象，在实际开发中，这种更加实用，在服务器启动的时候就创建</li><li>实现类<ul><li>ClassPathXmlApplicationContext  配置文件在src下可以直接读取</li><li>FileSystemXmlApplicationContext 需要配置文件的全路径</li></ul></li></ul></li></ul><h3 id="2-3-IoC操作-Bean管理-基于xml"><a href="#2-3-IoC操作-Bean管理-基于xml" class="headerlink" title="2.3 IoC操作 Bean管理 基于xml"></a>2.3 IoC操作 Bean管理 基于xml</h3><h4 id="（1）Bean管理是什么"><a href="#（1）Bean管理是什么" class="headerlink" title="（1）Bean管理是什么"></a>（1）Bean管理是什么</h4><p>​    两种操作：</p><ul><li>Spring创建对象</li><li>Spring注入属性：set field value</li></ul><h4 id="（2）两种实现方式"><a href="#（2）两种实现方式" class="headerlink" title="（2）两种实现方式"></a>（2）两种实现方式</h4><ul><li>xml配置</li><li>注解</li></ul><h4 id="（3）基于xml注入"><a href="#（3）基于xml注入" class="headerlink" title="（3）基于xml注入"></a>（3）基于xml注入</h4><h5 id="基于xml创建对象：使用"><a href="#基于xml创建对象：使用" class="headerlink" title="基于xml创建对象：使用"></a>基于xml创建对象：使用<bean></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.UserDao"</span>/&gt;</span></span><br><span class="line">a) 在<span class="tag">&lt;<span class="name">bean</span>&gt;</span>中有很多属性，常用的有：</span><br><span class="line">   - id属性：给对象一个唯一的标识 </span><br><span class="line">   - class属性：创建对象所在类的全路径</span><br><span class="line">   - name属性：可以加特殊符号，早起Struts使用，现较少使用</span><br><span class="line">b) 创建对象的是默认调用的是无参构造器</span><br></pre></td></tr></table></figure><h5 id="基于xml注入属性"><a href="#基于xml注入属性" class="headerlink" title="基于xml注入属性"></a>基于xml注入属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">- DI（Dependency Injection）: 依赖注入，就是注入属性 </span><br><span class="line">- 之前的方法：setter 和 带参构造器</span><br><span class="line">    @Data</span><br><span class="line">    public class Book &#123;</span><br><span class="line">        private String bookName;</span><br><span class="line">    </span><br><span class="line">        public Book(String bookName)&#123;</span><br><span class="line">            this.bookName = bookName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            Book book = new Book();</span><br><span class="line">            book.setBookName("what");</span><br><span class="line">    </span><br><span class="line">            Book the_hell = new Book("the hell");</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">- 使用xml 对应setter和有参构造</span><br><span class="line"> <span class="comment">&lt;!--set方法注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.Book"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property标签注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"Communist Manifesto"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookAuthor"</span> <span class="attr">value</span>=<span class="string">"Karl Marx"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用有参构造器注入属性，也可以使用参数索引。默认是无参创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.Orders"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"iPhone"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"China"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- p名称空间注入属性 【了解】</span><br><span class="line">   使用p名称空间注入，可以简化xml的配置        </span><br><span class="line">   需要先在xml约束中增加p名称空间  xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.Book"</span> <span class="attr">p:bookName</span>=<span class="string">"Communist Manifesto"</span> <span class="attr">p:bookAuthor</span>=<span class="string">"Karl Marx"</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="xml注入其他类型属性"><a href="#xml注入其他类型属性" class="headerlink" title="xml注入其他类型属性"></a>xml注入其他类型属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">a)字面量</span><br><span class="line">- null</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">- 属性值包含特殊符号</span><br><span class="line">    <span class="comment">&lt;!--包含特殊符号的属性值</span></span><br><span class="line"><span class="comment">        1、&amp;lt; &amp;gt;转义</span></span><br><span class="line"><span class="comment">        2、CDATA空间 jsp里的 &lt;![CDATA[原样输出的内容]]&gt;   </span></span><br><span class="line"><span class="comment">         好像还是转义符号方便点    </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            &lt;![CDATA[&lt;&lt;北京&gt;&gt;]]&gt; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">b)注入外部bean   </span><br><span class="line">service类和dao类</span><br><span class="line">在service中调用dao里的方法</span><br><span class="line">在配置文件中配置两个类，把UserDao对象注入到UserService对象</span><br><span class="line">    UserService.java:</span><br><span class="line">     private UserDao userDao;</span><br><span class="line">    XML:</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.cc.landfill.service.UserService"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!--引用要注入类的id--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.cc.landfill.dao.UserDaoImpl"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  <span class="comment">&lt;!--得找实现类，接口没对象--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c)内部bean</span><br><span class="line">一对多关系。在实体类中表示一对多的关系</span><br><span class="line">建立实体类</span><br><span class="line">配置xml</span><br><span class="line"><span class="comment">&lt;!--内部bean,嵌套一个bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"jack"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Dept"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">value</span>=<span class="string">"hr"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">上面这种就是级联赋值</span><br><span class="line">d)级联赋值</span><br><span class="line">在外部bean的基础上，给外部bean再去设置属性</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"jack"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">ref</span>=<span class="string">"dept"</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">value</span>=<span class="string">"hr"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Emp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">value</span>=<span class="string">"jack"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">ref</span>=<span class="string">"dept"</span>/&gt;</span>         </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept.deptName"</span> <span class="attr">value</span>=<span class="string">"it"</span>/&gt;</span>     以内部设置的值为准，需要有getter方法   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.bean.Dept"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">value</span>=<span class="string">"hr"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="xml注入集合类型属性"><a href="#xml注入集合类型属性" class="headerlink" title="xml注入集合类型属性"></a>xml注入集合类型属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">a)Array/List/Map/Set</span><br><span class="line"></span><br><span class="line">写实体类，至少有Setter方法</span><br><span class="line">配置xml注入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.collection.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--value只能注入一个值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>database<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ma<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"JAVA"</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"PYTHON"</span> <span class="attr">value</span>=<span class="string">"python"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">b)在集合里设置对象类型</span><br><span class="line"> private List<span class="tag">&lt;<span class="name">Course</span>&gt;</span> courseList;</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courseList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"course1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"course2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建多个Course对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"course1"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.collection.Course"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courseName"</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"course2"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.collection.Course"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"courseName"</span> <span class="attr">value</span>=<span class="string">"python"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">c)提取集合注入部分 类似mybatis的sql片段</span><br><span class="line">- 引入名称空间util</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- 使用util标签完成list集合注入提取 map set properties constant都可以提取</span><br><span class="line"> <span class="comment">&lt;!--提取集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"bookList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>what<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>the hell<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.collection.Book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">ref</span>=<span class="string">"bookList"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）FactoryBean"><a href="#（4）FactoryBean" class="headerlink" title="（4）FactoryBean"></a>（4）FactoryBean</h4><p>1、Spring有两种类型的Bean:普通Bean和工厂Bean（FactoryBean)</p><ul><li>普通Bean：定义什么类型，就返回什么类型（class的全类名）</li><li>FactoryBean：定义的类型和返回的类型可以是不一样的<br>2、步骤<br>创建类，作为工厂Bean，实现接口FactoryBean<br>实现接口的所有方法，在实现的方法中定义返回的Bean类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//自定义FactoryBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回的对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCourseName(<span class="string">"java"</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="comment">//配置xml</span></span><br><span class="line">    &lt;bean id=<span class="string">"mybean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cc.landfill.factorybean.MyBean"</span>/&gt;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">factoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean3.xml"</span>);</span><br><span class="line">        Course mybean = context.getBean(<span class="string">"mybean"</span>, Course<span class="class">.<span class="keyword">class</span>)</span>;  <span class="comment">//返回的类型要作为参数</span></span><br><span class="line"></span><br><span class="line">        System.out.println(mybean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="（5）Bean的作用域"><a href="#（5）Bean的作用域" class="headerlink" title="（5）Bean的作用域"></a>（5）Bean的作用域</h4><p>1、在Spring中，可以设置创建的Bean实例是单实例还是多实例,在默认情况下是单实例的,只在内存中创建一个对象<br>获取多次的地址值都是一样的<br>2、FactoryBean是多实例的。<br>3、如何设置<br>通过<bean>中的scope属性来设置：<br>singleton：默认值 单例 加载Spring配置文件的时候的就会创建该单实例对象<br>prototype：多实例 只有在调用getBean()的时候才会实例化<br>request  在web环境中可以使用，创建的对象会存到request域中<br>session  在web环境中可以使用，创建的对象会存到session域中</p><h4 id="（6）Bean的生命周期"><a href="#（6）Bean的生命周期" class="headerlink" title="（6）Bean的生命周期"></a>（6）Bean的生命周期</h4><p>从对象创建到对象销毁的过程 即为Bean的生命周期<br>    1 通过无参构造器实例化Bean<br>    2 为Bean的属性设置只和对其他Bean引用 调用set()<br>    3 把Bean的实例传递给Bean的后置处理器  postProcessBeforeInitialization()<br>    4 调用Bean的初始化的方法（需要进行配置）<br>    5 把Bean的实例传递给Bean的后置处理器 postProcessAfterInitialization()<br>    6 得到对象，使用Bean<br>    7 当容器关闭的时候，调用Bean的销毁方法（需要进行配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">实体类：要写初始化和销毁方法，在xml中配置</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 here is NoParamConstructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        System.out.println(<span class="string">"2 here is setMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行初始化的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4 here is initMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行销毁的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"7 here is destroyMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">配置：初始化和销毁对象</span><br><span class="line">   &lt;bean id=<span class="string">"orders"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cc.landfill.bean.Orders"</span> init-method=<span class="string">"initMethod"</span> destroy-method=<span class="string">"destroyMethod"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"orderName"</span> value=<span class="string">"phone"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">后置处理器</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3 here is postProcessBeforeInitialization "</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"5 here is postProcessAfterInitialization "</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifeCycle</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean4.xml"</span>);</span><br><span class="line">        <span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext("bean4.xml"); //这个接口没有close()</span></span><br><span class="line"></span><br><span class="line">        Orders orders = context.getBean(<span class="string">"orders"</span>, Orders<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"6 get instance of bean"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动调用销毁方法</span></span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"> <span class="number">1</span> here is NoParamConstructor</span><br><span class="line"> <span class="number">2</span> here is setMethod</span><br><span class="line"> <span class="number">3</span> here is postProcessBeforeInitialization </span><br><span class="line"> <span class="number">4</span> here is initMethod</span><br><span class="line"> <span class="number">5</span> here is postProcessAfterInitialization </span><br><span class="line"> <span class="number">6</span> get instance of bean</span><br><span class="line"> <span class="number">7</span> here is destroyMethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（7）xml自动装配"><a href="#（7）xml自动装配" class="headerlink" title="（7）xml自动装配"></a>（7）xml自动装配</h4><p>概念：根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值注入。但用的比较少。一般用注解自动装配<br>前面通过value 和 ref 来设置就是手动装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动装配</span></span><br><span class="line"><span class="comment">  autowire属性：</span></span><br><span class="line"><span class="comment">  byName  根据属性名称注入  注入bean的id值和 类属性名称要一致 如：要注入dept对象，在实体类中dept属性名，和配置文件中的bean id要一致</span></span><br><span class="line"><span class="comment">  byType  根据属性类型注入 如果定义了多个相同类型的Bean就会报错</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.autowire.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.autowire.Dept"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（8）引入外部的属性文件"><a href="#（8）引入外部的属性文件" class="headerlink" title="（8）引入外部的属性文件"></a>（8）引入外部的属性文件</h4><p>1、直接配置数据库信息<br>    配置连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jc.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、引入外部属性文件配置<br>创建外部的属性文件 druid.properties<br>引入context名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用标签引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用外部属性文件引入,不需要修改bean.xml,在配置文件中去修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:druid.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource2"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-IoC操作-Bean管理-基于注解"><a href="#2-4-IoC操作-Bean管理-基于注解" class="headerlink" title="2.4 IoC操作 Bean管理 基于注解"></a>2.4 IoC操作 Bean管理 基于注解</h3><h4 id="（1）什么是注解："><a href="#（1）什么是注解：" class="headerlink" title="（1）什么是注解："></a>（1）什么是注解：</h4><p>注解是代码特殊标记 格式：@注解名称(属性名称1=属性值1,属性名称2=属性值2…)<br>注解可以作用在类、属性、方法上<br>使用目的：简化xml配置</p><h4 id="（2）Bean管理中创建对象的注解"><a href="#（2）Bean管理中创建对象的注解" class="headerlink" title="（2）Bean管理中创建对象的注解"></a>（2）Bean管理中创建对象的注解</h4><ul><li>@Component 普通的注解</li><li>@Service    业务逻辑层</li><li>@Controller  表示层</li><li>@Repository  持久层<br>功能是一样的，都可以用来创建对象，没有严格的区分，但是建议分别使用，更加清楚当前组件所扮演的角色</li></ul><h4 id="（3）基于注解创建对象"><a href="#（3）基于注解创建对象" class="headerlink" title="（3）基于注解创建对象"></a>（3）基于注解创建对象</h4><p>引入依赖  spring-aop-5.2.6.RELEASE.jar<br>开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描，指定扫描的包的名称</span></span><br><span class="line"><span class="comment">    多个包用逗号隔开，</span></span><br><span class="line"><span class="comment">    或者扫描上一层目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cc.landfill.spring.dao,cc.landfill.spring.service"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value和bean标签中id是一个东西，但是可以省略，默认就是类名首字母小写</span></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cc.landfill.service.add()..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>过程：开启组件扫描 -&gt; 到指定的包扫描类 -&gt; 如果扫描到注解，利用反射实例化该类 -&gt; 通过getBean获取实例<br>如何理解注解？</p><p>扫描组件的详细配置:include和exclude<br>&lt;context:component-scan base-package=”cc.landfill.spring” use-default-filters=”false”&gt;<br>    &lt;context:include-filter type=”annotation” expression=”org.springframework.stereotype.Service”/&gt;<br>    &lt;context:exclude-filter type=”annotation” expression=”org.springframework.stereotype.Controller”/&gt;<br></context:component-scan></p><h4 id="（4）基于注解注入依赖"><a href="#（4）基于注解注入依赖" class="headerlink" title="（4）基于注解注入依赖"></a>（4）基于注解注入依赖</h4><p>@AutoWired  根据属性类型进行注入，自动装配<br>    在service和dao类上添加注解,实现这两个类的实例化<br>    在service注入dao对象,在service添加dao属性，在属性上方添加注解，不需要set方法</p><p>@Qualifier  根据属性的名称进行注入，<br>    需要和@AutoWired同时使用,如果一个接口有多个实现类，单独使用@AutoWired，就无法自动装配，名称是唯一标识符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据类型进行装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"userDaoImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cc.landfill.service.add()..."</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Resource   根据类型和名称注入都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。</span><br><span class="line"><span class="meta">@Resource</span>有两个重要的属性：name和type，而Spring将<span class="meta">@Resource</span>注解的name属性解析为bean的名字，</span><br><span class="line">而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，</span><br><span class="line">而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Resource</span>(name = <span class="string">"useDaoImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>@Value      注入普通类型属性<br>基本数据类型，String<br>直接在属性上方添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(value=<span class="string">"jack"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(value=<span class="string">"13"</span>)</span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure><h4 id="（5）完全注解开发-创建对象和注入依赖"><a href="#（5）完全注解开发-创建对象和注入依赖" class="headerlink" title="（5）完全注解开发 创建对象和注入依赖"></a>（5）完全注解开发 创建对象和注入依赖</h4><p>实际应用中基于SpringBoot，本质上是Spring</p><p>创建配置类，替代xml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//作为配置类 替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"cc.landfill.spring"</span>&#125;)     </span><br><span class="line"><span class="comment">//等价于xml中的&lt;context:component-scan base-package="cc.landfill.spring/&gt; 其实注解也是一种键值对</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载配置类，和之前加载配置文件是一个功能</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserService userService = context.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.add();</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3、AOP"><a href="#3、AOP" class="headerlink" title="3、AOP"></a>3、AOP</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>Aspect Oriented Programming<br>可以对业务逻辑的各个部分进行隔离，从而降低业务逻辑各部分间的耦合度，提高可重用性和开发效率<br>不改变原有代码，在原来的基础上添加新的功能，把模块配置到主模块中</p><h3 id="3-2-底层原理"><a href="#3-2-底层原理" class="headerlink" title="3.2 底层原理"></a>3.2 底层原理</h3><h4 id="（1）AOP底层使用动态代理"><a href="#（1）AOP底层使用动态代理" class="headerlink" title="（1）AOP底层使用动态代理"></a>（1）AOP底层使用动态代理</h4><p>有接口的情况：使用JDK动态代理，创建接口实现类的代理对象，既能完成原有的功能，又能做一些其他的功能<br>没有接口的情况：使用CGLIB动态代理 创建子类的代理对象</p><h4 id="（2）JDK动态代理"><a href="#（2）JDK动态代理" class="headerlink" title="（2）JDK动态代理"></a>（2）JDK动态代理</h4><p>使用Proxy类 newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)<br>三个参数：<br>类加载器<br>增强方法所在类实现的接口（可以有多个）<br>InvocationHandler 接口，需要被实现，创建代理对象，写增强的方法。invocation: the act of making a particular function start</p><p>代码实现：<br>创建接口，定义方法<br>实现类<br>使用Proxy类创建代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回的是Object，强转。将代理对象实例化，通过代理类的有参构造器，传入了被代理类的实例，在调用被代理类的方法时，会直接去调用</span></span><br><span class="line">        <span class="comment">//InvocationHandler（即代理类）中的invoke方法,该invoke方法中，即实现了被代理类原有的方法，又实现了另外增强的方法</span></span><br><span class="line">        UserDao userDao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), new Class[]&#123;UserDao.class&#125;, new UserDaoProxy(new UserDaoImpl()));</span><br><span class="line">        <span class="comment">//代理对象 调用add的时候，为什么会知道去执行invoke呢？应该需要有某种关联</span></span><br><span class="line">        <span class="keyword">int</span> sum = userDao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//把被代理的对象传递过来</span></span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=obj;   <span class="comment">//这里的obj就是被代理的UserDao的对象，使用Object更通用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(method.getName()+<span class="string">" "</span>+ Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行的是被代理类本来的功能</span></span><br><span class="line">        Object retVal = method.invoke(obj, args); </span><br><span class="line">        <span class="comment">//因为有被代理类的全部信息，调用被代理类的方法的时候，判断调用的是什么方法，再去invoke这个方法，</span></span><br><span class="line">        <span class="comment">//它只是通过反射去调用，不需要自己实现逻辑。可是是怎么关联起来的?invoke里传入了对象，和参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//前后可以增加新的逻辑，而不影响原先的代码</span></span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）-常见术语"><a href="#（3）-常见术语" class="headerlink" title="（3） 常见术语"></a>（3） 常见术语</h4><p>连接点：类中可以被增强的方法<br>切入点：实际被真正增强的方法<br>通知（增强）：增强的逻辑的部分，有5种类型<br>    前置通知  @Before<br>    后置通知  @AfterReturning 在方法返回值之后，有异常不执行<br>    环绕通知 在被增强方法的前后都会执行 @Around 有异常环绕通知的后半部分不会执行<br>    异常通知 当被增强方法 出现异常的时候执行 @AfterThrowing 只有有异常才会执行<br>    最终通知 类似finally  @After在方法执行之后 无论是否有异常，都会执行<br>切面：把通知应用到切入点，是一个动作</p><h3 id="3-3-Spring中实现"><a href="#3-3-Spring中实现" class="headerlink" title="3.3 Spring中实现"></a>3.3 Spring中实现</h3><h4 id="（1）实现"><a href="#（1）实现" class="headerlink" title="（1）实现"></a>（1）实现</h4><p>一般基于AspectJ实现AOP操作：AspectJ不是Spring组成部分，独立的AOP框架，一般配合Spring使用，实现AOP操作<br>两种实现方式：<br>    基于xml<br>    基于注解（一般使用这种）</p><h4 id="（2）步骤（基于AspectJ-注解）："><a href="#（2）步骤（基于AspectJ-注解）：" class="headerlink" title="（2）步骤（基于AspectJ 注解）："></a>（2）步骤（基于AspectJ 注解）：</h4><h5 id="1-导入依赖-spring-aspects-5-2-6-RELEASE-jar"><a href="#1-导入依赖-spring-aspects-5-2-6-RELEASE-jar" class="headerlink" title="1. 导入依赖     spring-aspects-5.2.6.RELEASE.jar"></a>1. 导入依赖     spring-aspects-5.2.6.RELEASE.jar</h5><pre><code>spring-aop-5.2.6.RELEASE.jarcom.springsource.net.sf.cglib-2.2.0.jarcom.springsource.org.aopalliance-1.0.0.jarcom.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</code></pre><h5 id="2-切入点的表达式"><a href="#2-切入点的表达式" class="headerlink" title="2. 切入点的表达式"></a>2. 切入点的表达式</h5><pre><code>作用：对哪个类的哪个方法进行增强</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法结构：execution([权限修饰符][返回类型][全类名][方法名][参数列表])</span><br><span class="line">例：execution(* cc.landfill.spring.cc.landfill.dao.UserDao.add(..))   *表示所有权限修饰符，返回类型可以省略 ..表示参数列表</span><br><span class="line">例：execution(* cc.landfill.spring.cc.landfill.dao.UserDao.*(..))     对类中所有方法进行增强</span><br><span class="line">例：execution(* cc.landfill.spring.cc.landfill.dao.*.*(..))     对包中所有类中所有方法进行增强</span><br></pre></td></tr></table></figure><h5 id="3-AspectJ-注解"><a href="#3-AspectJ-注解" class="headerlink" title="3. AspectJ 注解"></a>3. AspectJ 注解</h5><p>创建类，定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User.add()..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建增强类（编写增强的逻辑），增加方法"><a href="#4-创建增强类（编写增强的逻辑），增加方法" class="headerlink" title="4. 创建增强类（编写增强的逻辑），增加方法"></a>4. 创建增强类（编写增强的逻辑），增加方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//前置通知</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="5-进行通知的配置，根据功能选择通知类型"><a href="#5-进行通知的配置，根据功能选择通知类型" class="headerlink" title="5. 进行通知的配置，根据功能选择通知类型"></a>5. 进行通知的配置，根据功能选择通知类型</h5><ul><li>在Spring配置文件中，开启注解扫描</li><li>使用@Component注解创建User和UserProxy对象</li><li>在增强类上面添加注解@Aspect</li><li>在Spring配置文件中开启生成代理对象<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cc.landfill.spring.aop"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--开启AspectJ生成代理对象,如果扫描发现@Aspect注解的类，就会为该类生成对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置不同类型的通知<br>在增强类里，在作为通知方法上面添加通知类型注解，使用切入点表达式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">前置通知  <span class="meta">@Before</span></span><br><span class="line">    后置通知  <span class="meta">@AfterReturning</span> 在方法返回值之后，有异常不执行</span><br><span class="line">    环绕通知 在被增强方法的前后都会执行 <span class="meta">@Around</span> 有异常环绕通知的后半部分不会执行</span><br><span class="line">    异常通知 当被增强方法 出现异常的时候执行 <span class="meta">@AfterThrowing</span> 只有有异常才会执行</span><br><span class="line">    最终通知 类似<span class="keyword">finally</span>  <span class="meta">@After</span>在方法执行之后 无论是否有异常，都会执行</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知 该注解为前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(* cc.landfill.spring.aop.UserProxy.before(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* cc.landfill.spring.aop.User.add(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before around()..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            proceedingJoinPoint.proceed();   <span class="comment">//执行被增强的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"after around()..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-细节"><a href="#6-细节" class="headerlink" title="6. 细节"></a>6. 细节</h5></li><li>细节1：对相同切入点的抽取 PointCut<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//相同切入点可以进行抽取,把公共的切入点表达式写到PointCut,在通知配置的时候，直接写抽取的方法名</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"execution(* cc.landfill.spring.aop.User.add(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"pointDemo()"</span>) <span class="comment">//这里写的是切入点，不要搞错，写成通知了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before()..."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>细节2：多个增强类，可以设置通知的优先级,添加@Order注解，值越小，优先级越高。设置了Order的优先级比没设置的高<pre><code>使用于增强类中所有的通知，能用在方法上吗？可以用在方法上。显示默认比类上的Order，如果类上没有Order，应该是按首字母？然后会按类中方法的Order去执行。执行完一个类，才会执行另一个类</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(value = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//都对add做增强，设置执行的优先级</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(* cc.landfill.spring.aop.User.add(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person.before()..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="（3）基于AspectJ-配置文件-【了解】"><a href="#（3）基于AspectJ-配置文件-【了解】" class="headerlink" title="（3）基于AspectJ 配置文件 【了解】"></a>（3）基于AspectJ 配置文件 【了解】</h4><p>【了解，实际使用注解方式较多】 步骤3的另一种实现方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.aopxml.Book"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookProxy"</span> <span class="attr">class</span>=<span class="string">"cc.landfill.spring.aopxml.BookProxy"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!--配置aop增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"p"</span> <span class="attr">expression</span>=<span class="string">"execution(* cc.landfill.spring.aopxml.Book.buy())"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"bookProxy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--增强作用在具体的方法  把增强类的before() 配置在 被增强类的的p这个切入点的 前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"p"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）完全基于注解的AOP"><a href="#（4）完全基于注解的AOP" class="headerlink" title="（4）完全基于注解的AOP"></a>（4）完全基于注解的AOP</h4><p>使用配置类,不需要任何xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//声明是配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"cc.landfill.spring"</span>&#125;)  <span class="comment">//开启组件扫描。数组，可以扫描多个包，扫描有注解的类</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)  <span class="comment">//开启AspectJ来自动生成代理对象，默认值是true，可以省略括号</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 使用的时候：AnnotationConfigApplicationContext来获取context，来获取对象</span><br></pre></td></tr></table></figure><p>​<br>​    </p><h2 id="4、JdbcTemplate"><a href="#4、JdbcTemplate" class="headerlink" title="4、JdbcTemplate"></a>4、JdbcTemplate</h2><p>JdbcTemplate：对JDBC的操作进行了一些封装，方便操作数据库。也可以自己整合其他框架，如：Mybatis</p><h3 id="3-1-环境搭建"><a href="#3-1-环境搭建" class="headerlink" title="3.1 环境搭建"></a>3.1 环境搭建</h3><h4 id="1-引入相关的依赖"><a href="#1-引入相关的依赖" class="headerlink" title="1. 引入相关的依赖"></a>1. 引入相关的依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring-jdbc-5.2.6.RELEASE.jar</span><br><span class="line">spring-orm-5.2.6.RELEASE.jar</span><br><span class="line">spring-tx-5.2.6.RELEASE.jar</span><br><span class="line">mysql-connector-java-8.0.20.jar</span><br><span class="line">druid-1.1.9.jar</span><br></pre></td></tr></table></figure><h4 id="2-配置数据库连接池druid、配置JdbcTemplate-注入DataSource"><a href="#2-配置数据库连接池druid、配置JdbcTemplate-注入DataSource" class="headerlink" title="2. 配置数据库连接池druid、配置JdbcTemplate 注入DataSource"></a>2. 配置数据库连接池druid、配置JdbcTemplate 注入DataSource</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入连接池对象到JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过set方法注入property, 不用constructor-arg，用了会咋样？--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建Service类和Dao类，在Dao实例注入JdbcTemplate对象，在Service实例注入Dao对象"><a href="#3-创建Service类和Dao类，在Dao实例注入JdbcTemplate对象，在Service实例注入Dao对象" class="headerlink" title="3. 创建Service类和Dao类，在Dao实例注入JdbcTemplate对象，在Service实例注入Dao对象"></a>3. 创建Service类和Dao类，在Dao实例注入JdbcTemplate对象，在Service实例注入Dao对象</h4><p>开启组件扫描<br>创建对象<br>注入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">开启组件扫描</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"cc.landfill"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-CRUD"><a href="#3-2-CRUD" class="headerlink" title="3.2 CRUD"></a>3.2 CRUD</h3><h4 id="（1）增删改"><a href="#（1）增删改" class="headerlink" title="（1）增删改"></a>（1）增删改</h4><p>都是类似的，使用update() 改一下sql语句，删参数传id就行了<br>创建一个实体类<br>jdbcTemplate.update(String sql,Object…args)  sql语句，占位符的可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into book values(?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> update = template.update(sql, book.getId(), book.getName(), book.getStatus());</span><br><span class="line">       <span class="comment">//两种写法都可以</span></span><br><span class="line"><span class="comment">//      int update = template.update(sql, new Object[]&#123;book.getId(), book.getName(), book.getStatus()&#125;);</span></span><br><span class="line">        System.out.println(update);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdbcTemp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line">        BookService bookService = context.getBean(<span class="string">"bookService"</span>, BookService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bookService.addBook(<span class="keyword">new</span> Book(<span class="string">"communist manifesto"</span>,<span class="number">1</span>,<span class="string">"sold out"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（2）查"><a href="#（2）查" class="headerlink" title="（2）查"></a>（2）查</h4><ol><li><p>查询某个值 如 select count(*) from book<br>调用JdbcTemplate的queryForObject(String sql,Class clazz) 返回类型</p></li><li><p>查询返回对象<br>调用JdbcTemplate的queryForObject(String sql,RowMapper<T> rowMapper, Object…args)<br>RowMapper mapper = new BeanPropertyRowMapper<Book>(Book.class) 把查询结果的数据封装到泛型指定的类中<br>RowMapper接口，返回不同类型的数据，使用这个接口里面的实现类完成数据的封装，也可以自定义实现类</p></li><li><p>查询返回集合<br>查出列表<br>调用JdbcTemplate的query(String sql,RowMapper<T> rowMapper, Object…args)<br>没有参数可以省略<br>List<Book> bookList = template.query(String sql,new BeanPropertyRowMapper<Book>(Book.class))<br>返回的是list 每条记录放到对象，对象再放到list</p></li></ol><h4 id="（3）批量操作"><a href="#（3）批量操作" class="headerlink" title="（3）批量操作"></a>（3）批量操作</h4><p>1.批量添加<br>batchUpdate(String sql, List&lt;Object[]&gt; batchArgs)<br>Object[] 存放的是每条记录的 各个字段的值<br>List 是多个Object[]构成的多条记录</p><p>在DaoImpl传入参数List&lt;Object[]&gt; batchArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"insert into book values(?,?,?)"</span></span><br><span class="line">template.batchUpdate(sql,batchArgs);</span><br></pre></td></tr></table></figure><p>遍历list，然后对每个Object数组执行sql语句<br>2.批量修改和批量删除<br>和批量添加操作类似<br>new ArrayList<br>按占位符的顺序  创建数组<br>把数组add到list</p><p>删除的话，数组就一个id元素</p><h2 id="5、事务管理"><a href="#5、事务管理" class="headerlink" title="5、事务管理"></a>5、事务管理</h2><h3 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h3><p>数据库操作最基本的单元，逻辑上的一组操作，要么都成功，一个失败所有操作都失败</p><p>ACID 事务的特性<br>atomicity    最基本的单元<br>consistency  操作前后的数据是一致的<br>isolation     在不同事务操作之间互不影响<br>durability   一旦提交就发生改变，无法回到之前的状态</p><h3 id="5-2-事务环境搭建"><a href="#5-2-事务环境搭建" class="headerlink" title="5.2 事务环境搭建"></a>5.2 事务环境搭建</h3><p>数据库环境<br>完成对象的创建和依赖注入</p><h3 id="5-3-事务管理"><a href="#5-3-事务管理" class="headerlink" title="5.3 事务管理"></a>5.3 事务管理</h3><h4 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h4><p>事务一般添加到Service层<br>在Spring中进行事务管理操作有两种方式</p><ul><li>编程式</li><li>声明式（一般使用）<ul><li>基于注解（使用）</li><li>基于xml文件</li></ul></li></ul><p>声明式事务管理，底层使用的是AOP</p><p>Spring事务管理API<br>提供一个接口，代表事务管理器，这个接口针对不同框架提供不同的实现类<br>PlatformTransactionManager 接口<br>DataSourceTransactionManager  实现类： mybatis和JdbcTemplate都是使用这个类</p><h4 id="（2）注解实现声明式事务管理"><a href="#（2）注解实现声明式事务管理" class="headerlink" title="（2）注解实现声明式事务管理"></a>（2）注解实现声明式事务管理</h4><ol><li><p>在spring配置文件中 配置事务管理器<br>DataSourceTransactionManager </p></li><li><p>开启事务的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--引入tx名称空间，开启事务管理注解--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManger"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Service层的类上添加事务注解 @Transactional<br>可以在类上 和 方法上 添加该注解<br>类上：表示类中的所有方法都添加了事务<br>方法上：只针对该方法开启事务</p></li><li><p>关于事务的参数配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>,timeout = -<span class="number">1</span>,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor=Exception<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><p>propagation 传播行为有7种 事务方法：对数据库增删改导致数据进行变化的操作。传播行为：多事务方法进行互相调用的过程中，事务如何进行处理</p><ul><li>REQUIRED 有事务就在当前事务中运行，没有就新建一个事务。在一个事务方法中去，调用另一个事务</li><li>REQUIRED_NEW</li><li>SUPPORTS</li><li>NOT_SUPPORTED</li><li>MANDATORY</li><li>NEVER</li><li>NESTED<br>isolation 隔离级别 在多事务操作之间不会产生影响。<br>问题：</li><li>脏读 不同事务之间可以读到还没有提交的数据，一旦回滚，读到的数据就是暂时的</li><li>幻读 一个未提交的事务读取到另一事务添加的数据</li><li>不可重复读 一个未提交事务读取了提交的事务修改的数据，每次读到的数据都不一样。<br>通过设置事务的隔离级别来解决这些问题<br><img src="https://i.loli.net/2020/07/18/jp8yt3rkK1W9ZQS.png" alt="数据库隔离级别"><br>MySQL默认使用的是REPEATABLE_READ<br>timeout 规定时间内要进行提交，一旦超出时间不提交就会回滚  默认是-1 没有超时时间 以秒为单位<br>readOnly 是否只读  读：查询操作，默认值是false，可以进行增删改查。设置为true只能做查询操作<br>rollBackFor  出现哪些异常会进行回滚<br>noRollBackFor 出现哪些异常不进行回滚</li></ul></li></ol><h4 id="（3）基于xml实现声明式事务管理"><a href="#（3）基于xml实现声明式事务管理" class="headerlink" title="（3）基于xml实现声明式事务管理"></a>（3）基于xml实现声明式事务管理</h4><p>配置事务管理器</p><p>配置通知 （事务）</p><p>配置切入点和切面 （添加事务的位置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定按某种规则（可以使用通配符）的方法上面添加事务  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transact"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span><span class="comment">&lt;!--其他参数也是在这里配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置切入点和切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cc.landfill.service.AccountService.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面,把事务的通知设置到切入点上，就完成了切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）完全注解实现声明式事务管理"><a href="#（4）完全注解实现声明式事务管理" class="headerlink" title="（4）完全注解实现声明式事务管理"></a>（4）完全注解实现声明式事务管理</h4><p>配置类替代xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明为配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"cc.landfill"</span>) <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建数据库连接池对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring?serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        </span><br><span class="line">        jdbcTemplate.setDataSource(dataSource); <span class="comment">//根据类型自动装配,在ioc容器中去找该类型的对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、Spring5-新特性"><a href="#6、Spring5-新特性" class="headerlink" title="6、Spring5 新特性"></a>6、Spring5 新特性</h2><p>Spring5 基于jdk8 运行时兼容jdk9</p><h3 id="6-1-log4j2整合"><a href="#6-1-log4j2整合" class="headerlink" title="6.1 log4j2整合"></a>6.1 log4j2整合</h3><p>自带了通用的日志封装<br>移除了Log4jConfigListener，官方建议使用Log4j2</p><p>第一步：引入jar包<br>log4j-api-2.11.2.jar<br>log4j-core-2.11.2.jar<br>log4j-slf4j-impl-2.11.2.jar<br>slf4j-api-1.7.30.jar</p><p>第二步：创建log4j2.xml配置文件 名称是规定的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-Nullable注解"><a href="#6-2-Nullable注解" class="headerlink" title="6.2 @Nullable注解"></a>6.2 @Nullable注解</h3><p>可以使用在方法、属性、参数上，表示方法返回、属性值、参数值可以为空 类似Guava的Optional?<br>可以避免空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(@Nullable String name)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-核心容器支持函数式风格-GenericApplicationContext"><a href="#6-3-核心容器支持函数式风格-GenericApplicationContext" class="headerlink" title="6.3 核心容器支持函数式风格 GenericApplicationContext"></a>6.3 核心容器支持函数式风格 GenericApplicationContext</h3><p>//函数式风格创建对象，交给spring进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建GenericApplicationContext对象</span></span><br><span class="line">    GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">    <span class="comment">//调用context注册对象</span></span><br><span class="line">    context.refresh();</span><br><span class="line">    <span class="comment">//context.registerBean(User.class,() -&gt; new User()); //支持Lambda表达式</span></span><br><span class="line">    context.registerBean(<span class="string">"user1"</span>,User<span class="class">.<span class="keyword">class</span>,() -&gt; <span class="title">new</span> <span class="title">User</span>())</span>; <span class="comment">//也可以指定名称</span></span><br><span class="line">    <span class="comment">//获取spring注册的对象</span></span><br><span class="line">    <span class="comment">//User user = (User)context.getBean("cc.landfill.pojo.User");</span></span><br><span class="line">    User user = (User)context.getBean(<span class="string">"user1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-支持整合Junit5"><a href="#6-4-支持整合Junit5" class="headerlink" title="6.4 支持整合Junit5"></a>6.4 支持整合Junit5</h3><p>（1） 整合Junit4<br>引入相关的针对测试的依赖<br>创建测试类，使用注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)  //指定单元测试框架的版本</span></span><br><span class="line">@ContextConfiguration("classpath:bean1.xml") //加载配置文件</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>   <span class="comment">//就可以自动注入，不需要再使用getBean()</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2） 整合Junit5<br>导入junit5的依赖<br>使用注解<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">@ContextConfiguration("classpath:bean1.xml")*/</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@SpringJUnitConfig</span>(locations =<span class="string">"classpath:bean1.xml"</span>)  <span class="comment">//使用复合注解替代上面的两个注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transact();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-5-WebFlux"><a href="#6-5-WebFlux" class="headerlink" title="6.5 WebFlux"></a>6.5 WebFlux</h3><p>简介：<br>响应式编程<br>WebFlux执行流程和核心API</p><p>SpringWebflux(基于注解编程模型)<br>SpringWebflux(基于函数式编程模型)</p><p>需要基于：（暂时搁置）<br>SpringMVC<br>SpringBoot<br>Maven<br>Java8新特性 Lambda表达式 StreamAPI</p>]]></content>
    
    <summary type="html">
    
      Spring框架：IoC、AOP、JdbcTemplate、事务管理、Spring5新特性
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://paranoiddemon.github.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 框架初步</title>
    <link href="https://paranoiddemon.github.io/blog/posts/mybatis-notes.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/mybatis-notes.html</id>
    <published>2020-07-15T16:30:46.000Z</published>
    <updated>2020-07-17T01:31:55.395Z</updated>
    
    <content type="html"><![CDATA[<p>详见： <a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis官方文档</a></p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a>1.1 什么是Mybatis</h3><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis logo"></p><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>表现层：SpringMVC</p><p>持久层：Mybatis</p><p>业务层：处理业务需求</p><p>持久层的技术解决方案</p><p>JDBC相关的技术：</p><ul><li>Connection</li><li>PreparedStatement</li><li>ResultSet</li><li>Spring 的JDBCTemplate和 Apache的DBUtils</li></ul><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p>数据持久化</p><ul><li>持久化将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：断电即失</li><li>数据库，io持久化</li></ul><p>功能：保存不能丢失的数据，内存成本高，且风险高</p><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3  持久层"></a>1.3  持久层</h3><p>Dao层，Service层，Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限明显</li></ul><h3 id="1-4-为什么需要mybatis"><a href="#1-4-为什么需要mybatis" class="headerlink" title="1.4 为什么需要mybatis"></a>1.4 为什么需要mybatis</h3><ul><li>方便</li><li>简化JDBC代码。自动化框架</li><li>将数据存入到数据库中</li><li>更容易上手</li><li>优点：灵活，降低耦合（sql和代码的分离，xml），简单易用，提供映射标签，ORM（对象关系映射）</li></ul><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p> 搭建环境-&gt;导入mybatis-&gt;写代码-&gt;测试</p><p>新建maven项目 -&gt; 数据库-&gt; 在pom.xml中导入依赖<br>-&gt;编写mybatis-config.xml，配置JDBC的参数： url(mysql8.0要设置时区参数) driver username password<br>-&gt;写一个获取SqlSessionFactory和SqlSession的工具类（导入配置）<br>-&gt;写映射 「数据库表/实体类」、「字段/属性」 的Mapper接口，类似之前的DAO接口<br>-&gt;写Mapper的配置文件，写具体的Sql语句（增删改查等），一个Mapper绑定一个namespace<br>-&gt;测试（通过工具类获取sqlSession对象，类似PreparedStatement的功能，获取Mapper的实现类对象，调用CRUD方法）</p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1  搭建环境"></a>2.1  搭建环境</h3><p>创建 maven project &amp; module</p><p>数据库环境</p><p>导入依赖 mysql mybatis junit </p><p>编写配置文件 mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">l version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span> <span class="comment">&lt;!-- 事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?serverTimeZone=UTC<span class="symbol">&amp;amp;</span>useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>CharacterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写工具类 读取配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件，获取sqlSessionFactory工厂对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取sqlSession的方法</span></span><br><span class="line">    <span class="comment">//sqlSession完全包含了面向数据库执行sql命令所需的方法. //有点像JDBCTemplate 和 DBUtils?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-编写代码"><a href="#2-2-编写代码" class="headerlink" title="2.2 编写代码"></a>2.2 编写代码</h3><ul><li>实体类</li><li>Dao接口</li><li>接口实现类由DaoImpl转换为一个Mapper配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace = 绑定一个对应的DAO/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cc.landfill.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select查询语句,把原来DaoImpl实现接口中的方法，放到一个标签里了,而其他获取数据库连接的工作都由mybatis做了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"cc.landfill.pojo.User"</span>&gt;</span>  <span class="comment">&lt;!--全类名--&gt;</span></span><br><span class="line">    select * from from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class UserMapperTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        &#x2F;&#x2F;获取sqlSession对象</span><br><span class="line">        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">        &#x2F;&#x2F;获取UserMapper 就是之前的UserDao的对象,就可以使用Mapper接口中定义的方法了</span><br><span class="line">        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList &#x3D; mapper.getUserList();</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、org.apache.ibatis.binding.BindingException: Type <span class="class"><span class="keyword">interface</span> <span class="title">cc</span>.<span class="title">landfill</span>.<span class="title">dao</span>.<span class="title">UserMapper</span> <span class="title">is</span> <span class="title">not</span> <span class="title">known</span> <span class="title">to</span> <span class="title">the</span> <span class="title">MapperRegistry</span>.</span></span><br><span class="line"><span class="class">需要在<span class="title">mybatis</span>核心配置文件<span class="title">mybatis</span>-<span class="title">config</span>.<span class="title">xml</span>中注册<span class="title">mapper</span>.<span class="title">xml</span></span></span><br><span class="line"><span class="class">     &lt;<span class="title">mappers</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">mapper</span> <span class="title">resource</span></span>=<span class="string">"cc/landfill/dao/UserMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、java.io.IOException: Could not find resource com/xxx/xxxMapper.xml</span><br><span class="line">Maven在idea中默认不读取java路径下的xml文件，在maven的pom.xml文件下bulid路径</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!-- resources文件 --&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;!-- 引入映射文件 --&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;!-- 引入映射文件 --&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>、Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: <span class="number">2</span> 字节的 UTF-<span class="number">8</span> 序列的字节 <span class="number">2</span> 无效。</span><br><span class="line">    </span><br><span class="line">字符集问题  idea设置  file-settings-editor-file encodings</span><br><span class="line">把 Project Encoding 和 Global Encoding 都 设置为utf-<span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><p>UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert插入一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>mapper.xml</p><p>1、namespace要和Mapper接口的全类名一致<br>2、select<br>    -id 对应namespace中的方法名<br>    -resultType  sql返回的结果集类型<br>    -parameterType 传入参数的类型<br>3、insert<br>4、update<br>5、delete</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace = 绑定一个对应的DAO/Mapper接口， 每一个namespace对应一个Mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cc.landfill.dao.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--查询全部用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"cc.landfill.pojo.User"</span>&gt;</span></span><br><span class="line">        select *  from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据Id查询用户  #&#123;&#125;类似占位符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cc.landfill.pojo.User"</span>&gt;</span></span><br><span class="line">        select *  from mybatis.user where id = #&#123;id&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入用户--&gt;</span>  <span class="comment">&lt;!--对象中的属性可以直接取，要和实体类中名字对应--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"cc.landfill.pojo.User"</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--修改用户--&gt;</span>  <span class="comment">&lt;!--注意标签的选用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"cc.landfill.pojo.User"</span>&gt;</span></span><br><span class="line">       update mybatis.user set name = #&#123;name&#125;,pwd =#&#123;pwd&#125; where id =#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：getMapper()</span></span><br><span class="line">        <span class="comment">//获取UserMapper 就是之前的UserDao的对象,就可以使用Mapper接口中定义的方法了</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：直接调用方法，不灵活，类型更安全（不用强转）不建议使用</span></span><br><span class="line">        List&lt;User&gt; userList1 = sqlSession.selectList(<span class="string">"cc.landfill.dao.UserMapper.getUserList"</span>);</span><br><span class="line">        userList1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;  <span class="comment">//获取映射接口的对象</span></span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改需要提交事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> n = mapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">"ma"</span>, <span class="string">"123"</span>)); <span class="comment">//如果不传入id就自增长，传入不重复就按传入的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.updateUser(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"jerry"</span>,<span class="string">"123"</span>));</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i);   <span class="comment">//返回1就是删除成功，返回0 就是没有删除， 参数是affected rows？</span></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：增删改需要提交事务 <code>sqlSession.commit();</code></p><p>使用Map传递参数，模糊查询要防止sql注入。</p><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><p>mybatis-config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration（配置）   有顺序要求的</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>CharacterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>environment：可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。 有助于将 SQL 映射应用于多种数据库之中，例如，开发、测试和生产环境需要有不同的配置，通过更改default实现</p><p>transactionManager：事务管理器有两种type=”[JDBC|MANAGED]”</p><ul><li>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li><li>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期</li></ul><p>dataSource：JDBC数据源接口   type=”[UNPOOLED|POOLED|JNDI]”，必要的四个属性driver url username password</p><ul><li>UNPOOLED   直接建立连接</li><li>POOLED    使用了连接池技术</li><li>JNDI  这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用</li></ul><h3 id="4-3-属性-properties"><a href="#4-3-属性-properties" class="headerlink" title="4.3 属性 properties"></a>4.3 属性 properties</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><p>即datasource里的那些属性</p><p>1、编写配置文件db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;CharacterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br></pre></td></tr></table></figure><p>2、在mybatis-config.xml引入外部配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">可以在其中设置属性</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/config.properties"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"dev_user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"F2Fa3!33TYyg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">如果和environment有重复的字段，使用properties的值，不会使用environment中的属性</span><br></pre></td></tr></table></figure><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4. 4 类型别名（typeAliases）"></a>4. 4 类型别名（typeAliases）</h3><p>在配置中把全类名添加一个别名，就可以减少在配置Mapper.xml中的重复书写</p><p>1、类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Author&quot; type&#x3D;&quot;domain.blog.Author&quot;&#x2F;&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Blog&quot; type&#x3D;&quot;domain.blog.Blog&quot;&#x2F;&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Comment&quot; type&#x3D;&quot;domain.blog.Comment&quot;&#x2F;&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Post&quot; type&#x3D;&quot;domain.blog.Post&quot;&#x2F;&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Section&quot; type&#x3D;&quot;domain.blog.Section&quot;&#x2F;&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Tag&quot; type&#x3D;&quot;domain.blog.Tag&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure><p>2、也可以设置包名。通过包名调用包中的类，</p><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名，不区分大小写。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><p>基本数据类型在前面加了_  其他基本都是首字母变小写</p><p><strong>前者用于实体类比较少的时候，第二种用于实体类多的情况</strong></p><h3 id="4-5-设置（settings）"><a href="#4-5-设置（settings）" class="headerlink" title="4.5 设置（settings）"></a>4.5 设置（settings）</h3><p>有需要查文档</p><table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">cacheEnabled</td><td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">lazyLoadingEnabled</td><td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">logImpl</td><td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr></tbody></table><h3 id="4-6-映射器（mappers）"><a href="#4-6-映射器（mappers）" class="headerlink" title="4.6 映射器（mappers）"></a>4.6 映射器（mappers）</h3><p>四种方式MapperRegistry   注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span>  【推荐使用】</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/builder/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span>  【不推荐使用】</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span>   【需要UserMapper.xml和类在同一个包，而且必须同名】</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span>  【需要UserMapper.xml和类在同一个包，而且必须同名】</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-类型处理器-typeHandlers"><a href="#4-7-类型处理器-typeHandlers" class="headerlink" title="4.7 类型处理器  typeHandlers"></a>4.7 类型处理器  typeHandlers</h3><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p><p>就是把 <strong>参数或者结果集</strong> 转换称为一个 JavaBean对象，和DBUtils中的  ResultSetHandler相识，而后者只对结果集进行处理。</p><p>默认情况下已经支持大部分类型。也可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 </p><h3 id="4-8-其他"><a href="#4-8-其他" class="headerlink" title="4.8 其他"></a>4.8 其他</h3><p>objectFactory（对象工厂）<br>plugins</p><ul><li>mybatis-generator-core</li><li>mybatis-plus  简化操作</li><li>通用mapper</li></ul><h3 id="4-9-生命周期和作用域"><a href="#4-9-生命周期和作用域" class="headerlink" title="4.9 生命周期和作用域"></a>4.9 生命周期和作用域</h3><p>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</p><p>SqlSessionFactoryBuilder</p><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。</p><p>SqlSessionFactory</p><p>一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。<br>类似一个数据库连接池。使用单例模式</p><p>SqlSession</p><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。</p><p>类似连接池的一个请求</p><p>Mapper</p><p>由SqlSession获得，类似于UserDao的实现类的对象，通过mapper对象来实现增删改查</p><h2 id="5、resultMap"><a href="#5、resultMap" class="headerlink" title="5、resultMap"></a>5、resultMap</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中字段是pwd，而在实例类中的属性是password，就无法通过类型处理器去读取和封装该属性。 实例类属性和数据库字段没有映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name, pwd from user where id &#x3D; #&#123;id&#125;</span><br></pre></td></tr></table></figure><p>解决方法<br>之前的方法：sql语句起别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name, pwd password from user where id &#x3D; #&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-resultMap-结果集映射"><a href="#5-2-resultMap-结果集映射" class="headerlink" title="5.2 resultMap 结果集映射"></a>5.2 resultMap 结果集映射</h3><p>使用结果集映射，将数据库中的字段和，实体类中的属性做手动的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cc.landfill.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span>  可以只写不同的，其他的会自动转换</span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据Id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">        select *  from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实resultType也是简单的非显式的结果映射</p><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>数据库做出现了异常，出现异常需要发错</p><p>sout和debug也是同样的功能</p><p>日志工厂：</p><ul><li>LOG4J</li><li>STDOUT-LOGGING 标准日志输出</li></ul><p>在配置的Settings里设置STDOUT-LOGGING，不需要导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Logging initialized using <span class="string">'class org.apache.ibatis.logging.stdout.StdOutImpl'</span> adapter.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">626393072</span>.</span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">2555f</span>ff0]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">11</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: <span class="number">11</span>, ma, <span class="number">123</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">User&#123;id=<span class="number">11</span>, name=<span class="string">'ma'</span>, pwd=<span class="string">'123'</span>&#125;</span><br><span class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">2555f</span>ff0]</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@<span class="number">2555f</span>ff0]</span><br><span class="line">Returned connection <span class="number">626393072</span> to pool.</span><br></pre></td></tr></table></figure><h3 id="6-2-LOG4J"><a href="#6-2-LOG4J" class="headerlink" title="6.2 LOG4J"></a>6.2 LOG4J</h3><p>Log4j是Apache的一个开源项目，是一个用Java编写的可靠，快速和灵活的日志框架（API）</p><ul><li>可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；</li><li>可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程</li><li>可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li></ul><p>1、导入依赖</p><p>2、配置log4j.properties</p><p>3、在settings里设置为log4j</p><p>4、使用</p><p>简单使用：在控制台输出，可以用来调试</p><ul><li><p>导包</p></li><li><p>创建日志对象，传入当前类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Static Logger logger = Logger.getLogger(UserTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">logger.info(<span class="string">"test:xxxx"</span>)</span><br></pre></td></tr></table></figure><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2></li></ul><p>减少数据的处理</p><h3 id="7-1-limit分页"><a href="#7-1-limit分页" class="headerlink" title="7.1 limit分页"></a>7.1 limit分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user limit 0,3</span><br><span class="line">select * from user limit 3    默认从索引0开始</span><br></pre></td></tr></table></figure><ul><li>接口</li><li>Mapper.xml</li><li>测试</li></ul><h3 id="7-2-rowBounds分页"><a href="#7-2-rowBounds分页" class="headerlink" title="7.2 rowBounds分页"></a>7.2 rowBounds分页</h3><p>现在用的比较少</p><p>sql查询结果</p><p>在java中实现分页，使用rowBounds对象传分页的参数  sqlSession.selectList</p><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><a href="https://pagehelper.github.io/" target="_blank" rel="noopener">PageHelper</a></p><h2 id="8、注解开发"><a href="#8、注解开发" class="headerlink" title="8、注解开发"></a>8、注解开发</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><p>解耦，定义与实现的分离</p><h3 id="8-2-注解开发"><a href="#8-2-注解开发" class="headerlink" title="8.2 注解开发"></a>8.2 注解开发</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取全部用户，使用注解,但是就不能设置结果集映射了，简单的使用注解，复杂的使用xml配置</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在核心配置文件中绑定接口  </span></span><br><span class="line">    &lt;!--绑定接口--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.landfill.dao.UserMapper"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>底层通过反射去获取注解里的sql语句,实现该方法，</p><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><p>可以在创建工具类的时候设置自动提交事务，用xml配置的时候，也可以打开，传入true，但是要考虑数据安全性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.landfill.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取全部用户，使用注解,但是就不能设置结果集映射了，简单的使用注解，复杂的使用xml配置</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByIdName</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line">    <span class="comment">//如果要传入多个参数，需要注解，只有一个参数可以直接用， #&#123;id&#125; 只有通过注解才能取得参数,引用对象不需要写param注释，</span></span><br><span class="line">    <span class="comment">// 那String呢？  String也要加</span></span><br><span class="line"><span class="comment">//    User getUserByIdName( int id, String name);   //这种方式就会报错，</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user values (null,#&#123;name&#125;,#&#123;pwd&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;    <span class="comment">//引用对象中的属性，可以不用加@Param</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name = #&#123;name&#125;,pwd =#&#123;pwd&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;  <span class="comment">//注解首字母大写，使用括号，字符串要加引号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 </p><p>1、 @Param 传递多个参数</p><p>2、注意 <a href="https://juejin.im/post/5de8dad0f265da33d451e9f9" target="_blank" rel="noopener">Mybatis中#{}与${}的区别</a></p><p>#{} 相当于是PrepareedStatement中的占位符，可以防止sql注入   ${}  是直接显示到sql语句中</p><h3 id="8-4-mybatis工作流程"><a href="#8-4-mybatis工作流程" class="headerlink" title="8.4 mybatis工作流程"></a>8.4 mybatis工作流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><p>Resources加载全局配置文件到InputStream-&gt;实例化SqlSessionFactoryBuilder-&gt;解析配置文件流XmlConfigBuilder（inputStream,enviroment,properties),（也可能直接从外部导入properties）,得到一个parser,调用parse方法得到Configuration对象（存放了前面提到的所有配置信息以及Executor,事务管理相关的对象），SqlSessionFactory的this调用build把这个config传入对象-&gt;得到实例化的sqlSessionFactory（携带了config信息）-&gt;TransctionManager事务管理-&gt;创建Executor执行器-&gt;创建sqlSession-&gt;实现CRUD -&gt;根据执行结果回滚或者提交事务</p><h2 id="9、Lombok-插件"><a href="#9、Lombok-插件" class="headerlink" title="9、Lombok 插件"></a>9、Lombok 插件</h2><blockquote><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p></blockquote><p>java插件 通过注解来生成JavaBean，再也不用Alt + Insert了</p><p>1、IDEA 安装插件</p><p>2、导入maven依赖</p><p>3、使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Data   生成 getter setter equals toString hashCode NoArgsConstructor</span><br><span class="line"></span><br><span class="line">@AllArgsConstructor: 自动生成全参数构造函数。</span><br><span class="line"></span><br><span class="line">@NoArgsConstructor: 自动生成无参数构造函数。</span><br><span class="line">    </span><br><span class="line">@ToString</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@Log4j</span><br><span class="line"></span><br><span class="line">还有需要查文档</span><br></pre></td></tr></table></figure><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><h3 id="10-1-按照查询嵌套处理"><a href="#10-1-按照查询嵌套处理" class="headerlink" title="10.1 按照查询嵌套处理"></a>10.1 按照查询嵌套处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getStudentList&quot; resultMap&#x3D;&quot;StudentTeacher&quot;&gt;</span><br><span class="line">        select * from student;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id&#x3D;&quot;StudentTeacher&quot; type&#x3D;&quot;Student&quot;&gt;</span><br><span class="line">        &lt;association property&#x3D;&quot;teacher&quot; column&#x3D;&quot;tid&quot; javaType&#x3D;&quot;Teacher&quot; select&#x3D;&quot;getTeacher&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--对象用association</span><br><span class="line">            集合用collection   等于是先查出Student，然后把student的uid 传给关联查询的参数id</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;&#x2F;resultMap&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getTeacher&quot; resultType&#x3D;&quot;Teacher&quot;&gt;</span><br><span class="line">        select * from teacher where id &#x3D; #&#123;id&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    </span><br><span class="line">    类似于子查询</span><br></pre></td></tr></table></figure><h3 id="10-2-按照结果嵌套出里"><a href="#10-2-按照结果嵌套出里" class="headerlink" title="10.2 按照结果嵌套出里"></a>10.2 按照结果嵌套出里</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    B.id            as blog_id,</span><br><span class="line">    B.title         as blog_title,</span><br><span class="line">    B.author_id     as blog_author_id,</span><br><span class="line">    A.id            as author_id,</span><br><span class="line">    A.username      as author_username,</span><br><span class="line">    A.password      as author_password,</span><br><span class="line">    A.email         as author_email,</span><br><span class="line">    A.bio           as author_bio</span><br><span class="line">  from Blog B left outer join Author A on B.author_id = A.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">column</span>=<span class="string">"blog_author_id"</span> <span class="attr">javaType</span>=<span class="string">"Author"</span> <span class="attr">resultMap</span>=<span class="string">"authorResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 元素在嵌套结果映射中扮演着非常重要的角色。你应该总是指定一个或多个可以唯一标识结果的属性。  只需要指定可以唯一标识结果（如主键）。</p><p>需要连表查询的，涉及到另一个表（在Java中是一个类作为属性）的字段，可以使用resultMap来映射，其中普通的属性使用 properties 和 column进行映射；association映射复杂对象。再对这个对象中的属性进行嵌套的resultMap映射</p><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-1-按照查询嵌套"><a href="#11-1-按照查询嵌套" class="headerlink" title="11.1 按照查询嵌套"></a>11.1 按照查询嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;teacherStudents2&quot; type&#x3D;&quot;teacher&quot;&gt;</span><br><span class="line">    &lt;collection property&#x3D;&quot;students&quot; column&#x3D;&quot;id&quot; javaType&#x3D;&quot;arrayList&quot; ofType&#x3D;&quot;student&quot; select&#x3D;&quot;getStudents&quot;&gt;&lt;&#x2F;collection&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;getTeacher2&quot; resultMap&#x3D;&quot;teacherStudents2&quot;&gt;</span><br><span class="line">    select * from teacher where id &#x3D; #&#123;tid&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;getStudents&quot; resultType&#x3D;&quot;student&quot;&gt;</span><br><span class="line">    select * from student where tid &#x3D; #&#123;tid&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><h3 id="11-2-按照结果嵌套"><a href="#11-2-按照结果嵌套" class="headerlink" title="11.2 按照结果嵌套"></a>11.2 按照结果嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getTeacher&quot; resultMap&#x3D;&quot;teacherStudents&quot;&gt;</span><br><span class="line">    select t.name, t.id,s.id , s.name sname from teacher t</span><br><span class="line">    left join student s on t.id &#x3D; s.tid</span><br><span class="line">    where t.id &#x3D;#&#123;id&#125;;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;teacherStudents&quot; type&#x3D;&quot;teacher&quot;&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;collection property&#x3D;&quot;students&quot; ofType&#x3D;&quot;Student&quot;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;id&quot; column&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;tid&quot; column&#x3D;&quot;tid&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;collection&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure><p>association 多对一<br>collection 一对多<br>javaType 类型<br>ofType 集合中的泛型约束</p><h2 id="12、动态sql"><a href="#12、动态sql" class="headerlink" title="12、动态sql"></a>12、动态sql</h2><p>根据不同的条件生成不同的sql语句 ，不需要拼接sql</p><p>类似JSTL标签 有流程控制的标签  if choose trim foreach</p><p>搭建环境</p><h3 id="12-1-IF"><a href="#12-1-IF" class="headerlink" title="12.1 IF"></a>12.1 IF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogList"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span>    /* 这里取map中的值不需要加引号*/</span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;"author"&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"create_time!=null"</span>&gt;</span></span><br><span class="line">        and create_time = #&#123;"creatTime"&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"views!=null"</span>&gt;</span></span><br><span class="line">        and views &gt; #&#123;views&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-2-chooes-when-otherwise"><a href="#12-2-chooes-when-otherwise" class="headerlink" title="12.2 chooes when otherwise"></a>12.2 chooes when otherwise</h3><p>传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。若两者都没有传入，就返回标记为 featured 的 BLOG（这可能是管理员认为，与其返回大量的无意义随机 Blog，还不如返回一些由管理员挑选的 Blog）。相当于switch case，只要满足第一个条件，语句就结束了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-3-trim-where-set"><a href="#12-3-trim-where-set" class="headerlink" title="12.3 trim where set"></a>12.3 trim where set</h3><p>*<em>where *</em>至少有一个子元素返回的时候会增加 where，如果开头是and ，or 就会自动去除，就不再需要使用<code>where 1 = 1</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>*<em>set *</em>用于update语句，可以动态的更新</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>trim</strong>  用于自定义where 和 set</p><p>select * from blog where  条件1  and  条件2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（and or 后的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本质上还是SQL语句，但是增加了逻辑代码，来保证SQL语句的正确执行</p><h3 id="12-4-foreach"><a href="#12-4-foreach" class="headerlink" title="12.4 foreach"></a>12.4 foreach</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectPostIn&quot; resultType&#x3D;&quot;domain.blog.Post&quot;&gt;</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  &lt;foreach item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; collection&#x3D;&quot;list&quot;</span><br><span class="line">      open&#x3D;&quot;(&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;</span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>(item1,item2…) 可以遍历一个集合，指定其开始，分隔、结束的符号，配合sql语句的</p><p><code>where field in (value1,value2,value3)</code>来使用,也可以用在其他and or的拼接中</p><p>可以拼接字段比较多的情况，不需要一项项手写</p><h3 id="12-5-sql片段"><a href="#12-5-sql片段" class="headerlink" title="12.5 sql片段"></a>12.5 sql片段</h3><p>将公共的部分抽取出来，复用。使用sql标签，在增删改查标签中去include 引用其id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span>    /* 这里取map中的值不需要加引号*/</span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;"author"&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"create_time!=null"</span>&gt;</span></span><br><span class="line">        and create_time = #&#123;"creatTime"&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"views!=null"</span>&gt;</span></span><br><span class="line">        and views &gt; #&#123;views&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogList"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>基于单表定定义sql片段，才具有重用性</li><li>不要包含where标签</li></ul><h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><p>什么是缓存：存在内存中的临时数据</p><p>将用户经常查询的数据放在缓存中，不再需要从关系型数据库中查询，从缓存中查询，提高查询效率，解决高并发系统的性能问题</p><p>redis等非关系型数据库 就是在实现这些功能</p><p>功能：减少和数据库的交互次数，提高系统效率（用户的访问大部分是查询）</p><p>使用缓存的场景：经常查询并且不经常改变的数据。</p><h3 id="13-2-Mybatis-缓存"><a href="#13-2-Mybatis-缓存" class="headerlink" title="13.2 Mybatis 缓存"></a>13.2 Mybatis 缓存</h3><p>一级缓存 默认开启 SqlSession级别的缓存，也称为本地缓存</p><p>二级缓存 需要手动开启，nameSpace级别的缓存，对应着具体的Mapper</p><p>而且提供了Cache接口，可以自定义二级缓存</p><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><p>缓存失效的情况：</p><ul><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>查询不同的东西</li><li>查询不同的Mapper.xml</li><li>手动清理缓存  <code>sqlSession.clearCache</code></li></ul><p>默认开启，在一次SqlSession的会话中有效，本质上是Map，一级缓存的作用域低。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><p>要启用全局的二级缓存，只需要在你的 SQL 映射文件<code>Mapper.xml</code>中添加一行，也可以自己配置参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">"FIFO"</span> 先进先出</span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">"60000"</span>  <span class="attr">60s</span>刷新</span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"512"</span>最多存的缓存，指向的引用</span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>虽然默认是开启的，但最好在<code>mybatis-config.xml</code>中的setting中显式声明，让配置文件更具可读性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>工作机制：</p><p>一个会话去查询，先存入一级缓存。当会话关闭，一级缓存中的数据就会被保存到二级缓存中，新的会话去查询二级缓存。没有再查一级缓存，没有再查数据库。</p><p>注意：</p><ul><li>需要将实例类序列化。不然新的会话无法读取，会报错</li><li>只在同一个Mapper下有效</li></ul><h3 id="13-5-自定义缓存-Ehcache"><a href="#13-5-自定义缓存-Ehcache" class="headerlink" title="13.5 自定义缓存 Ehcache"></a>13.5 自定义缓存 Ehcache</h3><p>Ehcache 分布式缓存</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用配置文件配置更多的参数</p><p>可以自己自定义Cache接口的实现类。</p><p>在其他的namespace中引用相同配置的缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">"com.someone.application.data.SomeMapper"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>大部分都是使用redis</p>]]></content>
    
    <summary type="html">
    
      可以理解为官方文档摘抄
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
      <category term="Mybatis" scheme="https://paranoiddemon.github.io/blog/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>去往远方的猪圈</title>
    <link href="https://paranoiddemon.github.io/blog/posts/digital-panopticon.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/digital-panopticon.html</id>
    <published>2020-07-14T16:30:46.000Z</published>
    <updated>2020-07-18T06:24:28.362Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/18/7jlM3TEeOFthskf.png" alt="pig float in the sky"></p><p>1、</p><p>下午随手更新了一下Clash的配置文件。发现节点都无法显示。查资料发现似乎是解析配置文件的规范做了调整，于是下载了新版的Clash，发现购买的另一家机场尚未按新的规范写配置文件，又解析不了。于是又开始手动修改，浪费了人生中的一个多小时。</p><p>这些年为了跨过GFW，鼓捣了不少东西。花了很多的力气，只是为了实现那么一件本该很简单的事情：自由地访问互联网。在这件事情上我一直是个实用主义者，我只希望用早少的精力，来访问Google和YouTube罢了。虽然花一些时间暂时能实现，但这些工具终究不过是义肢，充满了不便。偶尔在中国大陆之外直接访问这些全世界都在使用的网站甚至会产生微弱的兴奋感，这是我们所独有的「小确幸」。</p><p>我只有一个观点，自由访问互联网是和自由阅读书籍一样重要的权利。任何支持GFW的言论都是可笑至极的。</p><p>2、</p><p>另一个问题是，在这个大的局域网中还有多少局域网呢？李如一的系列文章「<a href="https://blog.yitianshijie.net/2018/02/27/2nd-anniversary-of-ditching-wechat/" target="_blank" rel="noopener">告别微信两周年</a>」已经写的很详尽了。网络空间事实上已经被大公司分割成碎片，加上日益束紧的社会文化环境，「中文互联网内容枯萎」、「百度已死」似乎是一种必然，难道期待死水里盛开出什么吗？</p><p>如今，Netizen这个词已经不合时宜了，大量的当代互联网用户已经失去其主体性，访问互联网的用户只不过是面目模糊的「流量」，是数据库的数据，是广告喂食填充的禽类。而我们也相当配合，把自己装进一个个笼子里，被上传。在成熟之后，屠宰、肢解、流转、端上餐桌。商业社会有着一整套精细的流程控制这种逻辑的运转。</p><p>攻壳机动队里有个有意思的问题：如果放弃肉体，把Ghost上传到网络，在网络中如何维持个体性？还是最后都化为一团混沌？</p><p>3、</p><p>后COVID-19的世界在日益走向封闭，我也不知道在这样的浪潮里，个人能做些什么，或许如 <a href="https://www.youtube.com/watch?v=KgzQuE1pR1w" target="_blank" rel="noopener">Bill Hicks 所说</a>，see all of us as one是一种个人可以践行的心态。</p><blockquote><p>But it doesn’t matter, because it’s just a ride. And we can change it any time we want. It’s only a choice. No effort, no work, no job, no savings of money. Just a simple choice, right now, between fear and love. The eyes of fear want you to put bigger locks on your doors, buy guns, close yourself off. The eyes of love instead see all of us as one. Here’s what we can do to change the world, right now, to a better ride. Take all that money we spend on weapons and defenses each year and instead spend it feeding and clothing and educating the poor of the world, which it would pay for many times over, not one human being excluded, and we could explore space, together, both inner and outer, forever, in peace.”</p></blockquote><p>4、</p><p>近期看了一些关于开源社区的资料，感觉很有启发。</p><blockquote><p><a href="http://opensourceway.community/posts/foundation_introduce/how_apache_works/" target="_blank" rel="noopener">Apache 是如何运作的？</a></p><p><a href="https://www.youtube.com/watch?v=OrxmtDw4pVI&list=WL&index=15&t=692s" target="_blank" rel="noopener">Vue.js：纪录片</a></p><p><a href="https://www.bilibili.com/video/av16549975/" target="_blank" rel="noopener">互联网之子  The Internet’s Own Boy: The Story of Aaron Swartz</a></p></blockquote><p>虽然带着浓厚的理想主义色彩，但他们和盗火的普罗米修斯一样伟大。</p><p>5、</p><p>想起之前看的 <a href="https://www.youtube.com/watch?v=pY7AT10-J_w" target="_blank" rel="noopener">紀念南亭村的一隻豬</a>，也许世界本来就是一个又一个巨大的猪圈，但不应该放弃奔跑，直到走了很远的路，看见围栏，然后跨过去。</p>]]></content>
    
    <summary type="html">
    
      如何在日渐封闭的数字世界和物理世界保持开放？
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Thoughts" scheme="https://paranoiddemon.github.io/blog/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Google Keep 闯作收录</title>
    <link href="https://paranoiddemon.github.io/blog/posts/keep-notes.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/keep-notes.html</id>
    <published>2020-07-08T16:30:46.000Z</published>
    <updated>2020-07-10T13:42:01.460Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h4><p>“答应我，不要把我遗忘！”老张临下班时紧紧攥着我的手说</p><h4 id="2018-3-23"><a href="#2018-3-23" class="headerlink" title="2018-3-23"></a>2018-3-23</h4><p>城市垃圾从广州大桥一跃而下</p><p>夺取一种真正的伟大胜利</p><p>这是它最后的尊严</p><h4 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h4><p>赤条条的小李在雪地里疯狂打滚</p><p>好几个小时</p><p>他炙热又痛苦的心啊</p><h4 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h4><p>海水漫过床沿<br>陨石砸烂屋顶<br>沙尘暴遮天蔽日<br>火山冒出滚滚浓烟<br>一场雪崩即将来临</p><p>灰烬会掩埋时间<br>所有风都会向北吹<br>直到北极变成南极<br>南极熊开始吃草<br>俄罗斯沦为荒漠<br>可燃冰兀自熊熊燃烧</p><p>万有引力失灵<br>河水往高处流<br>螃蟹直立行走<br>猫头鹰在马背上跳舞<br>远洋轮船在地中海里打转<br>太空飞行器原地徘徊</p><p>宇宙万物的法则<br>是时候重新修订<br>谁来为所有生灵立法</p><p>春天来了<br>请把我冷冻结冰<br>一千年后的一个春天<br>唤醒我<br>过一种太空生活<br>像一个西部牛仔 荒野镖客<br>义无反顾飞向宇宙深处<br>和中子星同归于尽</p><h4 id="2018-3-29-1"><a href="#2018-3-29-1" class="headerlink" title="2018-3-29"></a>2018-3-29</h4><p>无论如何 先活到夏天<br>看看女孩儿们的短裙<br>吃一个五羊牌甜筒<br>直到长柄伞被台风吹折</p><h4 id="2018-4-4"><a href="#2018-4-4" class="headerlink" title="2018-4-4"></a>2018-4-4</h4><p>阿森纳，坚持住<br>好事情会发生——温格下课！</p><h4 id="2018-4-14"><a href="#2018-4-14" class="headerlink" title="2018-4-14"></a>2018-4-14</h4><p>来自二沙岛中心的大功率宇宙广播，“当代生活是autoregression，保持警惕” </p><h4 id="2018-4-17"><a href="#2018-4-17" class="headerlink" title="2018-4-17"></a>2018-4-17</h4><p>1.</p><p>愚人码头<br>是不是有去往幸福的船</p><p>2.</p><p>雄性人类有没有好人，感觉没有</p><p>3.</p><p>现代人普遍焦虑，秃头成为一种进化趋势</p><h4 id="2018-5-8"><a href="#2018-5-8" class="headerlink" title="2018-5-8"></a>2018-5-8</h4><p>想了一个新媒体创业项目，开一个微信公众号，每天晚上10点更新，内容是从小区里随便抱个猫回来放在Cherry红轴机械键盘上，自由活动3分钟，阅读量每篇10w+应该没问题</p><h4 id="2018-8-12"><a href="#2018-8-12" class="headerlink" title="2018-8-12"></a>2018-8-12</h4><p>现代人走进CBD或者从一个小区走进另一个小区，会不会产生一种「又回到原点」的困惑。很多人没有手机，小区都走不出去，我敢说。更别说找到正佳广场东南门了。</p><p>我的思考，十年后的城市，一种postpostmodern建筑设计风格。写字楼，住宅全部统一设计（取消别墅），建筑长宽高统一（100×100×200m立方体），外立面统一（玻璃幕墙，反射能力强），实现一套图纸用全国，严肃，统一，整齐。取消绿化，取消路牌，取消postmodern。</p><p>一种真真正正的「钢铁森林，镜面迷宫」，走国人民一同步入communismpunk，新时代，温暖，眼角湿润。</p><h4 id="2018-9-17"><a href="#2018-9-17" class="headerlink" title="2018-9-17"></a>2018-9-17</h4><p>1.</p><p>就像是开着捷达追一列时速300的火车，所有的渴望都越来越远，直到最后一个车厢也消失在视野里，你冲出匝道，把中午吃的炒牛河通通吐了出来 </p><p>2.</p><p>山竹，带我走吧，我想回家了 </p><h4 id="2018-12-20"><a href="#2018-12-20" class="headerlink" title="2018-12-20"></a>2018-12-20</h4><p>语言是无能的，残疾的，你能感受到，但你不能说。</p><h4 id="2019-1-5"><a href="#2019-1-5" class="headerlink" title="2019-1-5"></a>2019-1-5</h4><p>你在修建通往何处的路？</p><h4 id="2019-2-24"><a href="#2019-2-24" class="headerlink" title="2019-2-24"></a>2019-2-24</h4><p>巴士 开往目的地<br>4:01 4:02 …4:59<br>无限循环<br>meta reflexion </p><h4 id="2019-3-6"><a href="#2019-3-6" class="headerlink" title="2019-3-6"></a>2019-3-6</h4><p>如果把当前的痛苦放到更长远的时间轴里，不过是茫茫痛苦里片刻。</p><h4 id="2019-4-7"><a href="#2019-4-7" class="headerlink" title="2019-4-7"></a>2019-4-7</h4><p>只是南方 </p><p>黏腻，潮湿，水泥砂浆，下水道，95#汽油味，雪茄味、鱼腥味散不开，一洼水<br>漆黑一片的江边，空气静止，易拉罐上的液化水珠，分不开两张淋湿的纸</p><p>你就是在这样的味道里 变成了别的东西</p><h4 id="2019-4-28"><a href="#2019-4-28" class="headerlink" title="2019-4-28"></a>2019-4-28</h4><p>Air在1998年发行的专辑《moon safari》是对21世纪的一种昭示。人类不再囿于土地，从天空升起，一次真正的太空奥德赛。大规模漂浮的地球人像一场沙尘暴，席卷太阳系，勇敢地凝视黑洞。光速接近主，成为伟大的造物。</p><p>而2001年在不断回到过去，人类却仍然无法集体走向太空。70亿人被囚禁在地球上，一个敞口的重力牢笼，所有降临在这片土地上的生命都回避不了面前的那颗巨石。</p><h4 id="2020-4-8"><a href="#2020-4-8" class="headerlink" title="2020-4-8"></a>2020-4-8</h4><p>禽兽森林充分暴露了人体堂的反动本质，毁了一代社会主义接班人，现实生活一泡污，还天天在岛上摇树抓蝴蝶砸石头。发现索尼才真是良心会社，同样价格的主机输出4K画面，支援HDR，性能强劲，等待PS5发布那一天，一切就会好起来。</p>]]></content>
    
    <summary type="html">
    
      有段时间大量阅读锤片的后遗症，在重新努力说人话。
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Thoughts" scheme="https://paranoiddemon.github.io/blog/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Breaking Out of the Prisoner&#39;s Dilemma</title>
    <link href="https://paranoiddemon.github.io/blog/posts/how-to-break-prison.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/how-to-break-prison.html</id>
    <published>2020-07-08T16:24:46.000Z</published>
    <updated>2020-07-10T13:46:05.626Z</updated>
    
    <content type="html"><![CDATA[<p>一、</p><p>月初，本科学校有人跳楼。昨天看到同学在群里发的链接，一个知乎问题。这种事情显然是不会出现在新闻报道上的。</p><p>这几天高考，想起我曾就读的高中也是省里著名的高考工厂，每年也有很多人跳楼。最接近事故现场的一次我在几十米外的地方吃饭，后来听人复述才知道我当时就在附近。现在时间久了我都开始怀疑这件事情是否真实发生过。</p><p>我高中班主任，一提起他，他那令人恶心的笑容就还会出现在我脑海里，就常常把学生自杀这件事情当做课堂上的谈资。我还记得他讲过的一次自杀事件。当时有个学生夜里从宿舍六楼跳下来没有当场毙命，又爬到前门去敲宿管的门，然后送去了医院。寻死不成又想活下去，在他眼里似乎很好笑，他那嘲弄又幸灾乐祸的语气令人不适。不知道这位同学是否还在这个糟糕的世界上，活着的话，现在也不知道如何了。</p><p>二、</p><p>在这样怪诞的地方和时代活着的正常人，多少都有些不正常。以前本科一位老师说，中国高校每年自杀人数教育部是有quota的。这样的事情似乎常常发生，甚至需要被制度化。</p><p>在开头的知乎问题，看到很多匿名答案讲述自己的经历，那种满溢的失败感，也常常从我心里涌起。在这样一种一元的价值体系里，失败的生活是不值得过的，是理所应当的想法。但没有尽头的内卷，只会把所有人抽干。如同囚徒困境里的囚犯，互相出卖的越多，得到的效用只会越低。我们就是在朝着那个更差的均衡无限跌落。成为不值一提的代价。</p><p>三、</p><p>其实囚徒困境是有两个纳什均衡的，我们只有携手走向另一个均衡方才有救。但我想这只是痴人说梦，我们还处于霍布斯的自然状态，更侈谈合作。连日的暴雨已经令我头脑发昏，丧失理智。或许在这不讲理的世道，不做囚徒才是唯一得救。</p>]]></content>
    
    <summary type="html">
    
      或许在这不讲理的世道，不做囚徒才是唯一得救。
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Thoughts" scheme="https://paranoiddemon.github.io/blog/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat、Servlet与HTTP协议</title>
    <link href="https://paranoiddemon.github.io/blog/posts/tomcat-servlet-http-protocol.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/tomcat-servlet-http-protocol.html</id>
    <published>2020-07-07T16:24:46.000Z</published>
    <updated>2020-07-09T16:26:37.015Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容：</p><ol><li>web相关概念</li><li>web服务器软件：Tomcat</li><li>Servlet</li><li>HTTP协议</li><li>Request</li><li>Response</li></ol><h2 id="web相关概念"><a href="#web相关概念" class="headerlink" title="web相关概念"></a>web相关概念</h2><ol><li>软件架构<br>C/S 客户端<br>B/S 浏览器</li><li>资源分类<br>静态资源：所有用户访问后得到的效果是一样的   如：html css js，可以直接被浏览器解析，客户端请求<br>动态资源: 每个用户访问相同资源后，得到的结果可能不一样。 动态资源先转换为静态资源，再返回（服务端响应）给浏览器解析 如servlet/jsp php asp</li><li>网络通信三要素<br>IP：计算机等网络设备在网络中的唯一标识<br>端口：应用程序的在计算机中的唯一标识 0-65536<br>协议：规定了数据通信的规则      如TCP/UDP</li></ol><h2 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h2><p>服务器：安装了服务器软件的计算机<br>服务器软件：接收用户的请求，处理请求，做出响应     如：mysql服务器，web服务器<br>web服务器软件：<br>    可以部署web项目，让用户通过浏览器来访问这些项目<br>    web容器，动态资源需要通过容器来使用</p><p>常用的java相关的web服务器软件<br>    WebLogic oracle公司 大型的JavaEE服务器 支持所有的JavaEE规范  收费<br>    WebSphere：IBM 收费<br>    JBOSS:JBOSS公司 收费<br>    Tomcat：Apache基金组织，中小型的JavaEE服务器，仅支持少量的JavaEE规范servlet/jsp，开源</p><p>注：JavaEE： Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.下载 官方网站</span><br><span class="line">2.安装 解压压缩包 安装的目录不要有中文和空格</span><br><span class="line">3.卸载 删除目录就行了</span><br><span class="line">4.启动bin&#x2F;startup.bat   localhost:8080 一般会把默认端口号改为80 http协议的默认端口号访问不用再输入端口号</span><br><span class="line">5.关闭 </span><br><span class="line">   强制关闭  关闭窗口</span><br><span class="line">   正常关闭  调用shutdown.bat&#x2F; ctrl c 推荐使用</span><br><span class="line"></span><br><span class="line">6.配置 </span><br><span class="line"></span><br><span class="line">部署项目的方式：</span><br><span class="line">1. 直接将项目放在webapps目录下 &#96;http:&#x2F;&#x2F;localhost&#x2F;hello&#x2F;hello.html&#96;</span><br><span class="line">&#x2F;hello 项目的访问路径，虚拟目录 一般会将项目打成war包放到webapps目录下，war包会自动解压缩</span><br><span class="line"></span><br><span class="line">2. 在conf&#x2F;server.xml配置</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hi&quot;&#x2F;&gt; docBase是资源所在路径，path是访问时的虚拟路径。server.xml是全局配置文件不建议直接配置</span><br><span class="line"></span><br><span class="line">3.conf\Catalina\localhost创建任意名称的xml，xml的文件名称即为虚拟目录</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>​        </p><p><img src="https://i.loli.net/2020/07/07/jNUxvsRF36Z1p8V.png" alt="Tomcat目录结构"></p><p>静态项目和动态项目<br>    目录结构：<br>        java动态项目的目录的结构：<br>            |–根目录<br>                |–WEB-INFO （动态项目）<br>                    |–web.xml        web项目的核心配置文件<br>                    |–classes目录 放置字节码文件<br>                    |–lib目录         放置依赖的jar包</p><p>将Tomcat集成到IDEA，创建JavaEE项目 run -&gt; edit configuration-&gt;tomcat<br>热部署 update resources</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>概念：server applet  运行在服务器上</p><p>动态资源通过逻辑性的Java代码（java类）来执行，依赖于服务器tomcat执行它<br>需要遵守一定的接口，才能被tomcat所识别</p><p>Servlet就是一个接口，定义了java类被浏览器访问到（tomcat识别到）的规则<br>自定义Servlet接口的实现类，重写方法。<br>浏览器访问相应的路径就会运行mapping的类中重写的方法</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>快速入门：<br>    1. 创建JavaEE项目<br>    2. 定义Servlet的实现类<br>    3. 重写所有方法<br>    4. 配置servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中配置  把实现了Servlet的类映射到一个虚拟路径，浏览器访问该路径就会去调用该类</span><br><span class="line"><span class="comment">&lt;!--    配置servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  <span class="comment">&lt;!--名称自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cc.landfill.web.servlet.ServletTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> <span class="comment">&lt;!-- 全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>   <span class="comment">&lt;!--虚拟路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在run configuration-&gt;deployment-&gt;application context，把虚拟目录修改为项目名称</p><h3 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h3><p>1.当服务器接收到客户端浏览器的请求后，会解析url路径，获取Servlet的资源路径<br>2.查找web.xml文件，是否有对应的url—pattern标签体内容<br>3.如果有则找到对应的<servlet-class>全类名<br>4.tomcat通过反射把字节码加载进入内存，并且创建Servlet对象<br>5.调用service()方法</p><p><img src="https://i.loli.net/2020/07/07/P4LFV2aZ1toGn6f.png" alt="servlet原理"></p><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>1.被创建    init() 执行一次方法<br>    默认情况下，第一次被访问时，Servlet被创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  标签中配置</span><br><span class="line"><span class="comment">&lt;!--        指定servlet的创建时机</span></span><br><span class="line"><span class="comment">            1.在第一次被访问时，创建   默认值为-1</span></span><br><span class="line"><span class="comment">            2.在服务器启动时，创建     0或正整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>5<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">Servlet 的init()执行一次，说明内存中只有一个Servlet对象，是单例的</span><br><span class="line">多个用户同时访问该对象时，存在线程安全问题，如果加锁会严重影响性能</span><br><span class="line">解决：尽可能不要定义成员变量，用局部变量。即使了定义了成员变量，也不要对其进行赋值，</span><br><span class="line">只去获取值。</span><br></pre></td></tr></table></figure><p>2.提供服务    service()  执行多次<br>    每次访问都会被调用<br>3.被销毁    service() 执行一次<br>    服务器正常关闭的时候执行，Servlet对象销毁，destroy()在被销毁之前执行，用于释放资源</p><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>Servlet3.0:<br>支持注解配置，不再需要web.xml</p><p>步骤：</p><ol><li>选择3.0以上版本，可以不创建web.xml文件</li><li>定义Servlet接口的实现类</li><li>重写方法</li><li>在类上使用webservlet注解配置 @WebServlet(“/test4”) Servlet资源路径</li></ol><p>IDEA与Tomcat部署</p><ol><li>IDEA会为每一个tomcat部署的项目单路建立一份配置文件</li><li>项目路径</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工作空间项目: C:\Users\demon\IdeaProjects\day13_tomcat</span><br><span class="line">tomcat部署的项目C:\Users\demon\IdeaProjects\out\artifacts\day13_tomcat_Web_exploded</span><br><span class="line">tomcat真正访问的是tomcat部署的web项目，对应工作空间项目的web目录下的所有资源</span><br></pre></td></tr></table></figure><ol start="3"><li>项目的web-info文件夹不能直接被浏览器访问，静态资源</li><li>断点调试。debug </li><li>不同项目需要设置不同的虚拟目录 application context 再下一层目录才是实际的资源的位置</li></ol><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>Servlet                                 接口<br>    |–GenericServlet      抽象类<br>        |–HttpServlet        抽象类：继承GenericServlet</p><p><strong>GenericServlet</strong><br>在GenericServlet类中把其他方法做了空实现，只剩下一个抽象方法void Service(),只要实现一个方法</p><p><strong>HttpServlet</strong><br>对http协议的封装，简化操作</p><ol><li>定义类继承<strong>HttpServlet</strong></li><li>重写doGet() 和doPost()   根据请求的方式</li></ol><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>urlpattern</p><ol><li>一个Servlet可以定义多个访问路径  <code>@WebServlet({&quot;/demo4-1&quot;,&quot;/demo4-2&quot;,&quot;/demo4-3&quot;})</code></li><li>路径定义规则：<br><code>/xxx</code><br><code>/xxx/xxx</code>   多层路径  目录结构 可以写成/xxx/*  可以使用通配符，通配符的优先级较低<br> <code>*.do</code>        配合demo4.do来配置 do是自定义的，可以任意</li></ol><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>概念：代表整个web应用，可以和程序的容器（Server）通信</p><p>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过从Servlet继承的方法获取</span></span><br><span class="line">ServletContext context1 = request.getServletContext();</span><br><span class="line"><span class="comment">//通过HttpServlet获取</span></span><br><span class="line">ServletContext context2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//获取的对象是指向同一个引用的 ==</span></span><br></pre></td></tr></table></figure><p>功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 获取MIME类型</span><br><span class="line">MIME类型：在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">格式：大类型/小类型 text/html image/jpeg</span><br><span class="line">响应的时候需要设置content-type</span><br><span class="line">获取：<span class="function">String <span class="title">getMimeType</span><span class="params">(String file)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 域对象 共享数据</span></span><br><span class="line"><span class="function">范围：所有用户所有请求的数据</span></span><br><span class="line"><span class="function">在一个 Servlet存数据</span></span><br><span class="line"><span class="function">  ServletContext context </span>= <span class="keyword">this</span>.getServletContext();</span><br><span class="line">      context.setAttribute(<span class="string">"msg"</span>,<span class="string">"hello"</span>);</span><br><span class="line">在另一个 Servlet读数据</span><br><span class="line">  ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">      Object msg = context.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line">      System.out.println(msg);</span><br><span class="line">因为ServletContext的生命周期很长，会一直驻留在内存，存的数据太多会占用内存，谨慎使用</span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>. 获取文件的真实（服务器）路径</span><br><span class="line">将项目部署在远程的服务器上，需要其在服务器中的真实路径</span><br><span class="line">        </span><br><span class="line"><span class="comment">//项目部署在服务器，访问的不是工作空间，而是项目路径</span></span><br><span class="line"><span class="comment">//默认是找在web目录下的？</span></span><br><span class="line">String realPath = context.getRealPath(<span class="string">"a.txt"</span>);</span><br><span class="line">System.out.println(realPath);  <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//web目录下</span></span><br><span class="line">String realPath1 = context.getRealPath(<span class="string">"/a.txt"</span>);</span><br><span class="line">System.out.println(realPath1); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//web的WEB-INF目录下</span></span><br><span class="line">String realPath2 = context.getRealPath(<span class="string">"/WEB-INF/a.txt"</span>);</span><br><span class="line">System.out.println(realPath2); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\WEB-INF\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//src目录下</span></span><br><span class="line">String realPath3 = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);</span><br><span class="line">System.out.println(realPath3); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\WEB-INF\classes\a.txt</span></span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>概念：Hyper Text transfer Protocol    定义了客户端和服务器端通信时，传输的数据的格式  </p><p>请求消息/相应消息<br>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号为80</li><li>基于请求响应模型：一次请求对应一次相应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><p>版本：</p><p>ver1.0 每次请求响应都会建立新的连接</p><p>ver1.1 复用连接</p><h3 id="Request-Response工作原理"><a href="#Request-Response工作原理" class="headerlink" title="Request/Response工作原理"></a>Request/Response工作原理</h3><ol><li>tomcatt服务器会根据url中的资源路径，创建ServletDemo1的对象（Sevelet实现类的对象）</li><li>tomcat创建request和response对象，request对象封装了请求消息数据</li><li>把两个对象作为参数传给ServletDemo1实例的Service()</li><li>通过request对象来获取请求消息数据，通过response对象来设置响应消息数据</li><li>服务器在响应浏览器之前，会从封装了响应消息的Response对象中获取响应消息数据，再返回给浏览器</li></ol><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><h4 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1. 请求行</span><br><span class="line">请求方式 请求url 协议&#x2F;版本</span><br><span class="line">GET&#x2F;login.html HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">请求方式：有7种，常用的有两种</span><br><span class="line">GET: </span><br><span class="line">请求参数在请求行中，直接跟在url后面</span><br><span class="line">请求的url长度有限制</span><br><span class="line">不安全</span><br><span class="line"></span><br><span class="line">POST：</span><br><span class="line">请求参数在请求体中</span><br><span class="line">没有url长度限制</span><br><span class="line">更安全</span><br><span class="line"></span><br><span class="line">2. 请求头</span><br><span class="line">请求头名称：请求头值   以键值对的方式出现</span><br><span class="line"></span><br><span class="line">常见请求头：</span><br><span class="line">Host</span><br><span class="line">User-Agent：浏览器告诉服务器，访问使用的浏览器及其版本，可以解决浏览器的兼容问题（因为浏览器的解析引擎不同），服务器根据</span><br><span class="line">Accept：接收响应的形式</span><br><span class="line">Referer：告诉服务器请求从哪里来</span><br><span class="line">作用：</span><br><span class="line">防盗链</span><br><span class="line">统计：判断流量的来源</span><br><span class="line">Connection； keep-alive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7,zh-HK;q&#x3D;0.6</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 11</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Cookie: Idea-41d450f1&#x3D;229dd7a7-ea44-4bf7-8c79-ca88718e85a4; JSESSIONID&#x3D;7E11EE42B5820055DDF4EA1FA317A334</span><br><span class="line">Host: localhost</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.116 Safari&#x2F;537.36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 请求空行</span><br><span class="line">空行  用于分隔 POST的请求头和请求体</span><br><span class="line">4. 请求体</span><br><span class="line">正文  封装POST请求信息的请求参数，GET方式就没有请求体</span><br><span class="line">字符串格式  username&#x3D;jack</span><br></pre></td></tr></table></figure><ol start="5"><li><h4 id="Request的继承关系"><a href="#Request的继承关系" class="headerlink" title="Request的继承关系"></a>Request的继承关系</h4></li></ol><p>ServletRequest 接口<br>        |–HttpServletRequest 接口 继承<br>                    |–org.apache.catalina.connector.RequestFacade  Tomcat写的实现类</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol><li><h5 id="获取请求消息数据："><a href="#获取请求消息数据：" class="headerlink" title="获取请求消息数据："></a>获取请求消息数据：</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">获取请求行  GET  &#x2F;day14&#x2F;demo1?name&#x3D;jack HTTP&#x2F;1.1</span><br><span class="line">方法：</span><br><span class="line">String getMethod()   GET </span><br><span class="line">    String getContextPath()  &#x2F;day14  (*)重点掌握</span><br><span class="line">String getServletPath() &#x2F;demo1</span><br><span class="line">String getQueryString  name&#x3D;jack</span><br><span class="line">String getRequestURI()  &#x2F;day14&#x2F;demo1   (*)</span><br><span class="line">StringBuffer getRequestURL()  http:&#x2F;&#x2F;localhost&#x2F;day14&#x2F;demo1</span><br><span class="line">String getProtocol HTTP&#x2F;1.1</span><br><span class="line">String getRemoteAddr()  获取客户机的ip地址</span><br><span class="line"></span><br><span class="line">URL:统一资源定位符  是URL的子集</span><br><span class="line">URI:统一资源标识符  </span><br><span class="line"></span><br><span class="line">获取请求头</span><br><span class="line">String getHeader(String name) 通过请求头的名称获取请求头的值  键值对(*)</span><br><span class="line">Enumeration&lt;String&gt; getHeaderNames() 获取所有请求头名称 </span><br><span class="line"></span><br><span class="line">获取请求体</span><br><span class="line">只有POST方式才有，封装了请求参数</span><br><span class="line">步骤：</span><br><span class="line">1.获取流对象</span><br><span class="line">BufferedRead getReader() 字符流</span><br><span class="line">ServletInputStream get InputStream() 字节流  在文件上传时在讲</span><br><span class="line">2.再从流对象中获取数据</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">获取请求参数通用方式  兼容GET和POST</span><br><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span> 根据参数名称返回参数值  如<span class="title">getParameter</span><span class="params">(<span class="string">"name"</span>)</span> </span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span>  返回参数名的多个value，返回数组</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> 获取所有参数名称</span></span><br><span class="line"><span class="function">Map&lt;String,String[]&gt; <span class="title">getParameterMap</span><span class="params">()</span> 获取所有参数的Map集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">TOMCAT8 在GET模式下已经将中文乱码问题解决</span></span><br><span class="line"><span class="function">POST模式 在获取参数前，设置请求request的变暗 request.<span class="title">setCharacterEncoding</span><span class="params">(<span class="string">"utf-8"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">请求转发:一种在服务器内部进行资源跳转的方式 </span></span><br><span class="line"><span class="function">步骤：</span></span><br><span class="line"><span class="function">1.通过request对象获取请求转发器对象RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">2.使用RequestDispatcherd对象进行转发 forward（ServletRequest request,ServletResponseresponse) </span></span><br><span class="line"><span class="function">    特点：</span></span><br><span class="line"><span class="function">    1.浏览器地址栏不会发生变化</span></span><br><span class="line"><span class="function">    2.服务器内部的资源的转发，转发的路径不能是外部的资源</span></span><br><span class="line"><span class="function">    3.转发是一次请求</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">共享数据</span></span><br><span class="line"><span class="function">    域对象：一个有作用范围的对象，在范围内共享数据</span></span><br><span class="line"><span class="function">    request域：代表一次请求的范围，用于请求转发的多个资源中共享数据</span></span><br><span class="line"><span class="function">    方法：</span></span><br><span class="line"><span class="function">    <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span> 在第一个servlet里设置值</span></span><br><span class="line"><span class="function">    Object <span class="title">getAttribute</span><span class="params">(name)</span>  在得到转发的servlet中去接收值</span></span><br><span class="line"><span class="function">    <span class="title">removeAttribute</span><span class="params">(name)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">获取SevrletContext</span></span><br><span class="line"><span class="function">    ServletContext <span class="title">getServletContext</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><p>用户登录案例需求：<br>    1.编写login.html登录页面<br>        username &amp; password 两个输入框<br>    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表<br>    3.使用JdbcTemplate技术封装JDBC<br>    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您<br>    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误<br>步骤：</p><ol><li><p>创建项目，导入html页面，数据库配置文件，jar包</p></li><li><p>获取数据库连接</p></li><li><p>创建Javabean，封装user信息</p></li><li><p>创建UserDAO 操作user表的类，写增删改查方法</p></li><li><p>写login suc fail Servlet，进行请求转发</p></li><li><p>BeanUtils工具类<br>JavaBean标准<br>类用public修饰<br>提供空参的构造器<br>成员变量必须使用private修饰<br>提供public的getter和setter</p><p>setProperty() getProperty()  populate(Object obj,Map map)封装</p></li></ol><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">响应行</span><br><span class="line">组成：协议&#x2F;版本  响应状态码 状态码描述  HTTP&#x2F;1.1 200 OK</span><br><span class="line"></span><br><span class="line">响应状态码：服务器告诉浏览器本次请求和响应的状态，都是3位数，分为5类</span><br><span class="line">分类：</span><br><span class="line">1xx  服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx，询问是否还有请求</span><br><span class="line">2xx  成功。200</span><br><span class="line">3xx  重定向。302（重定向），资源跳转的方式； 304（访问缓存）</span><br><span class="line">4xx  客户端错误  404请求路径没有对应的资源 405（请求没有对应的doXxx方法，和请求方式不一致）</span><br><span class="line">5xx 服务器错误 500（服务器内部错误）</span><br><span class="line">响应头</span><br><span class="line">格式 头名称：值</span><br><span class="line">常见响应头</span><br><span class="line">Content-Type:type&#x2F;html;charset&#x3D;UTF-8</span><br><span class="line">Content-disposition 服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">默认值：in-line 在当前页面打开</span><br><span class="line">atttachment；filename&#x3D;xxx 以附件形式打开响应体。用于文件下载</span><br><span class="line">响应空行</span><br><span class="line">响应体</span><br><span class="line">真实的传输的数据 html页面 ，图片等资源</span><br></pre></td></tr></table></figure><h4 id="功能：设置响应消息"><a href="#功能：设置响应消息" class="headerlink" title="功能：设置响应消息"></a>功能：设置响应消息</h4><ol><li>设置响应行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">设置状态码：setStatus(int sc)</span><br></pre></td></tr></table></figure><ol start="2"><li>设置响应头</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setHeader(String name,String value)</span><br></pre></td></tr></table></figure><ol start="3"><li>设置响应体</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤</span><br><span class="line">(1)获取输出流</span><br><span class="line">字符流PrintWriter getWriter()</span><br><span class="line">字节流 ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line">(2)使用输出流将数据输出到客户端浏览器</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">(1)实现：</span><br><span class="line">&#x2F;* &#x2F;&#x2F;方式一：访问&#x2F;reresponseDemo1 会自动跳转到responseDemo2</span><br><span class="line">&#x2F;&#x2F;1.设置响应行的状态码为302</span><br><span class="line">response.setStatus(302);</span><br><span class="line">&#x2F;&#x2F;2.设置响应头location</span><br><span class="line">response.setHeader(&quot;location&quot;,&quot;&#x2F;day15&#x2F;responseDemo2&quot;);  &#x2F;&#x2F;虚拟路径+资源路径*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式二：</span><br><span class="line">response.sendRedirect(&quot;&#x2F;day15&#x2F;responseDemo2&quot;); &#x2F;&#x2F;可以是任意的url</span><br><span class="line"></span><br><span class="line">(2)特点：转发vs重定向</span><br><span class="line">转发：forward</span><br><span class="line">1.转发地址栏路径不变</span><br><span class="line">2.只能访问当前服务器路径下的资源</span><br><span class="line">3.转发是一次请求，可以使用request对象共享数据</span><br><span class="line"></span><br><span class="line">重定向：redirect</span><br><span class="line">1.地址栏发生变化</span><br><span class="line">2.可以访问其他服务器的资源</span><br><span class="line">3.重定向是两次请求，不再能使用request对象共享数据，两次req&#x2F;resp是不同的</span><br><span class="line"></span><br><span class="line">(3)路径写法</span><br><span class="line">1.相对路径：以.开头 .&#x2F;index.html</span><br><span class="line">确定当前资源和目标资源之间的位置关系</span><br><span class="line">例1 .&#x2F; 当前目录</span><br><span class="line">当前：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;location.html</span><br><span class="line">目标：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">路径为 .&#x2F;responseDemo1  可以省略为responseDemo1</span><br><span class="line">例2 ..&#x2F; 后退一级目录</span><br><span class="line">当前：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;htmls&#x2F;location.html</span><br><span class="line">目标：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">路径为 ..&#x2F;responseDemo1</span><br><span class="line"></span><br><span class="line">2.绝对路径： 以&#x2F;开头</span><br><span class="line">通过绝对路径可以确定唯一资源 如http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">可以省略协议，ip，端口&#x2F;day15&#x2F;responseDemo1</span><br><span class="line"></span><br><span class="line">3.使用规则：根据使用的对象决定是否加虚拟目录</span><br><span class="line">给客户端浏览器使用：需要加虚拟目录，如重定向，&lt;a&gt; &lt;form&gt;</span><br><span class="line">response.sendRedirect(&quot;&#x2F;day15&#x2F;responseDemo2&quot;);</span><br><span class="line">给服务器使用：不需要加虚拟目录，如转发时,就不要写虚拟目录</span><br><span class="line">request.getRequestDispatcher(&quot;&#x2F;xxxServlet&quot;).forward(request,response);</span><br><span class="line"></span><br><span class="line">4.动态获取虚拟目录</span><br><span class="line">String request.getContextPath()</span><br><span class="line">response.sendRedirect(contextPath+&quot;资源名称&quot;),更改虚拟目录不需要大量调整代码</span><br><span class="line">客户端的虚拟目录也可以动态获取：jsp</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*设置编码格式 防止乱码问题</span><br><span class="line">方式一：</span><br><span class="line">&#x2F;&#x2F;在获取流之前，设置流的默认编码（ISO-8859-1）为需要的编码格式</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">&#x2F;&#x2F;告诉浏览器，服务器发送的消息编码格式，建议浏览器使用该编码解码</span><br><span class="line">response.setHeader(&quot;content-type&quot;,&quot;text&#x2F;html;charset&#x3D;utf-8&quot; );  &#x2F;&#x2F;text是html的根本的格式*&#x2F;</span><br><span class="line">&#x2F;&#x2F;方式二</span><br><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.获取字符输出流</span><br><span class="line">PrintWriter pw &#x3D; response.getWriter();  &#x2F;&#x2F;不需要关流，response一次响应结束后自动回销毁，自己做了关闭流的操作</span><br><span class="line">&#x2F;&#x2F;2.输出数据</span><br><span class="line">&#x2F;&#x2F; pw.write(&quot;hello response&quot;);</span><br><span class="line">&#x2F;&#x2F; pw.write(&quot;&lt;h1&gt;hello response&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">pw.write(&quot;你好啊 响应&quot;);</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">&#x2F;&#x2F;1.获取字节输出流</span><br><span class="line">ServletOutputStream sos &#x3D; response.getOutputStream();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.输出数据</span><br><span class="line">sos.write(&quot;hello 你好&quot;.getBytes(&quot;utf-8&quot;));  &#x2F;&#x2F;Chrome默认的字符集是随系统的GBK</span><br></pre></td></tr></table></figure><ol start="4"><li><h5 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">本质是图片 防止恶意的表单注册</span><br><span class="line"></span><br><span class="line">Servlet代码</span><br><span class="line">int width &#x3D; 100;</span><br><span class="line">        int height &#x3D; 50;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.创建一个对象，验证码图片的对象</span><br><span class="line">        BufferedImage image &#x3D; new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        &#x2F;&#x2F;2.生成验证码图片</span><br><span class="line">        &#x2F;&#x2F;2.1 填充背景色</span><br><span class="line">        Graphics graphics &#x3D; image.getGraphics(); &#x2F;&#x2F;画笔对象</span><br><span class="line">        graphics.setColor(Color.pink);  &#x2F;&#x2F;设置颜色</span><br><span class="line">        graphics.fillRect(0,0,width,height);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.2 画边框</span><br><span class="line">        graphics.setColor(Color.BLUE);</span><br><span class="line">        graphics.drawRect(0,0,width-1,height-1);   &#x2F;&#x2F;0,0是左上角的坐标,边框有一个px</span><br><span class="line">        String str &#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.3 写验证码</span><br><span class="line">        for (int i &#x3D; 1; i &lt;5 ; i++) &#123;</span><br><span class="line">            int index &#x3D; random.nextInt(str.length());  &#x2F;&#x2F;随机角标</span><br><span class="line">            char ch &#x3D; str.charAt(index);</span><br><span class="line">            graphics.drawString(ch+&quot;&quot;,width&#x2F;5*i,height&#x2F;2);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.4 画干扰线</span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        for (int i &#x3D; 0; i &lt;5 ; i++) &#123;</span><br><span class="line">            int x1 &#x3D; random.nextInt(width);</span><br><span class="line">            int x2 &#x3D; random.nextInt(width);</span><br><span class="line">            int y1 &#x3D; random.nextInt(height);</span><br><span class="line">            int y2 &#x3D; random.nextInt(width);</span><br><span class="line">            graphics.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;3.输出到页面</span><br><span class="line">        ImageIO.write(image,&quot;jpg&quot;,response.getOutputStream());</span><br><span class="line">        &#x2F;&#x2F;从内存中输出的图片，那这里还有response吗？</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">HTML页面 </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img id&#x3D;&quot;checkCode&quot; src&#x3D;&quot;&#x2F;day15&#x2F;checkCodeServlet&quot;&#x2F;&gt;</span><br><span class="line">    &lt;a id&#x3D;&quot;change&quot; href&#x3D;&quot;&quot;&gt;看不清，换一张&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       &#x2F;* 1.给超链接和图片绑定单击事件</span><br><span class="line">        2.重新设置图片的src属性*&#x2F;</span><br><span class="line">        window.onload &#x3D; function()&#123;</span><br><span class="line">           var img &#x3D; document.getElementById(&quot;checkCode&quot;);</span><br><span class="line">           img.onclick &#x3D; function()&#123;</span><br><span class="line">               &#x2F;&#x2F;加时间戳,解决缓存问题，每次都传一个不重复的参数</span><br><span class="line">               var date &#x3D; new Date().getTime();</span><br><span class="line">               img.src&#x3D;&quot;&#x2F;day15&#x2F;checkCodeServlet?&quot;+date;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><p>需求：</p><ol><li>页面显示超链接</li><li>点击超链接弹出下载提示框</li><li>完成图片文件下载</li></ol><p>超链接指向的资源，如果可以被浏览器解析，则直接展示，不能解析则下载。使用响应头的content-dispostion:attachment;filename=xxx</p><p>步骤：</p><ol><li><p>定义页面，超链接指向一个servlet，传递资源的名称filename</p></li><li><p>定义servlet，获取filename，使用字节输入流加载文件进内存</p></li><li><p>设置响应头 content-dispostion:attachment;filename=xxx</p></li><li><p>将数据写出到response输出流</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">HTML页面</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#x2F;day15&#x2F;downloadServlet?filename&#x3D;img1.jpg&quot;&gt;image1&lt;&#x2F;a&gt;  加虚拟路径图片格式</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;downloadServlet&quot;)</span><br><span class="line">public class DownloadServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String filename &#x3D; request.getParameter(&quot;filename&quot;);</span><br><span class="line">        ServletContext servletContext &#x3D; this.getServletContext();</span><br><span class="line">        &#x2F;&#x2F;获取内容类型，设置返回内容类型</span><br><span class="line">        String mimeType &#x3D; servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(&quot;content-type&quot;,mimeType);</span><br><span class="line">        &#x2F;&#x2F;获取真实路径</span><br><span class="line">        String realPath &#x3D; servletContext.getRealPath(&quot;img&quot;+filename);  &#x2F;&#x2F;这里不要加&#x2F;web &#x2F;指的就是web，WEB-INF特殊</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(new File(realPath)); &#x2F;&#x2F;不要加引号</span><br><span class="line">        response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename&#x3D;&quot;+filename);</span><br><span class="line">        ServletOutputStream os &#x3D; response.getOutputStream();</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024*8];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len&#x3D;fis.read(buffer))!&#x3D;-1)&#123;</span><br><span class="line">           os.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下载文件名中文乱码</p><p>获取客户端的浏览器版本信息</p><p>根据不同版本信息，去设置编码方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;解决中文文件名问题：在设置响应头之前设置编码方式</span><br><span class="line">        &#x2F;&#x2F;获取请求头的ua</span><br><span class="line">        String agent &#x3D; request.getHeader(&quot;user-agent&quot;);</span><br><span class="line">        &#x2F;&#x2F;使用工具类方法编码文件名</span><br><span class="line">        filename &#x3D; DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">         response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename&#x3D;&quot;+filename);</span><br></pre></td></tr></table></figure><p>可以实现局域网内文件传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.把需要传输的文件放入img文件夹</span><br><span class="line">2.在download.html 修改filename</span><br><span class="line">3.启动服务器</span><br><span class="line">4.从手机端，或者另一台电脑访问192.168.2.116&#x2F;day15&#x2F;download.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Tomcat部署、Servlet原理，HTTP协议的请求响应
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
      <category term="Web" scheme="https://paranoiddemon.github.io/blog/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Aria2+Bilibili Evolved批量下载B站视频</title>
    <link href="https://paranoiddemon.github.io/blog/posts/aria2-bilibili.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/aria2-bilibili.html</id>
    <published>2020-07-06T16:24:46.000Z</published>
    <updated>2020-07-08T12:45:08.416Z</updated>
    
    <content type="html"><![CDATA[<p>1、下载文件</p><p><a href="https://github.com/aria2/aria2/releases/tag/release-1.35.0" target="_blank" rel="noopener">aira2 release</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改路径 aria2-1.34.0-win-64bit-build1&#96; -&gt; &#96;bin</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ttttmr/aria2-conf" target="_blank" rel="noopener">aira2配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ttttmr&#x2F;aria2-conf.git</span><br><span class="line"></span><br><span class="line">修改路径aria2-conf-master&#96; -&gt; &#96;conf</span><br></pre></td></tr></table></figure><p>2、配置环境变量</p><p>右键此电脑 -&gt;高级系统设置 -&gt; 环境变量 -&gt;系统变量-&gt;新建Path </p><p>把aria2c.exe所在的bin目录填进去<code>D:\portable_program\aria2\bin</code></p><p>3、配置必要信息 conf/aria2.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#设置密码</span><br><span class="line">18 rpc-secret &#x3D; xxxxxx</span><br><span class="line">...</span><br><span class="line">89 dir &#x3D; D:\Download</span><br><span class="line">#填默认下载目录</span><br></pre></td></tr></table></figure><p>4、启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果要自启动 把HideRun.vbs的快捷方式发送到</span><br><span class="line">startup  %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup</span><br><span class="line"></span><br><span class="line">启动双击 start.bat ，后台运行双击 HideRun.vbs ，关闭双击 stop.bat ，重启双击 restart.bat</span><br></pre></td></tr></table></figure><p>5、配置webui-aria2 </p><p><a href="http://webui-aria2.ghostry.cn" target="_blank" rel="noopener">webui-aria2</a>是aira2的GUI。填入刚才conf设置的秘钥</p><img src="https://i.loli.net/2020/07/08/sOyTv1ZR75MLYif.png" alt="webui-aria2配置" style="zoom:67%;" /><p>6、安装TemperMonkey脚本 BilibiliEvolved</p><p>7、附加功能-&gt;下载视频-&gt;批量导出-&gt;aria2 RPC ，配置同上。开始下载就可以了。</p><p>8、按需要可以配合Chrome插件接管浏览器的下载。</p><p>参考：<a href="https://tmr.js.org/p/1aa3893d/" target="_blank" rel="noopener">aria2 简单使用</a></p>]]></content>
    
    <summary type="html">
    
      批量下载B站视频
    
    </summary>
    
    
      <category term="其他" scheme="https://paranoiddemon.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Aria2" scheme="https://paranoiddemon.github.io/blog/tags/Aria2/"/>
    
  </entry>
  
  <entry>
    <title>如何确立一种深信不疑</title>
    <link href="https://paranoiddemon.github.io/blog/posts/how-to-believe.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/how-to-believe.html</id>
    <published>2020-06-30T16:24:46.000Z</published>
    <updated>2020-07-10T00:06:22.276Z</updated>
    
    <content type="html"><![CDATA[<p>一、<br>Fortran语言之父John Backus 在获得图灵奖的时候讲了这么一段话，描述冯诺依曼瓶颈</p><blockquote><p>Surely there must be a less primitive way of making big changes in the store than by pushing vast numbers of words back and forth through the von Neumann bottleneck. Not only is this tube a literal bottleneck for the data traffic of a problem, but, more importantly, it is an intellectual bottleneck that has kept us tied to word-at-a-time thinking instead of encouraging us to think in terms of the larger conceptual units of the task at hand. Thus programming is basically planning and detailing the enormous traffic of words through the von Neumann bottleneck, and much of that traffic concerns not significant data itself, but where to find it.</p></blockquote><p>“intellectual bottleneck “这个词精确而微妙。genetic bottleneck，intellectual bottleneck，谁在束缚你？</p><p>二、</p><p>最近在知乎读到一个问题：<a href="https://www.zhihu.com/question/264893261/answer/286954136" target="_blank" rel="noopener">为什么矩形面积等于长乘宽?</a> 那么多显而易见的问题，并不是那么得显而易见。</p><p>回答里甚至有人说，这是小学生都懂的东西。从某种程度上来说，我们都可以算是他口中的小学生。对于某些问题不应该去深究，这是做正常人的要义。这是我们一直受到的教育，「服从」是我们教育里很糟糕的一点，渗透在社会的每一个角落，讨厌至极。</p><p>三、</p><p>我发现，当进入一种生活模式后，人就会陷入一种时间的惯性，生活坍缩进一个没有维度的空间，很难去怀疑那些如真理的日常的正当性。很多人对生活道路的深信不疑就来自于这样一种未经考量的惯性。</p><p>现在才渐渐意识到用一些时间去审视过去是有帮助的。没有白走的路，也没有不付出代价的选择。至少还不算太晚明白。用行动去实践意义，而不是空想。</p><p>四、</p><p>Why not thinking in terms of the bigger picture?</p>]]></content>
    
    <summary type="html">
    
      Why not thinking in terms of the bigger picture?
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Thoughts" scheme="https://paranoiddemon.github.io/blog/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Java-IO流</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-io-stream.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-io-stream.html</id>
    <published>2020-06-29T12:24:46.000Z</published>
    <updated>2020-07-06T00:52:28.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/30/PDpnxHKwYrtWINu.png" alt="IO流体系"></p><h1 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、File类的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.File类的对象代表一个文件或者一个文件目录</span></span><br><span class="line"><span class="comment">2.声明在java.io包下</span></span><br><span class="line"><span class="comment">3.涉及文件或者文件目录的创建、删除、重命名、修改时间、文件大小等方法</span></span><br><span class="line"><span class="comment">并未涉及到写入或者读取文件目录，要实现该功能就需要IO流来完成</span></span><br><span class="line"><span class="comment">4.file类的对象常作为参数传到流的构造器中，作为流的写入或者读写的终点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、如何创建File实例</span></span><br><span class="line"><span class="comment">三个构造器都有可能使用：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">相对路径：相较于某个路径下，指明的路径</span></span><br><span class="line"><span class="comment">绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意</span></span><br><span class="line"><span class="comment">在windows和dos 路径分隔符使用“\”表示 转义要写两个</span></span><br><span class="line"><span class="comment">unix和url使用“/”表示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、常用方法</span></span><br><span class="line"><span class="comment"> public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment"> public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment"> public String getName() ：获取名称</span></span><br><span class="line"><span class="comment"> public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment"> public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment"> public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment"> public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">  public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">  public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">  public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">  public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">  public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">  public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">  public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目 路径下。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">File类的删除功能</span></span><br><span class="line"><span class="comment"> public boolean delete()：删除文件或者文件夹 删除注意事项：</span></span><br><span class="line"><span class="comment">Java中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器1：直接写路径</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);  <span class="comment">//相对于当前Module所在的文件路径</span></span><br><span class="line">        File file2  = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior\\day09\\hello.txt"</span>); <span class="comment">//两个\是为了转译</span></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);  <span class="comment">//现在还只是内存层面的一个对象，未涉及到删改，所以没有文件也不会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2: 上一级路径 + 当前的文件目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior\\day09"</span>,<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3：对象名+文件名 File对象可以是文件目录</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3, <span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File (<span class="string">"d:\\io\\hi.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">// public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">// public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">// public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">// public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">// public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line">        System.out.println(file1.getPath());  <span class="comment">//hello.txt</span></span><br><span class="line">        System.out.println(file1.getAbsolutePath());  <span class="comment">//D:\IDEA_workspace\JavaSenior\day09\hello.txt</span></span><br><span class="line">        System.out.println(file1.getName());   <span class="comment">//hello.txt</span></span><br><span class="line">        System.out.println(file1.getParent());  <span class="comment">//null  此时文件还不存在</span></span><br><span class="line">        System.out.println(file1.length());    <span class="comment">//0  --&gt; 11</span></span><br><span class="line">        System.out.println(file1.lastModified());   <span class="comment">//0  --&gt;  1593391633017  毫秒数</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(file1.lastModified());</span><br><span class="line">        System.out.println(date);    <span class="comment">//Mon Jun 29 08:47:13 CST 2020</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getPath());  <span class="comment">//d:\io\hi.txt</span></span><br><span class="line">        System.out.println(file2.getAbsolutePath());  <span class="comment">//d:\io\hi.txt</span></span><br><span class="line">        System.out.println(file2.getName());   <span class="comment">//hi.txt</span></span><br><span class="line">        System.out.println(file2.getParent());  <span class="comment">//d:\io</span></span><br><span class="line">        System.out.println(file2.length());    <span class="comment">//0</span></span><br><span class="line">        System.out.println(file2.lastModified());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//适用于文件目录</span></span><br><span class="line"><span class="comment">// public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">// public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior"</span>); <span class="comment">//打印该目录所有文件和目录，要求目录必须存在</span></span><br><span class="line">        String[] list = file3.list();</span><br><span class="line">        <span class="keyword">for</span>(String t: list)&#123;</span><br><span class="line">            System.out.println(t);     <span class="comment">//只列出名字</span></span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = file3.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f:files)&#123;</span><br><span class="line">            System.out.println(f);   <span class="comment">//D:\IDEA_workspace\JavaSenior\day01,以绝对路径的方式输出的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">// file1 renameTo(file2)，要返回true，需要file1在硬盘中是存在的，file2不存在，不能进行覆盖操作，而且一旦true，file1在硬盘中不再存在；</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);    <span class="comment">//首先要file要存在</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\hi.txt"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file2.renameTo(file1);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io"</span>);</span><br><span class="line"><span class="comment">// public boolean isDirectory()：判断是不是文件目录</span></span><br><span class="line"><span class="comment">// public boolean isFile() ：判断是不是文件</span></span><br><span class="line"><span class="comment">// public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">// public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">// public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">// public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());<span class="comment">//一般先判断是否存在</span></span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hi.txt"</span>);</span><br><span class="line"><span class="comment">//public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">//public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">//public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public boolean delete()：删除文件或者文件夹 删除注意事项：</span></span><br><span class="line"><span class="comment">// Java中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件的创建</span></span><br><span class="line">        <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io3"</span>);  <span class="comment">//目录存在，上层目录不存在。就都不创建</span></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file.mkdir();</span><br><span class="line">        <span class="keyword">if</span> (mkdir == <span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io4"</span>);  <span class="comment">//如果上层目录不存在，就可以一并创建</span></span><br><span class="line">            <span class="keyword">boolean</span> mkdirs = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span> (mkdirs == <span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建失败1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、节点流"><a href="#二、节点流" class="headerlink" title="二、节点流"></a>二、节点流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IO流</span></span><br><span class="line"><span class="comment">1.概念</span></span><br><span class="line"><span class="comment">数据的输入输出的方式以流stream的方式进行</span></span><br><span class="line"><span class="comment">Java中定义了各种stream类，可以获取不同的种类并通过标准的方式输入输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.分类：</span></span><br><span class="line"><span class="comment">按照数据单位不同</span></span><br><span class="line"><span class="comment">字节流 8bit 图片 视频</span></span><br><span class="line"><span class="comment">字符流 16bit 文本  char 2byte</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">流向不同</span></span><br><span class="line"><span class="comment">输入流</span></span><br><span class="line"><span class="comment">输出流</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">按角色不同</span></span><br><span class="line"><span class="comment">节点流：直接作用于文件上的</span></span><br><span class="line"><span class="comment">处理流：在已有的流的基础上在加一层  比如：加快流的传输速度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.体系结构</span></span><br><span class="line"><span class="comment">抽象基类</span></span><br><span class="line"><span class="comment">字节流：InputStream OutputStream</span></span><br><span class="line"><span class="comment">字符流：Reader Writer</span></span><br><span class="line"><span class="comment">涉及40多个流都是基于以上四个抽象基类</span></span><br><span class="line"><span class="comment">                    字节流                 字节流           字符流           字符流</span></span><br><span class="line"><span class="comment">抽象基类：       InputStream          OutputStream          Reader           Writer</span></span><br><span class="line"><span class="comment">节点流（文件流）: FileInputStream      FileOutputStream      FileReader      FileWriter</span></span><br><span class="line"><span class="comment">缓冲流（处理流）：BufferedInputStream  BufferedOutputStream  BufferedReader  BufferedWriter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将文件读到程序，并输出到控制台</span></span><br><span class="line"><span class="comment">    1.reader()方法</span></span><br><span class="line"><span class="comment">    2.异常的处理，为了保证流资源一定可以关闭，要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3读入的文件一定要存在，否则会报FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>  </span>&#123;   <span class="comment">//在单元测试的相对路径是相较于当前module的，main方法默认是在Project文件夹下</span></span><br><span class="line">        <span class="comment">//1.先实例化File对象 指明要操作的文件</span></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//返回读入的一个字符，如果到达文件末尾，返回-1</span></span><br><span class="line"><span class="comment">//        int data = fr.read();    //以int存的char相当于是ASCII码</span></span><br><span class="line"><span class="comment">//        while (data!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);   //读入的是int，然后在转为char</span></span><br><span class="line"><span class="comment">//            data = fr.read();                  //每次只读一个，不是-1就输出</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//语法上的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr!=<span class="keyword">null</span>)   <span class="comment">//可能在实例化之前就出现异常，因此就要判断是不是为null，再执行finally内部的语句</span></span><br><span class="line">                fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.流的关闭操作,涉及物理上的连接，JVM不能自动垃圾回收，需要手动关闭， 不然可能会导致内存泄漏</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//对read()操作升级，使用read的重载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.File类实例化</span></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuffer= <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];    <span class="comment">//其实是用同一个数组反复去装剩下的元素</span></span><br><span class="line">            <span class="keyword">int</span> len;     <span class="comment">//读进去的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len=fr.read(cbuffer))!=-<span class="number">1</span>) &#123;    <span class="comment">//int read(char[])返回值是每次读入的字符的个数,到文件末尾返回-1</span></span><br><span class="line">                <span class="comment">//方法一：遍历char[]</span></span><br><span class="line"><span class="comment">//                for (int i = 0; i &lt;len ; i++) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuffer[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//错误写法：还是会把char[]里的没有被覆盖部分输出</span></span><br><span class="line"><span class="comment">//                String str  = new String(cbuffer);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuffer,<span class="number">0</span>,len);   <span class="comment">//string里的方法，把char[]的一部分转为String</span></span><br><span class="line">                System.out.print(str); <span class="comment">//不要用换行打印</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fr!=<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/*写出文件</span></span><br><span class="line"><span class="comment">    1.输出操作:如果File不存在，就会自动创建此文件</span></span><br><span class="line"><span class="comment">    2.File对应的文件已经存在了</span></span><br><span class="line"><span class="comment">        构造器：FileWriter(file,false) /FileWriter(file) ,覆盖源文件</span></span><br><span class="line"><span class="comment">               FileWriter(file,true)  不会覆盖源文件，而是在源文件append</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.提供File类的对象，指明写出的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.提供FileWriter的对象，用于数据写出</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.写出的操作</span></span><br><span class="line">        fw.write(<span class="string">"i have a dream\n"</span>);  <span class="comment">//覆盖文件</span></span><br><span class="line">        fw.write(<span class="string">"i have an apple"</span>);</span><br><span class="line">        <span class="comment">//4.关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用字符流复制文本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf  = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    fw.write(cbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用字节流复制图片</span></span><br><span class="line">    <span class="comment">/*使用字节流，且以数组来读取，也可以复制文档中的英文和数字，但是汉字就不行了，因为中文用三个字符去表示</span></span><br><span class="line"><span class="comment">    因为ASCII码和UTF-8底层的英文字母和数字还是用一个byte存储的，但是如果一个个byte去读中文也是可以的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    对于文本文件：.txt .java .c .cpp  使用字符流处理</span></span><br><span class="line"><span class="comment">    对于非文本文件： .jpg .mp4 .doc .ppt  是有字节流处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"70pomn1.jpg"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] bbuf  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(bbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fw.write(bbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//一个个byte读.复制用字节流也可以，但是在内存中读会乱码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line"><span class="comment">//            byte[] bbuf  = new byte[5];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = fr.read(bbuf))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                fw.write(bbuf,0,len);  //每次写出len个字符</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fw.write(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"duplicate success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File srcfile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destfile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(srcfile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(destfile);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] bbuf  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(bbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fw.write(bbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//复制视频所需要的时间 70MB</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        String srcPath = <span class="string">"C:\\Users\\demon\\Desktop\\01.avi"</span>;</span><br><span class="line">        String destPath = <span class="string">"C:\\Users\\demon\\Desktop\\02.avi"</span>;</span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"duplicate cost mills:"</span>+(e-s)); <span class="comment">//769ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、缓冲流"><a href="#三、缓冲流" class="headerlink" title="三、缓冲流"></a>三、缓冲流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.缓冲流的使用</span></span><br><span class="line"><span class="comment">                    字节流                 字节流           字符流             字符流</span></span><br><span class="line"><span class="comment">抽象基类：        InputStream          OutputStream          Reader             Writer</span></span><br><span class="line"><span class="comment">节点流（文件流）: FileInputStream      FileOutputStream      FileReader        FileWriter</span></span><br><span class="line"><span class="comment">缓冲流（处理流）：BufferedInputStream  BufferedOutputStream  BufferedReader     BufferedWriter</span></span><br><span class="line"><span class="comment">对应的方法参数：  read(byte[] buffer)  writer(byte[] buffer) read(char[] cbuf)  writer(char[] cbuf)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.缓冲流的作用：提高读写的速度，开发中缓冲流使用得比较多</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么可以提高读写的速度：缓冲区</span></span><br><span class="line"><span class="comment">提供了8192byte（8kB)的缓存空间，读满之后一次性的写出  BufferedRead 是8192个char，16kB</span></span><br><span class="line"><span class="comment">通过flush()去刷新缓冲区</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.处理流：套接在已有流的基础上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">"70pomn1.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.1 节点流</span></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 缓冲流 处理流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制：内容的读写</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;  <span class="comment">//read里的数组不要溜掉了</span></span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.流资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明：在关闭外层流的时候会自动关闭内层流，因此可以省略</span></span><br><span class="line"><span class="comment">//        fileInputStream.close();</span></span><br><span class="line"><span class="comment">//        fileOutputStream.close();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis!=<span class="keyword">null</span>)</span><br><span class="line">                    bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)</span><br><span class="line">                    bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String src,String dest)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(src);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(dest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.1 节点流</span></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 缓冲流 处理流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制：内容的读写</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;  <span class="comment">//read里的数组不要溜掉了</span></span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.流资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明：在关闭外层流的时候会自动关闭内层流，因此可以省略</span></span><br><span class="line"><span class="comment">//        fileInputStream.close();</span></span><br><span class="line"><span class="comment">//        fileOutputStream.close();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis!=<span class="keyword">null</span>)</span><br><span class="line">                    bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)</span><br><span class="line">                    bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        String src = <span class="string">"C:\\Users\\demon\\Desktop\\01.avi"</span>;</span><br><span class="line">        String desc = <span class="string">"C:\\Users\\demon\\Desktop\\02.avi"</span>;</span><br><span class="line">        copyFileWithBuffered(src,desc);</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(e-s);  <span class="comment">//192</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>)));<span class="comment">//默认是false，就会覆盖源文件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf))!=-1)&#123;   //不要漏了判断不等于-1</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：使用String和readline</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span> ((data=br.readLine())!= <span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(data+<span class="string">"\n"</span>);  <span class="comment">//不包含换行符</span></span><br><span class="line">                <span class="comment">//bw.newLine();  提供换行操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="keyword">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bw != <span class="keyword">null</span>)</span><br><span class="line">            bw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、转换流"><a href="#四、转换流" class="headerlink" title="四、转换流"></a>四、转换流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理流之二:转换流的使用</span></span><br><span class="line"><span class="comment">1.属于字符流</span></span><br><span class="line"><span class="comment">InputStreamReader：将一个字节的输入流 转换为字符的输入流    解码</span></span><br><span class="line"><span class="comment">OutputStreamWriter： 将一个字符的输出流 转换为字节的输出流  编码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.作用：提供字节流和字符流之间的转换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.字符集</span></span><br><span class="line"><span class="comment">常见的编码表</span></span><br><span class="line"><span class="comment"> ASCII：美国标准信息交换码。  用一个字节的7位可以表示。被其他字符集兼容</span></span><br><span class="line"><span class="comment"> ISO8859-1：拉丁码表。欧洲码表  用一个字节的8位表示。</span></span><br><span class="line"><span class="comment"> GB2312：中国的中文编码表。最多两个字节编码所有字符</span></span><br><span class="line"><span class="comment"> GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</span></span><br><span class="line"><span class="comment">    如果是两个byte表示的字符，最高位是1，表示的是一个byte的字符就是0</span></span><br><span class="line"><span class="comment"> Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的 字符码。所有的文字都用两个字节来表示。</span></span><br><span class="line"><span class="comment">    首位要用来表示是1byte还是2byte，所以只有2的15次方的空间 32768 不够世界上的所有字符使用，所以没有推广</span></span><br><span class="line"><span class="comment"> UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</span></span><br><span class="line"><span class="comment">    随着互联网的出现，没8bit传输数据就是utf-8 16bit就是utf-16</span></span><br><span class="line"><span class="comment">        1byte 0xxxxxxx</span></span><br><span class="line"><span class="comment">        2byte 110xxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">        3byte 1110xxxx 10xxxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">        4byte 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">    1-4byte的分别对应原unicode中的一部分符号范围</span></span><br><span class="line"><span class="comment">    中文在utf-8中是三个byte</span></span><br><span class="line"><span class="comment">ANSI编码，通常指的是平台的默认编码，英文操作系统是ISO-8859-1,中文系统是GBK</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//实现字节的输入到字符的转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"hello1.txt"</span>);</span><br><span class="line">       <span class="comment">// InputStreamReader isr = new InputStreamReader(fis); //使用系统默认的字符集UTF-8</span></span><br><span class="line">        <span class="comment">//直接在参数中指定字符集，根据hello.txt文件当初保存时使用的字符集</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"GBK"</span>);  <span class="comment">//如果文件用的是utf-8编码，就会输出乱码</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                System.out.print(cbuf[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//InputStreamReader和OutputStreamWriter的综合使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"utf-8"</span>);   <span class="comment">//默认是utf-8</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">"gbk"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(osw!= <span class="keyword">null</span>)</span><br><span class="line">            osw.close();</span><br><span class="line">        <span class="keyword">if</span>(isr!= <span class="keyword">null</span>)</span><br><span class="line">            isr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、对象流"><a href="#五、对象流" class="headerlink" title="五、对象流"></a>五、对象流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理流之六：对象流</span></span><br><span class="line"><span class="comment">ObjectInputStream</span></span><br><span class="line"><span class="comment">ObjectOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">序列化：把内存中的Java对象保存到磁盘中或通过网络传输出去 通过ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">反序列化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、对象的序列化机制</span></span><br><span class="line"><span class="comment">1.把Java对象转换成平台无关的二进制流，从而允许把这种二进制流永久地保存在磁盘上，或者通过网络将</span></span><br><span class="line"><span class="comment">这种二进制流传输到另一个网络节点。</span></span><br><span class="line"><span class="comment">当其他程序获取了这种二进制流，可以从中恢复为对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Java对象的可序列化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Person需要满足可序列化的:</span></span><br><span class="line"><span class="comment">1.实现Serializable:没有需要实现的抽象方法，称为标识接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.提供一个全局常量 serialVersionUID</span></span><br><span class="line"><span class="comment">2.1 serialVersionUID用来表明类的不同版本间的兼容性。</span></span><br><span class="line"><span class="comment">简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。</span></span><br><span class="line"><span class="comment">2.2 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。</span></span><br><span class="line"><span class="comment"> 若类的实例变量（非静态变量）做了修改，serialVersionUID 可能发生变化。故建议， 显式声明。</span></span><br><span class="line"><span class="comment">2.3 Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，</span></span><br><span class="line"><span class="comment">JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，</span></span><br><span class="line"><span class="comment">如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.除了当前person类需要实现Serializable,所有属性的也必须是可序列化的。基本数据类型默认是可序列化的</span></span><br><span class="line"><span class="comment">String也实现了Serializable，自定义类要实现Serializable,并且提供一个serialVersionUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.不能序列化static和transient修饰的成员变量,属性在序列化的时候就没有值，都是默认初始化值</span></span><br><span class="line"><span class="comment">Person&#123;name='null', age=0, id=0&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">把内存的对象转换成一种特殊格式的字符串 json   字符串自身是可以序列化的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStream</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"object.dat"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> String(<span class="string">"what is the problem with you?"</span>));</span><br><span class="line">            oos.flush();  <span class="comment">//刷新操作</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">"tom"</span>,<span class="number">20</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (oos!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//反序列化，把磁盘文件或者网络传输的对象还原为内存中的一个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"object.dat"</span>)));</span><br><span class="line">            Object o = ois.readObject();</span><br><span class="line">            String str = (String)o;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            Object person = ois.readObject();</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(ois!=<span class="keyword">null</span>)</span><br><span class="line">                ois.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Person需要满足可序列化的:</span></span><br><span class="line"><span class="comment">1.实现Serializable:没有需要实现的抽象方法，称为标识接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.提供一个全局常量 serialVersionUID</span></span><br><span class="line"><span class="comment">2.1 serialVersionUID用来表明类的不同版本间的兼容性。</span></span><br><span class="line"><span class="comment">简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。</span></span><br><span class="line"><span class="comment">2.2 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。</span></span><br><span class="line"><span class="comment"> 若类的实例变量（非静态变量）做了修改，serialVersionUID 可能发生变化。故建议， 显式声明。</span></span><br><span class="line"><span class="comment">2.3 Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，</span></span><br><span class="line"><span class="comment">JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，</span></span><br><span class="line"><span class="comment">如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.除了当前person类需要实现Serializable,所有属性的也必须是可序列化的。基本数据类型默认是可序列化的</span></span><br><span class="line"><span class="comment">String也实现了Serializable，自定义类要实现Serializable,并且提供一个serialVersionUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.不能序列化static和transient修饰的成员变量,属性在序列化的时候就没有值，都是默认初始化值</span></span><br><span class="line"><span class="comment">Person&#123;name='null', age=0, id=0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1231231313L</span>; <span class="comment">//用来识别所在类的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", id="</span> + id +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、其他流"><a href="#六、其他流" class="headerlink" title="六、其他流"></a>六、其他流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其他流的使用</span></span><br><span class="line"><span class="comment">1.标准的输入输出流</span></span><br><span class="line"><span class="comment">system.in</span></span><br><span class="line"><span class="comment">system.out</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.打印流(都是输出流）</span></span><br><span class="line"><span class="comment">PrintStream    system.out返回的就是PrintStream的实例 println()就是该类的方法</span></span><br><span class="line"><span class="comment">可以通过setOut把数据从控制台打印到指定的文件中</span></span><br><span class="line"><span class="comment">System.setOut(PrintStream)  PrintSteam(FileOutputStream) 从而打印到文件中</span></span><br><span class="line"><span class="comment">PrintWriter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提供了一系列重载的print()和println()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.数据流</span></span><br><span class="line"><span class="comment">操作基本数据类型和String的</span></span><br><span class="line"><span class="comment">DataInputStream</span></span><br><span class="line"><span class="comment">DataOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">将数据持久化，用于读取和写入基本数据类型和字符串</span></span><br><span class="line"><span class="comment">有一系列方法。每次写入就要flush() 刷新把数据存在文件中</span></span><br><span class="line"><span class="comment">可以永久化和读取，读取数据得按写入的顺序读</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInOut</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    标准的输入输出流</span></span><br><span class="line"><span class="comment">    System.in   默认从键盘输入</span></span><br><span class="line"><span class="comment">    System.out  默认从控制台输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    System类的 setIn(InputStream in) setOut(PrintStream out)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    练习：把读取到的整行字符串转换成大写输出，e exit才退出</span></span><br><span class="line"><span class="comment">    方法一：使用Scanner实现</span></span><br><span class="line"><span class="comment">    方法二：使用System.in实现  --&gt;转换流--&gt; bufferReader的readline()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in); <span class="comment">//除了可以读取file 也可以直接读取键盘输入</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"e"</span>.equalsIgnoreCase(data)||<span class="string">"exit"</span>.equalsIgnoreCase(data))&#123; <span class="comment">//data写在参数里可以更好地避免空指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String upper = data.toUpperCase();</span><br><span class="line">                System.out.println(upper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、RandomAccessFile"><a href="#七、RandomAccessFile" class="headerlink" title="七、RandomAccessFile"></a>七、RandomAccessFile</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   RandomAccessFile的使用</span></span><br><span class="line"><span class="comment">   在java.io包下，但直接继承于Object，并且实现了DataInput DataOutput这两个接口，意味着这个类既可以读也可以写</span></span><br><span class="line"><span class="comment">   既是输入流又是输出流</span></span><br><span class="line"><span class="comment">   构造器 RandomAccessFile(File mode）RandomAccessFile(String mode）</span></span><br><span class="line"><span class="comment">   mode</span></span><br><span class="line"><span class="comment">   r:只读</span></span><br><span class="line"><span class="comment">   rw：读写</span></span><br><span class="line"><span class="comment">   rwd 同步文件内容</span></span><br><span class="line"><span class="comment">   rws 同步文件内容和元数据更新</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   //作为输出流时，写出到的文件如果不存在，就自动创建；如果文件已经存在，就会默认从头对原有文件内容进行覆盖</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   可以一定操作实现插入数据的操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   seek() 断点续传 开多个线程，每个线程执行，在下载的时候创建一个临时文件记录不同的线程的指针的位置，就可以实现断点续传</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;<span class="comment">//千万不要把类名写成和已经有的类一样的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"70pomn4.jpg"</span>),<span class="string">"rw"</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>),<span class="string">"r"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = raf2.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                raf1.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(raf1!=<span class="keyword">null</span>)</span><br><span class="line">            raf1.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(raf2!=<span class="keyword">null</span>)</span><br><span class="line">            raf2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//作为输出流时，写出到的文件如果不存在，就自动创建；如果文件已经存在，就会默认从头对原有文件内容进行覆盖</span></span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"helloworld.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        raf.seek(<span class="number">3</span>);<span class="comment">//把指针调到角标为3的位置，即从第四位开始覆盖，也可以实现append</span></span><br><span class="line">        raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line">       <span class="comment">// raf.writeChars("xyz");</span></span><br><span class="line">        raf.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用RandomAccessFile实现插入的效果</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"helloworld.txt"</span>), <span class="string">"rw"</span>);</span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>)<span class="keyword">new</span> File(<span class="string">"helloworld.txt"</span>).length());</span><br><span class="line">        <span class="keyword">while</span>((len = raf.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)); <span class="comment">//把byte数组放进一个StringBuilder</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把StringBuild再写入</span></span><br><span class="line">        raf.write(sb.toString().getBytes());</span><br><span class="line">        raf.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考：将StringBuilder替换为ByteArrayInputStream</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习3:获取文本上字符出现的次数,把数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.遍历文本每一个字符</span></span><br><span class="line"><span class="comment"> * 2.字符出现的次数存在Map中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span></span><br><span class="line"><span class="comment"> * map.put('a',18);</span></span><br><span class="line"><span class="comment"> * map.put('你',2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.把map中的数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 3:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    说明：如果使用单元测试，文件相对路径为当前module</span></span><br><span class="line"><span class="comment">          如果使用main()测试，文件相对路径为当前工程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="keyword">char</span> ch = (<span class="keyword">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"wordcount.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                        bw.write(<span class="string">"空格="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\t'</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">"tab键="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\r'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"回车="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\n'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"换行="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">//遍历目录中的文件 ，计算空间、删除指定文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建同目录的文件</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\hello.txt"</span>);</span><br><span class="line">        String parent = file1.getParent();</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(file1.getParent(),<span class="string">"haha.txt"</span>);</span><br><span class="line">        file2.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\io"</span>);</span><br><span class="line">        String[] list = file1.list();</span><br><span class="line">        <span class="keyword">for</span>(String fileName: list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (fileName.length()&gt;<span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileName.substring(fileName.length() - <span class="number">4</span>, fileName.length()).equals(<span class="string">".jpg"</span>)) &#123;</span><br><span class="line">                    System.out.println(fileName);</span><br><span class="line">                    <span class="comment">//可以调用String的endsWith()</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"d:\\io"</span>);</span><br><span class="line">        FileExer fileExer = <span class="keyword">new</span> FileExer();</span><br><span class="line">        <span class="keyword">long</span> space = fileExer.getDir(file);</span><br><span class="line">        System.out.println(<span class="string">"space usage:"</span>+space+<span class="string">"byte"</span>);</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1"</span>,<span class="string">"io4"</span>);</span><br><span class="line"><span class="comment">//        file1.listFiles();</span></span><br><span class="line">        fileExer.deleteDir(file1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDir</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> space = <span class="number">0</span>;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f:files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                getDir(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">long</span> length = f.length();</span><br><span class="line">                space += length;</span><br><span class="line">                System.out.println(f);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> space;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">deleteDir</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;  <span class="comment">//先删子目录</span></span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f:files)&#123;</span><br><span class="line">                deleteDir(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        file.delete();  <span class="comment">//然后删自己 ，即可能是文件也可能是文件夹</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"70pomneEncrypt.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对字节进行修改</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                    buffer[i] =(<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!= <span class="keyword">null</span>)</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"70pomneEncrypt.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"70pomneDecrypt.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对字节进行修改</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                    buffer[i] =(<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!= <span class="keyword">null</span>)</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">                fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：IO流
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-集合</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-collection.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-collection.html</id>
    <published>2020-06-27T16:24:46.000Z</published>
    <updated>2020-07-01T16:10:47.560Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/30/sNBg92cYCWdZSua.png" alt="集合框架"></p><h1 id="一、Collection"><a href="#一、Collection" class="headerlink" title="一、Collection"></a>一、Collection</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、集合框架的概述</span></span><br><span class="line"><span class="comment">1.集合、数组都是对多个数据进行存储操作的结构，简称Java容器</span></span><br><span class="line"><span class="comment">   存储：都是内存层面的，不涉及到持久化的存储（.txt .jpg 数据库中）</span></span><br><span class="line"><span class="comment">2.1 数组在储存多个数据方面的特点：</span></span><br><span class="line"><span class="comment">    - 一旦初始化以后，其长度就确定了。 //不能改</span></span><br><span class="line"><span class="comment">    - 一定定义好数组，其元素的类型也就确定了。只能操作指定类型的数据。  //其实是好处，数据类型严格</span></span><br><span class="line"><span class="comment">       但是可以使用多态性，放子类对象</span></span><br><span class="line"><span class="comment">2.2 数组在存储数据的缺点：</span></span><br><span class="line"><span class="comment">    - 一旦初始化，其长度就不可修改，如果需要扩容就较难处理</span></span><br><span class="line"><span class="comment">    - 数组中提供的方法非常有限，多余添加、删除、插入数据等操作，非常不便且效率不高。</span></span><br><span class="line"><span class="comment">    - 获取数组中实际元素的个数的需求，数组没有现成的属性和方法和使用</span></span><br><span class="line"><span class="comment">    - 数组存储的数据特点： 有序、可重复。对于无序和不可重复的数据的需求，无法满足</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、集合框架</span></span><br><span class="line"><span class="comment">    |---Collection接口  单列集合，用来储存一个一个的对象</span></span><br><span class="line"><span class="comment">        |---List接口   有序的可重复的数据       --&gt;动态数组</span></span><br><span class="line"><span class="comment">            |---ArrayList Linkedlist Vector</span></span><br><span class="line"><span class="comment">        |---Set接口    无序的不可重复的数据</span></span><br><span class="line"><span class="comment">            |---HashSet LinkedHashSet TreeSet</span></span><br><span class="line"><span class="comment">    |---Map接口        双列数据，使用一对一对（键值对）的数据  一个key不能对应多个value，但是一个value可以有多个key指向</span></span><br><span class="line"><span class="comment">            |---HashMap LinkedHashMap TreeMap HashTable Properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合分为Collection 和 Map（映射）</span></span><br><span class="line"><span class="comment">Collection ：单列数据  实线是继承，虚线是实现关系</span></span><br><span class="line"><span class="comment">    - list接口：有序可重复</span></span><br><span class="line"><span class="comment">    - set接口：无序  不可重复</span></span><br><span class="line"><span class="comment">Map： 双列数据  保存具有映射关系的 “key-value对” 的集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、Collection接口中的方法</span></span><br><span class="line"><span class="comment">抽象方法</span></span><br><span class="line"><span class="comment">向Collection接口的实现类的对象中添加对象obj时，需要重写equals()  contains()，remove()才能使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e)   添加元素到集合中</span></span><br><span class="line">        coll.add(<span class="string">"aa"</span>);</span><br><span class="line">        coll.add(<span class="string">"bb"</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);  <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size()     获取添加的元素的个数</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll()   将参数集合中的元素，添加到调用该方法的集合中</span></span><br><span class="line">        ArrayList coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">34</span>);</span><br><span class="line">        coll1.add(<span class="number">67</span>);</span><br><span class="line">        coll1.addAll(coll);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll1.size());</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty 判断size是否为0</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()  清空元素，但不是null</span></span><br><span class="line">        coll1.clear();</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//contains()  是否包含某个对象</span></span><br><span class="line">        System.out.println(coll.contains(<span class="number">123</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">"tom"</span>)));<span class="comment">//true,这里相当于是调用String类中的equals方法</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"tom"</span>)));</span><br><span class="line">        <span class="comment">// 如果要判断内容，要在类中重写equals()  false--&gt;true,需要调用多此，把contains参数的对象</span></span><br><span class="line">        <span class="comment">// 调用equals()和集合中的每个对象去比较，集合中的元素作为equals的参数，直到找到为止</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsAll(Collection coll1)  判断coll1的元素是否全部在调用该方法的集合中</span></span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove() 删除 有返回值，删除成功返回true ；指定的元素不存在 就返回false</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.remove(<span class="number">123</span>));   <span class="comment">//也需要重写equals()先判断是否有元素才能删除</span></span><br><span class="line">        System.out.println(coll);  <span class="comment">//直接sout对象名 相当于调用ArrayList的toString()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//removeAll(Collection coll1)  删除和coll1重合的部分的元素  交集部分  得到的是差集</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(<span class="number">23</span>);</span><br><span class="line"><span class="comment">//      coll.removeAll(coll1);</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//coll.retainAll(Collection coll1)   求交集部分，然后把交集给了coll</span></span><br><span class="line">        coll.retainAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//equals()   判断当前集合和形参集合的元素是不是相同（是否考虑顺序要考虑集合的实例</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll1.add(LocalDateTime.now());  <span class="comment">//LocalDatetime是瞬时的。所以是两个不同的对象，不同于Date对象</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line">        System.out.println(coll.equals(coll1));  <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//如果调换add元素的顺序就会变成false 因为Arraylist是有序的 可重复的</span></span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);   <span class="comment">//就把相同的元素全部删完，即使出现了两边也是</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">        <span class="comment">//hashCode() 返回当前集合对象的hashcode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        System.out.println(coll.hashCode());  <span class="comment">//根据元素计算出来的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//toArray()  把集合转换为数组</span></span><br><span class="line">        Object[] o = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;o.length ; i++) &#123;</span><br><span class="line">            System.out.println(o[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展： 数组也能转为集合中的list 调用 Arrays.asList();静态方法</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; list1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">        System.out.println(list1);   <span class="comment">//[[I@1fc2b765]  把整个int[] 当成一个元素了</span></span><br><span class="line"></span><br><span class="line">        List list2 = Arrays.asList( <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(list2);     <span class="comment">// [3, 5]</span></span><br><span class="line">        List&lt;Integer&gt; list3 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        System.out.println(list3);     <span class="comment">//[1, 2, 3]   使用int型的时候要注意</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator():返回Iterator接口的实例，用于遍历集合元素，后面讲</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">//        return Objects.hash(age, name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新的遍历方式"><a href="#新的遍历方式" class="headerlink" title="新的遍历方式"></a>新的遍历方式</h2><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">foreach循环 after jdk5.0  增强for循环</span></span><br><span class="line"><span class="comment">用于遍历，从集合中取第一个元素赋值给obj，再打印obj，其实内部是个迭代器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeachTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for( 集合中元素的类型 局部变量：集合对象）</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj:coll)&#123;  <span class="comment">//其实内部是个迭代器</span></span><br><span class="line">            System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;   <span class="comment">//形参的对象类型不同于集合，数组的类型的是确定的</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"mm"</span>,<span class="string">"mm"</span>,<span class="string">"mm"</span>&#125;;</span><br><span class="line">        <span class="comment">//普通for循环赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="string">"gg"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);   <span class="comment">//"gg"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for循环赋值</span></span><br><span class="line">        <span class="keyword">for</span> (String str :arr) &#123;</span><br><span class="line">            str = <span class="string">"mm"</span>;   <span class="comment">//将数组元素的地址值赋值给形参，改变的是形参，除了for循环，形参出栈，不改变原数组的元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);   <span class="comment">//"gg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">迭代器Iterator</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合元素的遍历，使用Iterator接口    容器：集合、数组</span></span><br><span class="line"><span class="comment">Collection接口继承了Iterator接口，所以只能用来遍历Collection，不能遍历Map</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，</span></span><br><span class="line"><span class="comment"> 那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了 Iterator接口的对象。</span></span><br><span class="line"><span class="comment"> - Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</span></span><br><span class="line"><span class="comment"> - 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合 的第一个元素之前。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 执行原理：</span></span><br><span class="line"><span class="comment"> 指针 hasNext() 返回true 调用next()放回元素 指针下移</span></span><br><span class="line"><span class="comment"> 如果没有元素了，还调用next()会报异常 NoSuchElementException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 方法</span></span><br><span class="line"><span class="comment"> hasNext()</span></span><br><span class="line"><span class="comment"> next()</span></span><br><span class="line"><span class="comment"> remove()  删除集合中的元素，不同于集合中的remove() 是Iterator的方法</span></span><br><span class="line"><span class="comment">  如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法， 再调用remove都会报IllegalStateException。</span></span><br><span class="line"><span class="comment"> 迭代器的remove()一定要跟在next()后面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       coll.add(<span class="number">123</span>);</span><br><span class="line">       coll.add(<span class="number">123</span>);</span><br><span class="line">       coll.add(<span class="number">456</span>);</span><br><span class="line">       coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">       coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">       coll.add(LocalDateTime.now());</span><br><span class="line">       Iterator iterator = coll.iterator();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//删除集合中的指定元素</span></span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Object obj = iterator.next();</span><br><span class="line">           <span class="keyword">if</span>(coll.contains(<span class="number">123</span>))&#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//重新new一个iterator 遍历删除后集合</span></span><br><span class="line">        Iterator iterator1 = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        System.out.println(iterator.hasNext());</span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt;coll.size() ; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 使用迭代器去遍历集合元素  一般写法</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一： 每次调用next() 指针会下移，会跳着输出</span></span><br><span class="line"><span class="comment">//        Iterator iterator1 = coll.iterator();</span></span><br><span class="line"><span class="comment">//        while ((iterator.next())!=null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        错误方式二： 每次调用iterator()都会生成一个新的对象，默认游标都会在第一个元素之前。所以会不停输出第一个元素</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、List"><a href="#二、List" class="headerlink" title="二、List"></a>二、List</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collection子接口之一： List接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一、List接口基本情况</span></span><br><span class="line"><span class="comment">通常用来替代数组,不用考虑角标越界</span></span><br><span class="line"><span class="comment">元素有序，且可重复，集合中每个元素都有其对应的顺序的索引，可以根据序号来存取容器中的元素</span></span><br><span class="line"><span class="comment">List接口的实现类常用的有：ArrayList LinkedList Vector</span></span><br><span class="line"><span class="comment">添加元素所在类要重写equals()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、List接口的实现类</span></span><br><span class="line"><span class="comment">|---Collection接口  单列集合，用来储存一个一个的对象</span></span><br><span class="line"><span class="comment">        |---List接口 since v1.2 有序的可重复的数据       --&gt;动态数组，替换原有的数组</span></span><br><span class="line"><span class="comment">            |---ArrayList   主要实现类   v1.2  线程不安全的，效率高，底层使用Object[]存储，数组插入要后面的要前移一位</span></span><br><span class="line"><span class="comment">            |---Linkedlist              v1.2  底层使用双向链表（通过双向地址连接）存储 对于频繁的插入、删除操作，效率比ArrayList高</span></span><br><span class="line"><span class="comment">            |---Vector      古老实现类   v1.0  线程安全的，效率低   底层使用Object[]存储 vector扩容为2倍，默认创建长度为10的数组</span></span><br><span class="line"><span class="comment">        char[]的StringBuffer（线程安全）和StringBuilder（线程不安全）也是一种容器</span></span><br><span class="line"><span class="comment">比较ArrayList Linkedlist Vector 三者的异同</span></span><br><span class="line"><span class="comment">相同：都实现了List接口 ，存储数据的特点相同（可重复、有序）</span></span><br><span class="line"><span class="comment">不同：上述点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、ArrayList源码分析</span></span><br><span class="line"><span class="comment">  1. ArrayList源码分析： jdk7.0情况下</span></span><br><span class="line"><span class="comment">    ArrayList list = new ArrayList();   //默认空参构造器，底层创建了长度是10的Object[] elementData = new Object[10];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    当添加的元素使得容量不足时，就自动进行扩容  类似于StringBuilder</span></span><br><span class="line"><span class="comment">    int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);  //扩容为原来的1.5倍，右移是除以2</span></span><br><span class="line"><span class="comment">    if (newCapacity - minCapacity &lt; 0)                   //扩容还不够，就用这个minCapacity</span></span><br><span class="line"><span class="comment">        newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)                //超过整型的情况 2的32次方</span></span><br><span class="line"><span class="comment">        newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">   // minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"><span class="comment">    elementData = Arrays.copyOf(elementData, newCapacity);   //把原来的数组的元素copy过来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    结论：在开发中如果确定容量，使用带参数的构造器  ArrayList list = new ArrayList(int capacity)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2.ArrayList jdk8.0</span></span><br><span class="line"><span class="comment">   在创建的数组的时候，初始化时候是 创建了个空的数组&#123;&#125;  //节省内存空间</span></span><br><span class="line"><span class="comment">   在add()的时候才创建长度为10的Object[],并将数据添加到elementData的位置上，后续的添加和扩容操作和JDK7.0一致</span></span><br><span class="line"><span class="comment">   3.小结：7.0中的ArrayList对象创建  类似单例模式的饿汉式，8.0类似懒汉式，节省了内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、Linkedlist源码分析</span></span><br><span class="line"><span class="comment">顺序表和链表是数据结构中最基本的单位</span></span><br><span class="line"><span class="comment">顺序表：适合查找 末尾添加。不用维护键值对，可以通过索引查找</span></span><br><span class="line"><span class="comment">Node类型的first和last 属性，默认值为null.</span></span><br><span class="line"><span class="comment">list.add(123)// 将123封装到Node，创建Node对象</span></span><br><span class="line"><span class="comment">内部类：Node  体现了Linkedlist双向链表的特征，不涉及扩容</span></span><br><span class="line"><span class="comment"> private static class Node&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">        E item;</span></span><br><span class="line"><span class="comment">        Node&lt;E&gt; next;</span></span><br><span class="line"><span class="comment">        Node&lt;E&gt; prev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.item = element;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">            this.prev = prev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、List接口中的常用方法（Collection没有）</span></span><br><span class="line"><span class="comment">void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line"><span class="comment">boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="comment">Object get(int index):获取指定index位置的元素</span></span><br><span class="line"><span class="comment">int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="comment">int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="comment">Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="comment">Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line"><span class="comment">List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：常用方法</span></span><br><span class="line"><span class="comment">增 add()</span></span><br><span class="line"><span class="comment">删 Object remove(int index)</span></span><br><span class="line"><span class="comment">改 Object set(int index, Object ele)</span></span><br><span class="line"><span class="comment">查 Object get(int index)</span></span><br><span class="line"><span class="comment">插 add(int index, Object ele)</span></span><br><span class="line"><span class="comment">长度  size()</span></span><br><span class="line"><span class="comment">遍历: Iterator  foreach for</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"aa"</span>);</span><br><span class="line">        list.add(<span class="string">"bb"</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式一：iterator</span></span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式二：foreach</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj:list)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式三：for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;list.size() ; i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"aa"</span>);</span><br><span class="line">        list.add(<span class="string">"bb"</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void add(int index,Object ele):在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="number">343</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        List integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        list.addAll(<span class="number">1</span>, integers);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.addAll(integers);</span><br><span class="line">        System.out.println(list);   <span class="comment">//把integers作为一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(int index):获取指定index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//indexOf(Object obj):返回obj在集合中首次出现的位置,如果不存在返回-1</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">"aa"</span>));</span><br><span class="line">        <span class="comment">//lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">"aa"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(int index):移除指定index位置的元素，并返回此元素，对Collection里的remove的重载，这里是按索引删除</span></span><br><span class="line">        Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">"gg"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span></span><br><span class="line">        List subList = list.subList(<span class="number">0</span>, <span class="number">4</span>);   <span class="comment">//左闭右开</span></span><br><span class="line">        System.out.println(subList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Set"><a href="#三、Set" class="headerlink" title="三、Set"></a>三、Set</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collection子接口之二：Set接口</span></span><br><span class="line"><span class="comment">一、框架</span></span><br><span class="line"><span class="comment">|---Collection接口  单列集合，用来储存一个一个的对象   开发中用Map和List比较多，Set偏少</span></span><br><span class="line"><span class="comment">        |---Set接口    无序的，不可重复的数据</span></span><br><span class="line"><span class="comment">            |---HashSet   作为Set接口的主要实现类，线程不安全的，可以存null值，可以add(null)</span></span><br><span class="line"><span class="comment">                |---LinkedHashSet 是HashSet的子类 遍历是按照添加的顺序输出(但还是无序的）</span></span><br><span class="line"><span class="comment">            |---TreeSet 使用红黑树储存，应用了Comparable和Comparator接口。可以按照添加对象的指定属性进行排序</span></span><br><span class="line"><span class="comment">三个实现类：HashSet LinkedHashSet TreeSet</span></span><br><span class="line"><span class="comment">Set接口没有额外定义新的方法，所以使用的都是Collection中定义过的方法</span></span><br><span class="line"><span class="comment">要求：向Set中添加数据，其所在的类一定要重写equals() hashCode() 以实现对象相等规则，</span></span><br><span class="line"><span class="comment">      重写的equals()和 hashCode() 尽可能保持一致性 --&gt; 相等的对象必须具有相等的散列码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、无序、不可重复</span></span><br><span class="line"><span class="comment">Set存储无序不可重复的数据(以HashSet为例）</span></span><br><span class="line"><span class="comment">1.无序性：不等于随机性，每次遍历都是输出相同的结果，不是按照索引的顺序添加元素，而是根据添加元素的Hash值来加入数组</span></span><br><span class="line"><span class="comment">2.不可重复性:保证添加的元素按照equals判断时，不能返回true。即相同的元素只能添加一个。</span></span><br><span class="line"><span class="comment">可以过滤重复数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、添加元素的过程：以HashSet为例</span></span><br><span class="line"><span class="comment">实际上是new了个HashMap</span></span><br><span class="line"><span class="comment">底层是一个数组+链表的结构，初始容量为16，如果使用率超过0.75 即16*0.75=12   16位就会扩容为原来的两倍32 64 128...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要添加元素a，调用a所在类的HashCode(),计算元素a hash值，此哈希值通过散列函数，得出a在底层数组中的存放位置（即索引位置），</span></span><br><span class="line"><span class="comment">    判断此位置上是否已经有元素：</span></span><br><span class="line"><span class="comment">    如果此位置没有其他元素，则此元素添加成功   ---&gt;情况1</span></span><br><span class="line"><span class="comment">    如果此位置已经有其他元素b，或者以链表形式存储的多个元素（数组的位置一样，但hash值不一定一样）</span></span><br><span class="line"><span class="comment">        比较a,b的hash值：</span></span><br><span class="line"><span class="comment">        如果hash值不一样，则添加成功，         ---&gt;情况2</span></span><br><span class="line"><span class="comment">        如果两个元素的hash值一样，就调用元素a所在类的equals(b)，  //equals()和hashCode()方法必须一致</span></span><br><span class="line"><span class="comment">                    返回值是true则添加失败</span></span><br><span class="line"><span class="comment">                    返回值是false则添加成功，仍然以链表存放  ---&gt;情况3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       对于添加成功的情况2和情况3，元素a与已经存在的于指定索引位置的数据以链表的形式储存</span></span><br><span class="line"><span class="comment">        JDK7.0： 元素a放到数组中，指向原来的元素</span></span><br><span class="line"><span class="comment">        JDK8.0： 原来的元素放在数组，元素a放在链表的最下面</span></span><br><span class="line"><span class="comment">        7上8下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//为什么如果要添加的元素所在的位置没有元素就添加成功了？</span></span><br><span class="line"><span class="comment">如果是调用Object类的hashcode，生成的是一个随机数，</span></span><br><span class="line"><span class="comment">就会导致两个user对象的hashcode肯定不一样，算出了的索引位置也不同，所以都没有调用equals方法。</span></span><br><span class="line"><span class="comment">我的理解是，通过类重写的hashcode算出来的更能反映是不是内容相同的对象</span></span><br><span class="line"><span class="comment">String重写的hashcode() 能搞保证两个相同的字符串的哈希值是相同的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name.hashCode()*31+age</span></span><br><span class="line"><span class="comment">31:质数、较大、5bits溢出概率小 ，i*31可以用 （i&lt;&lt;5）-1来计算</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、LinkedHashSet: 是HashSet的子类，底层用了双向链表，相当于在原有的HashSet的基础上，每个数据还维护了两个引用，</span></span><br><span class="line"><span class="comment">    // 记录此数据前后的数据，一个双向链表的结构，记录了添加顺序的先后，对于频繁的遍历操作，效率更加高一些</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、TreeSet</span></span><br><span class="line"><span class="comment">    TreeSet是用来排序，需要有相同的属性。所以向TreeSet中添加的对象必须是相同类的</span></span><br><span class="line"><span class="comment">    TreeSet的添加的元素所在类还需要重写compareTo()</span></span><br><span class="line"><span class="comment">    两种排序方式 自然排序和定制排序  比较器</span></span><br><span class="line"><span class="comment">    TreeSet是按照添加元素所在类的compareTo()来做为不可重复的标准的</span></span><br><span class="line"><span class="comment">    自然排序中比较两个对象的是否相同的标准为compareTo()，只要返回0，就认为是相同的，不是equals()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">"BB"</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">12</span>));</span><br><span class="line">        <span class="comment">//两个user，因为在user类中没有重写equals类，不可重复就是调用了equals()实现的</span></span><br><span class="line">        <span class="comment">//没有调用equals()，如果没在类中重写HashCode，只有重写了HashCode才调用equals</span></span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());  <span class="comment">//遍历的时候和添加的顺序不同，</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedHashSet: 是HashSet的子类，底层用了双向链表，相当于在原有的HashSet的基础上，每个数据还维护了两个引用，</span></span><br><span class="line">    <span class="comment">// 记录此数据前后的数据，一个双向链表的结构，记录了添加顺序的先后，对于频繁的遍历操作，效率更加高一些</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashSet set1 = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set1.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set1.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set1.add(<span class="number">123</span>);</span><br><span class="line">        set1.add(<span class="string">"BB"</span>);</span><br><span class="line">        set1.add(<span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">"tom"</span>));</span><br><span class="line">        set1.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator1 = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator1.next());  <span class="comment">//遍历的时候和添加的顺序相同，</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    TreeSet是用来排序，需要有相同的属性。所以向TreeSet中添加的对象必须是相同类的</span></span><br><span class="line"><span class="comment">//    两种排序方式 自然排序和定制排序  比较器</span></span><br><span class="line"><span class="comment">//    TreeSet是按照添加元素所在类的CompareTo()来做为不可重复的标准的</span></span><br><span class="line"><span class="comment">//    自然排序中比较两个对象的是否相同的标准为CompareTo()，只要返回0，就认为是相同的，不是equals()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        TreeSet set = new TreeSet();</span></span><br><span class="line"><span class="comment">//        set.add(1312);</span></span><br><span class="line"><span class="comment">//        set.add(432);</span></span><br><span class="line"><span class="comment">//        set.add(4324);</span></span><br><span class="line"><span class="comment">//        set.add(-231);</span></span><br><span class="line"><span class="comment">//        set.add(-31);</span></span><br><span class="line"><span class="comment">//        Iterator iterator = set.iterator();</span></span><br><span class="line"><span class="comment">//        while (iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());   //遍历时是按照从小到大的顺序排序的</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">33</span>));  <span class="comment">//如果只写了一级排序，只能添加一个</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jacz"</span>, <span class="number">29</span>));  <span class="comment">//大写的排前面</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"uit"</span>, <span class="number">10</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());   <span class="comment">//遍历时是按照从小到大的顺序排序的</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> Comparator() &#123;   <span class="comment">//匿名实现类，创建一个对象，传入TreeSet的构造器</span></span><br><span class="line">            <span class="comment">//按照年龄从小到大的排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">                    User u1 = (User) o1;</span><br><span class="line">                    User u2 = (User) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.age, u2.age);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据不一致"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">33</span>));  <span class="comment">//如果只写了一级排序，只能添加一个</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jacz"</span>, <span class="number">29</span>));  <span class="comment">//大写的排前面</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"uit"</span>, <span class="number">10</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>)); <span class="comment">//comparator只有一级排序，所以后面的元素就会被舍弃</span></span><br><span class="line">        <span class="comment">//set.add(123);  //"输入数据不一致"</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从小到大，年龄从小到大</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User u = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare =  <span class="keyword">this</span>.name.compareTo(((User) o).name); <span class="comment">//从大到小就加个负号</span></span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age, u.age);  <span class="comment">//integer的compare() 默认也是从小到大的</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Map"><a href="#四、Map" class="headerlink" title="四、Map"></a>四、Map</h1><h2 id="HashMap-amp-LindedHashMap"><a href="#HashMap-amp-LindedHashMap" class="headerlink" title="HashMap &amp; LindedHashMap"></a>HashMap &amp; LindedHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、Map接口的结构</span></span><br><span class="line"><span class="comment">|---Map接口 since1.2  双列数据，使用一对一对（键值对）的数据  一个key不能对应多个value，但是一个value可以有多个key指向</span></span><br><span class="line"><span class="comment">            |---HashMap            作为主要的实现类 since1.2 线程不安全的，效率高，可以储存的null的key和value</span></span><br><span class="line"><span class="comment">                |---LinkedHashMap   since1.4 保证遍历Map元素时，可以按添加顺序遍历，在原基础上添加了一对引用指向前后元素，</span></span><br><span class="line"><span class="comment">                                    对于频繁的遍历操作，效率要比HashMap更高</span></span><br><span class="line"><span class="comment">            |---HashTable          作为古老的实现类 since1.0 线程安全的，效率低，不能存储null的key和value</span></span><br><span class="line"><span class="comment">                |---Properties      常用来处理配置文件。key和value都是String类型的</span></span><br><span class="line"><span class="comment">            |---SortedMap接口</span></span><br><span class="line"><span class="comment">                |---TreeMap        since1.2 按照添加的key-value对进行排序，实现排序排序，按照key来自然排序或者定制排序</span></span><br><span class="line"><span class="comment">                                    底层使用的是红黑树</span></span><br><span class="line"><span class="comment">            HashMap底层： 数组+链表       jdk7.0</span></span><br><span class="line"><span class="comment">                         数组+链表+红黑树 jdk8.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">问题：</span></span><br><span class="line"><span class="comment">1.HashMap的底层实现原理</span></span><br><span class="line"><span class="comment">2.HashMap和HashTable的区别</span></span><br><span class="line"><span class="comment">3.ConcurrentHashMap 与 HashMap的区别  分段锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、Map结构的理解 以HashMap为例</span></span><br><span class="line"><span class="comment">Key是无序、不可重复的（KeySet,使用Set存储）  --&gt;key所在的类要重写equals() hashCode()</span></span><br><span class="line"><span class="comment">Value可以重复，无序的（Collection储存）    --&gt;values所在的类要重写equals()</span></span><br><span class="line"><span class="comment">往Map里放的实际上是一个个的Entry，把key-value对作为两个属性装入Entry（无序不可重复），用set来储存</span></span><br><span class="line"><span class="comment">对比数学中的函数，x类似于key；f(x)类似于value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、HashMap的底层实现原理  以JDk7.0为例</span></span><br><span class="line"><span class="comment">  HashMap map = new HashMap()</span></span><br><span class="line"><span class="comment">  在实例化后，底层创建了长度为16的一位数组Entry[] table;</span></span><br><span class="line"><span class="comment">  ...可能已经执行过多次put了...</span></span><br><span class="line"><span class="comment">  map.put(key1,value1);</span></span><br><span class="line"><span class="comment">  首先，调用key1所在类的hashCode计算key1哈希值，此哈希值经过某种算法后，得到在table中的存放位置</span></span><br><span class="line"><span class="comment">  如果此位置上的数据为空，此时的key1-value1(entry1)添加成功      ----情况1</span></span><br><span class="line"><span class="comment">  如过此位置上的数据不为空，意味着此位置上存在一个或多个数据（以链表存在），比较key1和已经存在的一个</span></span><br><span class="line"><span class="comment">  或多个的数据的哈希值：</span></span><br><span class="line"><span class="comment">        如果key1的哈希值与已经存在的数据都不相同，此时key1-value1添加成功      ----情况2</span></span><br><span class="line"><span class="comment">        如果key1的哈希值与已经存在的某一个数据（key2-value2）的哈希值相同，继续比较：调用key1所在类的equals(key2)</span></span><br><span class="line"><span class="comment">            如果反正false，此时key1-value1添加成功               ----情况1</span></span><br><span class="line"><span class="comment">            如果返回true,使用value1替换value2，如果key</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      情况2和情况3：key1-value1以链表的方式存储</span></span><br><span class="line"><span class="comment">      在不断的添加过程中，会涉及到扩容问题。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      jdk8相较于jdk7在底层实现的不同</span></span><br><span class="line"><span class="comment">      1.new HashMap(): 底层没有创建一个长度为16的数组</span></span><br><span class="line"><span class="comment">      2.jdk8底层的数据是：Node[]  而非entry[]</span></span><br><span class="line"><span class="comment">      3.首次使用put()才会创建</span></span><br><span class="line"><span class="comment">      4.jdk8变成了数组+链表+红黑树，新增了红黑树的结构</span></span><br><span class="line"><span class="comment">        当数组的某一个索引位置上的元素以链表形式存在的数据个数&gt;8,且当前数组的长度&gt;64时，MIN_TREEIFY_CAPACITY=64，如果</span></span><br><span class="line"><span class="comment">        数组长度不大于64，就不改红黑树，而是直接去扩容。</span></span><br><span class="line"><span class="comment">        此索引位置上的所有数据改为使用红黑树存储。 查找的时候遍历链表没有遍历红黑树的效率高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    在创建hashMap的时候去指定长度，会创建一个最接近且大于该数的2的n次方的容量的数组</span></span><br><span class="line"><span class="comment">    loadFactor 负载因子，0.75  兼顾数组的利用率和更少的链表结构</span></span><br><span class="line"><span class="comment">    threshold  = capacity*loadFactor</span></span><br><span class="line"><span class="comment">    DEFAULT_INITIAL_CAPACITY = 16</span></span><br><span class="line"><span class="comment">    DEFAULT_LOAD_FACTOR = 0.75</span></span><br><span class="line"><span class="comment">    TREEIFY_THRESHOLD = 8</span></span><br><span class="line"><span class="comment">    MIN_TREEIFY_CAPACITY=64</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    因为存在哈希碰撞，虽然数组的位置只有12位，但是可能元素已经不止12个了，而且可能数组永远也放不满，为了减少链表结构的存在</span></span><br><span class="line"><span class="comment">    就要早一点进行扩容的操作。</span></span><br><span class="line"><span class="comment">    扩容的条件（大于threshold且，要添加元素的索引位置非空）</span></span><br><span class="line"><span class="comment">    如果索引位置一样，先看是否是null，不是null先比hash值，hash值和链表中都不一样，就添加（在数组或者链表里）。</span></span><br><span class="line"><span class="comment">    如果hash值一样先判断key是不是==或者equals，如果hash值且key都相同，就把旧的value给覆盖了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    hashCode()再作为hash()的参数</span></span><br><span class="line"><span class="comment">    单向链表 只有next，如果索引位置原来null，next就指向null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    JDK8.0的源码实现的区别</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、LinkedHashMap的底层实现原理</span></span><br><span class="line"><span class="comment">是HashMap的子类，用了HashMap的put()，但是重写了newNode(),LinkedHashMap的内部类Entry在继承父类的Node类时，</span></span><br><span class="line"><span class="comment">又多了一个before after的属性，去记录添加时的前后元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">源码：</span></span><br><span class="line"><span class="comment">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment">        Entry&lt;K,V&gt; before, after;                        //记录添加的元素的前后的元素</span></span><br><span class="line"><span class="comment">        Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            super(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashSet其实就是通过new HashMap() 实现的，set的元素就相当于map里的key，所有的key都指向一个value是一个Object对象，没有实际意义。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、Map中定义的方法</span></span><br><span class="line"><span class="comment">添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">增   put</span></span><br><span class="line"><span class="comment">删   remove</span></span><br><span class="line"><span class="comment">改  put</span></span><br><span class="line"><span class="comment">查  get</span></span><br><span class="line"><span class="comment">长度  size</span></span><br><span class="line"><span class="comment">遍历  keySet  values entrySet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  元素的增删改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Object put()  put成功返回null，put重复的key 返回的是key旧的value 相当于map.get(key)</span></span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">123</span>);  <span class="comment">//开发中key和value的类型一般是确定的</span></span><br><span class="line">        map.put(<span class="string">"bb"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(map.put(<span class="string">"gg"</span>,<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">1543</span>);</span><br><span class="line">        System.out.println(map);  <span class="comment">//key相同的时候执行的是修改操作</span></span><br><span class="line"></span><br><span class="line">        HashMap map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"gg"</span>, <span class="number">234</span>);</span><br><span class="line">        map1.put(<span class="string">"bb"</span>, <span class="number">434</span>);</span><br><span class="line">        map1.put(<span class="string">"xx"</span>, <span class="number">134</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void putAll()</span></span><br><span class="line">        <span class="comment">//没有key就添加，有就修改</span></span><br><span class="line">        map.putAll(map1);     <span class="comment">//也是替换</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove(key)   //返回移除的key对应的value,不存在就放回null</span></span><br><span class="line">        Object gg = map.remove(<span class="string">"gg"</span>);</span><br><span class="line">        System.out.println(gg);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void clear()</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map.size());     <span class="comment">//0  不是null</span></span><br><span class="line">        System.out.println(map);            <span class="comment">//&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  元素的查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"bb"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">124</span>);</span><br><span class="line">        map.put(<span class="string">"dd"</span>,<span class="number">553</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(Object key)：获取指定key对应的value,不存在返回null</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"aa"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">"aa"</span>));  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="number">123</span>)); <span class="comment">//只找一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：返回map中key-value对的个数</span></span><br><span class="line">        map.size();</span><br><span class="line">        <span class="comment">// boolean isEmpty()：判断当前map是否为空,判断的是size是不是为0</span></span><br><span class="line">        map.isEmpty();</span><br><span class="line">        <span class="comment">//boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line">        <span class="comment">//得是两个map 且内容都一样 才是true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//元视图操作的方法： 用来遍历的方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aaqwe"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"zz"</span>,<span class="number">4143124</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">124</span>);</span><br><span class="line">        map.put(<span class="string">"dd"</span>,<span class="number">553</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">     <span class="comment">// Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Collection values()：返回所有value构成的Collection集合，是和key的遍历的顺序是一样的</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        Iterator iterator1 = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line">        Set set1 = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        Iterator iterator2 = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext())&#123;</span><br><span class="line">            Object obj = iterator2.next();  <span class="comment">//都是entry对象</span></span><br><span class="line">            Map.Entry entry = (Map.Entry)obj;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">"---"</span>+entry.getValue());  <span class="comment">//可以调用entry的方法</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator iterator5 = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator5.hasNext())&#123;</span><br><span class="line">            Object next = iterator5.next();</span><br><span class="line">            System.out.println(next+<span class="string">"==="</span>+map.get(next));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：</span></span><br><span class="line">        Iterator iterator3 = set.iterator();</span><br><span class="line">        Iterator iterator4 = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()&amp;&amp;iterator4.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator3.next()+<span class="string">"@@@@"</span>+iterator4.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> Hashtable();</span><br><span class="line">       <span class="comment">// map1.put(null, 123);  //java.lang.NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeMap</span></span><br><span class="line"><span class="comment">//向TreeMap 添加key-value时，key要有同一个类的对象创建</span></span><br><span class="line"><span class="comment">//因为要根据key来排序  自然排序、定制排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap treeMap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"dat"</span>, <span class="number">34</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"ewq"</span>, <span class="number">42</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"jerrt"</span>, <span class="number">42</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"azure"</span>, <span class="number">88</span>);</span><br><span class="line">        treeMap.put(u1, <span class="number">100</span>);</span><br><span class="line">        treeMap.put(u2, <span class="number">56</span>);</span><br><span class="line">        treeMap.put(u3, <span class="number">89</span>);</span><br><span class="line">        treeMap.put(u4, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="comment">//只能根据key的属性去排序，不能用value排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">if</span>(u1.age != u2.age)&#123;</span><br><span class="line">                        <span class="keyword">return</span> Integer.compare(u1.age, u2.age);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> -u1.name.compareTo(u2.name);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"类型错误"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeMap treeMap = <span class="keyword">new</span> TreeMap(comparator);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"dat"</span>, <span class="number">34</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"ewq"</span>, <span class="number">42</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"jerrt"</span>, <span class="number">42</span>);</span><br><span class="line">        User u5 = <span class="keyword">new</span> User(<span class="string">"hash"</span>, <span class="number">42</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"azure"</span>, <span class="number">88</span>);</span><br><span class="line">        treeMap.put(u1, <span class="number">100</span>);</span><br><span class="line">        treeMap.put(u2, <span class="number">56</span>);</span><br><span class="line">        treeMap.put(u3, <span class="number">89</span>);</span><br><span class="line">        treeMap.put(u4, <span class="number">30</span>);</span><br><span class="line">        treeMap.put(u5, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        Set set = treeMap.entrySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从小到大，年龄从小到大</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User u = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare =  <span class="keyword">this</span>.name.compareTo(((User) o).name); <span class="comment">//从大到小就加个负号</span></span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age, u.age);  <span class="comment">//integer的compare() 默认也是从小到大的</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Properties:HashTable的子类</span></span><br><span class="line"><span class="comment">处理配置文件，key value都是string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">        pros.load(fis);  <span class="comment">//加载流对应的文件</span></span><br><span class="line">        String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name+password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Collections工具类"><a href="#五、Collections工具类" class="headerlink" title="五、Collections工具类"></a>五、Collections工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collections工具类</span></span><br><span class="line"><span class="comment">可以操作List Set Map的实现类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">问题：Collection和Collections的区别</span></span><br><span class="line"><span class="comment">一个是接口，一个是工具类。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Colletions</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作， 还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">排序操作：（均为static方法）</span></span><br><span class="line"><span class="comment">reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line"><span class="comment">shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line"><span class="comment">sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"><span class="comment">swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">查找、替换</span></span><br><span class="line"><span class="comment">Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object min(Collection)</span></span><br><span class="line"><span class="comment">Object min(Collection，Comparator)</span></span><br><span class="line"><span class="comment">int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="comment">void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"><span class="comment">boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">线程安全</span></span><br><span class="line"><span class="comment">synchronizedXxx()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//排序操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">47</span>);</span><br><span class="line">    list.add(-<span class="number">13</span>);</span><br><span class="line">    list.add(<span class="number">54</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">    Collections.sort(list);   <span class="comment">//按照Integer的compare()排序</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//void swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line">    Collections.swap(list, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">47</span>);</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">54</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line"><span class="comment">//    查找、替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素，排序中最右边的就是最大的 要求是同一个类的元素</span></span><br><span class="line">    Comparable max = Collections.max(list);</span><br><span class="line">    System.out.println(max);</span><br><span class="line"><span class="comment">//    Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">//    Object min(Collection)</span></span><br><span class="line"><span class="comment">//    Object min(Collection，Comparator)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">    <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">231</span>);</span><br><span class="line">    System.out.println(frequency);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制</span></span><br><span class="line"><span class="comment">//    void copy(List dest,List src)：将src中的内容复制到dest中  src是source，dest是新的list</span></span><br><span class="line">    <span class="comment">//正确写法</span></span><br><span class="line">    List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);  <span class="comment">//数组转成list</span></span><br><span class="line">    Collections.copy(dest, list);</span><br><span class="line">    System.out.println(dest);</span><br><span class="line"><span class="comment">//    Collections.copy(list1, list);  //要求dest.size()和source.size()要相同 这种写法会报异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; list1 = Collections.synchronizedList(list);  <span class="comment">//返回的list就是线程安全的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：集合
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-多线程</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-multithread.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-multithread.html</id>
    <published>2020-06-25T12:24:46.000Z</published>
    <updated>2020-06-30T01:07:39.710Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/25/aVB97SkPCuYIWpy.png" alt="多线程"></p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多线程</span></span><br><span class="line"><span class="comment">1.程序、进程、线程</span></span><br><span class="line"><span class="comment">程序program是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程process程序的一次执行过程，正在运行的一个程序，作为资源分配的单位。有产生存在和消亡的过程-生命周期，</span></span><br><span class="line"><span class="comment">系统在运行时会为每个进程分配不同的内存区域。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">线程thread  进程进一步细化为线程，程序内部的一条执行路径。作为调度和执行的单位，每个线程拥有独立的运行栈</span></span><br><span class="line"><span class="comment">和程序计数器pc，但是共享堆和方法区。进程间的通信更加简便高效。所以就有线程安全的问题。</span></span><br><span class="line"><span class="comment">一个java至少有三个线程  main()主线程 gc()垃圾回收线程 异常处理线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">单核和多核CPU  服务器都是多核的</span></span><br><span class="line"><span class="comment">并行和并发 多个CPU同时执行多个任务/一个CPU(时间片)同时执行多个任务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多线程的优点</span></span><br><span class="line"><span class="comment">场景：需要同时执行两个或多个任务</span></span><br><span class="line"><span class="comment">程序需要实现一些需要等待的任务。如用户输入 文件读写操作 网络操作 搜索</span></span><br><span class="line"><span class="comment">需要一些后台运行的程序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">守护线程/用户线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-lifecycle"><a href="#thread-lifecycle" class="headerlink" title="thread lifecycle"></a>thread lifecycle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的生命周期</span></span><br><span class="line"><span class="comment">新建: new了对象</span></span><br><span class="line"><span class="comment">就绪：调用start()  等待cpu分配资源</span></span><br><span class="line"><span class="comment">运行：cpu切换线程，又会失去执行权，或者调用yield(),不同于阻塞</span></span><br><span class="line"><span class="comment">阻塞：join()  sleep(long millis) 等待同步锁 wait() suspend()(deprecated,会导致死锁)</span></span><br><span class="line"><span class="comment">     sleep()时间到，join()的线程结束，获取同步锁，notify() notifyAll() resume()(搭配suspend,deprecated）  回到就    绪，再等待CPU分配执行权</span></span><br><span class="line"><span class="comment">死亡：执行完run()   stop()  出现error/exception且没处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-scheduling-amp-priority"><a href="#thread-scheduling-amp-priority" class="headerlink" title="thread scheduling &amp;priority"></a>thread scheduling &amp;priority</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的调度</span></span><br><span class="line"><span class="comment">同优先级线程组成先进先出队列，使用时间片策略</span></span><br><span class="line"><span class="comment">高优先级的，使用优先调度的抢占式策略</span></span><br><span class="line"><span class="comment">但只是从概率上来说，高优先级的线程会被先执行，并不意味着一定先执行高优先级的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">优先级等级</span></span><br><span class="line"><span class="comment">可以设置10档</span></span><br><span class="line"><span class="comment">MAX_PRIORITY:10</span></span><br><span class="line"><span class="comment">MIN_PRIORITY:1</span></span><br><span class="line"><span class="comment">NORM_PRIORITY:5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">涉及的方法：获取和设置</span></span><br><span class="line"><span class="comment">getPriority()</span></span><br><span class="line"><span class="comment">setPriority(int newPriority)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadScheduling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread3 t = <span class="keyword">new</span> MyThread3();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">                Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName()+<span class="string">":"</span>+i);</span><br><span class="line">                setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thread类常见方法"><a href="#Thread类常见方法" class="headerlink" title="Thread类常见方法"></a>Thread类常见方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread类的常用方法</span></span><br><span class="line"><span class="comment">1.start()：启动当前线程 调用当前线程的run()</span></span><br><span class="line"><span class="comment">2.run()：通常需要重写此方法，在创建的线程中需要执行的代码</span></span><br><span class="line"><span class="comment">3.currentThread()：静态方法 返回当前代码执行的线程</span></span><br><span class="line"><span class="comment">4.getName(): 获取当前线程的名字</span></span><br><span class="line"><span class="comment">5.setName(): 设置当前线程的名字  构造器，通过currentThread()或者new对象调用setName()</span></span><br><span class="line"><span class="comment">6.yield(): 释放当前CPU的执行权，但是也可能被CPU继续分配  线程让步</span></span><br><span class="line"><span class="comment">7.join(): 在线程A中调用另外一个线程的join(),线程A进入阻塞状态。等另一个线程执行完了，线程A结束阻塞，再执行A线程</span></span><br><span class="line"><span class="comment">8.stop()：强制结束线程生命期 不推荐使用   //deprecated</span></span><br><span class="line"><span class="comment">9.sleep(long millis): 阻塞millis毫秒  静态方法，可以直接调用。让当前线程睡眠指定的millis毫秒</span></span><br><span class="line"><span class="comment">10.isAlive(): 判断线程是否存活</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread1 t1 = <span class="keyword">new</span> MyThread1(<span class="string">"进程一"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"main线程"</span>);   <span class="comment">//静态方法 currentThread返回当前的Thread</span></span><br><span class="line">        System.out.println(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        System.out.println(t1.getName());</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t1.isAlive());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                this.yield(); //释放内存的执行权</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(isAlive());</span><br><span class="line">        <span class="comment">//Thread.currentThread().setName("线程1");//可以设置线程的名字</span></span><br><span class="line">        <span class="comment">// System.out.println(Thread.currentThread().getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(String name)</span></span>&#123;  <span class="comment">//通过构造器来给thread命名</span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="二、创建多线程"><a href="#二、创建多线程" class="headerlink" title="二、创建多线程"></a>二、创建多线程</h2><h3 id="BEFOR-JDK5-0"><a href="#BEFOR-JDK5-0" class="headerlink" title="BEFOR JDK5.0"></a>BEFOR JDK5.0</h3><h4 id="1-extends-Thread"><a href="#1-extends-Thread" class="headerlink" title="1. extends Thread"></a>1. extends Thread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.landfill.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">多线程的创建</span><br><span class="line">方式一：继承于Thread类</span><br><span class="line">1.创建一个继承于Thread类的子类</span><br><span class="line">2.重写Thread类的run() 将此线程执行的操作声明在run()中</span><br><span class="line">3.创建子类的对象</span><br><span class="line">4.通过此对象调用start()</span><br><span class="line">&#x2F;&#x2F;注意：</span><br><span class="line">start启动了线程并且去调用run(),不能使用对象直接调用run()</span><br><span class="line">不能再start()来创建一个线程，需要重新创建一个对象。</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ThreadTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyThread t1 &#x3D; new MyThread(); &#x2F;&#x2F;3.创建子类的对象</span><br><span class="line">        t1.start();         &#x2F;&#x2F;4.通过此对象调用start()  作用：①启动当前线程，②调用当前线程的run方法</span><br><span class="line">       &#x2F;&#x2F; t1.run(); 无法启动线程，仍然是在主线程的中进行的。</span><br><span class="line">       &#x2F;&#x2F;以下操作仍然是在main线程执行的</span><br><span class="line">        for(int i &#x3D; 0;i&lt;100;i++)&#123;</span><br><span class="line">            if(i%2!&#x3D;0)&#123;</span><br><span class="line">                System.out.println(&quot;hello------------------------------&quot;);</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;通过再 new一个线程的对象来调用start</span><br><span class="line">        MyThread t2 &#x3D; new MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class MyThread  extends Thread&#123; &#x2F;&#x2F;1.创建一个继承于Thread类的子类</span><br><span class="line">    @Override               &#x2F;&#x2F;2.重写Thread类的run() 将此线程执行的操作声明在run()中</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i &#x3D; 0;i&lt;100;i++)&#123;</span><br><span class="line">            if(i%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-implements-Runnable"><a href="#2-implements-Runnable" class="headerlink" title="2. implements Runnable"></a>2. implements Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread的创建方式二：实现runnable接口</span></span><br><span class="line"><span class="comment">1.创建Runnable接口的实现类</span></span><br><span class="line"><span class="comment">2.实现类去实现抽象方法 run();</span></span><br><span class="line"><span class="comment">3.创建实现类的对象</span></span><br><span class="line"><span class="comment">4.将此对象作为参数传到Thread类的构造器，创建Thread类的对象</span></span><br><span class="line"><span class="comment">5.Thread类 调用start()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">两种方法都得使用Thread类的start()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较两种方式：  继承Thread类 vs 实现Runnable</span></span><br><span class="line"><span class="comment">1.继承Thread类，存在单继承的限制，如果已经有其他声明的父类，则不能使用了</span></span><br><span class="line"><span class="comment">2.实现Runnable 可以只创建一个对象，把共享数据封装到实现类里，多个线程共享数据,还可以实现多个接口，没有单继承的限制</span></span><br><span class="line"><span class="comment">所以开发中一般优先用实现Runnable接口,而且从源码可以看到 Thread类实际上就是实现了Runnable接口,何必多绕一步？</span></span><br><span class="line"><span class="comment">两种方式都要重写run() 将线程要执行的代码放入方法体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread4 target = <span class="keyword">new</span> MyThread4();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//调用当前线程的run()--&gt;调用了Runnable类型的target的run(),其中target就是传入的参数，</span></span><br><span class="line">        <span class="comment">// 所以也就是调用了实现类重写的run()</span></span><br><span class="line">        <span class="comment">//new Thread(t4).start()</span></span><br><span class="line">        <span class="comment">//再启动一个线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target);<span class="comment">//可以共用同一个实现类的对象，反正run()是一样的</span></span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);<span class="comment">//不能直接getName了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sad"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>difference between extends Thread&amp;implements Runnable</strong></p><h3 id="AFTER-JDK5-0"><a href="#AFTER-JDK5-0" class="headerlink" title="AFTER JDK5.0"></a>AFTER JDK5.0</h3><h4 id="3-implements-Callable"><a href="#3-implements-Callable" class="headerlink" title="3. implements Callable"></a>3. implements Callable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建线程的方式三：实现Callable接口   ARTER JKD5.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Callable接口创建线程比Runnable更强</span></span><br><span class="line"><span class="comment">可以有返回值</span></span><br><span class="line"><span class="comment">可以抛出异常，可以被外面的操作捕获，获取异常的信息</span></span><br><span class="line"><span class="comment">支持泛型的返回值</span></span><br><span class="line"><span class="comment">需要借助FutureTask类，比如获取返回结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">//1.实现Callable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，写入此线程要执行的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">101</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line"></span><br><span class="line">                sum+= i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable实现类的对象</span></span><br><span class="line">        NumThread t = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将Callable实现类的对象作为参数传入，创建 FutureTask对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(t);</span><br><span class="line">        <span class="comment">//5.将FutureTask对象传入，创建Thread对象，调用Start方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();   <span class="comment">//FutureTask类同时实现了Callable和Runnable，</span></span><br><span class="line">        <span class="comment">// 这里new Thread要求的返回值的形参是Runnable类型的，所以用FutureTask</span></span><br><span class="line">        <span class="comment">//6.如果需要返回值，通过FutureTask调用get()获得 实现的call()返回的对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()返回值。如果不需要返回值</span></span><br><span class="line">            <span class="comment">//可以不写下面的方法</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为"</span>+sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="4-Thread-Pool"><a href="#4-Thread-Pool" class="headerlink" title="4. Thread Pool"></a>4. Thread Pool</h4><p>​            ExecutorSercice API相关功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建线程的方式四：线程池  AFTER JDK5.0</span></span><br><span class="line"><span class="comment">开发中都是用线程池，手动的造线程效率差，和后面的数据库连接池是一个道理,很多时候是用框架实现的，不一定是手写的</span></span><br><span class="line"><span class="comment">1.问题：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</span></span><br><span class="line"><span class="comment">2.思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。</span></span><br><span class="line"><span class="comment">3.好处：</span></span><br><span class="line"><span class="comment">    3.1 提高响应的速度：减少了创建线程的时间</span></span><br><span class="line"><span class="comment">    3.2 降低资源的消耗：重复利用线程池中线程  不需要每次都创建</span></span><br><span class="line"><span class="comment">    3.3 便于线程的管理</span></span><br><span class="line"><span class="comment">        - corePoolSize:核心池的大小</span></span><br><span class="line"><span class="comment">        - maximumPoolSize：最大线程数</span></span><br><span class="line"><span class="comment">        - keepAliveTime:线程没有任务时最多保持多长时间后会终止</span></span><br><span class="line"><span class="comment">创建多线程有几种方式：四种 继承Thread  实现Runnable 实现Callable  创建线程池。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number1Thread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">                sum +=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建指定数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ExecutorService是接口，Executors是该接口的工具类，工厂类</span></span><br><span class="line">        ThreadPoolExecutor service1  = (ThreadPoolExecutor) service;  <span class="comment">//返回的实际是ThreadPoolExecutor的对象，可以向下转型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line">        System.out.println(service.getClass());</span><br><span class="line">        service1.setCorePoolSize(<span class="number">12</span>);<span class="comment">//就可以调用相关的方法去设置线程池的属性，管理线程</span></span><br><span class="line">       <span class="comment">// service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.传入相应的对象，执行指定线程的操作</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());   <span class="comment">//适合用Runnable</span></span><br><span class="line"><span class="comment">//        Number1Thread number1Thread = new Number1Thread();</span></span><br><span class="line"><span class="comment">//        FutureTask futureTask = new FutureTask(number1Thread);  // FutureTask来获取返回值</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Object sum = futureTask.get();</span></span><br><span class="line"><span class="comment">//            System.out.println("总和为"+sum);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ExecutionException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        service.submit(number1Thread);  //适合用Callable，</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、线程安全"><a href="#三、线程安全" class="headerlink" title="三、线程安全"></a>三、线程安全</h2><h3 id="sychronized"><a href="#sychronized" class="headerlink" title="sychronized"></a>sychronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的同步</span></span><br><span class="line"><span class="comment">1.线程安全问题：重票和错票</span></span><br><span class="line"><span class="comment">2.出现原因：当某个线程操作车票的过程中，尚未完成操作，其他线程就进来了，也操作车票</span></span><br><span class="line"><span class="comment">3.解决方法：当一个线程A操作共享数据时，其他线程不能参与进来，知道线程A操作完，其他线程才可以进来，即使线程A出现阻塞也不能改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.在Java中，通过同步机制来解决线程安全问题</span></span><br><span class="line"><span class="comment">    方式一：同步代码块</span></span><br><span class="line"><span class="comment">    synchronized(同步监视器)&#123;</span></span><br><span class="line"><span class="comment">        //需要被同步的代码</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     说明: 1.操作共享数据的代码，即为需要被同步的代码   --&gt;不能包含过多也不能过少，就变成单线程了</span></span><br><span class="line"><span class="comment">           2.共享数据 多个线程共同操作的变量</span></span><br><span class="line"><span class="comment">           3.同步监视器：锁 任何一个类的对象都可以充当锁，随便new一个object //为什么？</span></span><br><span class="line"><span class="comment">                要求：多个线程必须要共用同一把锁。都是同一个对象</span></span><br><span class="line"><span class="comment">                补充：实现Runnable接口创建的多线程中可以考虑使用this充当锁</span></span><br><span class="line"><span class="comment">                      在继承Thread创建多线程的方式中，慎用this，可以考虑使用当前类充当同步锁 类名.class</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    方式二：同步方法</span></span><br><span class="line"><span class="comment">        如果操作共享数据的代码完整地声明在一个方法中，将方法声明为同步的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        关于同步方法的总结</span></span><br><span class="line"><span class="comment">        同步方法仍然涉及到同步监视器，只是不需要声明</span></span><br><span class="line"><span class="comment">        - 非静态的同步方法，同步监视器是this</span></span><br><span class="line"><span class="comment">        - 静态的同步方法，同步监视器是static</span></span><br><span class="line"><span class="comment">5.同步的方式：线程安全问题解决了；但操作同步代码时，只能有一个线程参与，其他线程等待，相当于是一个单线程的过程，效率低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSynchronized</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-sychronized-block"><a href="#1-sychronized-block" class="headerlink" title="1. sychronized block"></a>1. sychronized block</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"><span class="comment">//synchronize的使用 ：同步代码块  synchronize(同步监视器）&#123;重复执行的方法&#125;</span></span><br><span class="line"><span class="comment">//创建线程的方式之二：实现Runnable接口 卖票</span></span><br><span class="line"><span class="comment">//区别于继承Thread类，只用new一个实现类的对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowRunnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">100</span>; <span class="comment">//此时可以不用static，声明在实现类里的属性。因为只有一个对象，作为参数传递给了三个线程，所以还是只有一个属性,可以放在实现类里</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        window1 w1 = <span class="keyword">new</span> window1();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">   <span class="comment">//不用写三个类，同一个类new三个线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"线程3"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (WindowRunnable.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//this是唯一的对象，只有用于实现Runnable接口的方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    WindowRunnable.total--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":剩余"</span> + WindowRunnable.total + <span class="string">"张票"</span> + <span class="string">" 你的票号为："</span> +</span><br><span class="line">                            (WindowRunnable.total + <span class="number">1</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-sychronized-method"><a href="#2-sychronized-method" class="headerlink" title="2 .sychronized method"></a>2 .sychronized method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用同步方法解决实现Runnable接口的线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowImpleMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3= <span class="keyword">new</span> Thread(w);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"线程3"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(WindowTest.TOTAL_TICKETS&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;  <span class="comment">//同步监视器是this</span></span><br><span class="line">        <span class="keyword">if</span> (WindowTest.TOTAL_TICKETS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            WindowTest.TOTAL_TICKETS--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" left:"</span> + WindowTest.TOTAL_TICKETS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread类继承创建的线程 使用同步方法解决线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowExtMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        windows2 w1 = <span class="keyword">new</span> windows2();</span><br><span class="line">        windows2 w2 = <span class="keyword">new</span> windows2();</span><br><span class="line">        windows2 w3 = <span class="keyword">new</span> windows2();</span><br><span class="line">        w3.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">windows2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// private static  void show()&#123;  //锁的问题，同步监视器有三个了</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;   <span class="comment">//this是当前的类</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);  <span class="comment">//父类的静态方法，可以直接调用</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticket--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" left:"</span> + ticket);</span><br><span class="line">            <span class="comment">//静态方法内部不用直接调用动态方法，需通过 对象.方法 的方式来调用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例模式懒汉式改写成线程安全的"><a href="#单例模式懒汉式改写成线程安全的" class="headerlink" title="单例模式懒汉式改写成线程安全的"></a>单例模式懒汉式改写成线程安全的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用同步机制将单例模式中的懒汉式改写为线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank bank = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Bank <span class="title">getBank</span><span class="params">()</span></span>&#123;  <span class="comment">//可能几个线程来同时调用，就会存在线程安全问题,静态同步方法的锁是类本身</span></span><br><span class="line">        <span class="comment">//方式一：同步代码块，效率差，每次都会进去判断，和直接用同步方法一样，效率低</span></span><br><span class="line"><span class="comment">//        synchronized(Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if (bank == null) &#123;</span></span><br><span class="line"><span class="comment">//                bank = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return bank;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(bank == <span class="keyword">null</span>)&#123;     <span class="comment">//后面的大部分线程就不进去了  效率更高</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (bank == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bank = <span class="keyword">new</span> Bank();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> bank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock-AFTER-JDK5-0"><a href="#ReentrantLock-AFTER-JDK5-0" class="headerlink" title="ReentrantLock(AFTER JDK5.0)"></a>ReentrantLock(AFTER JDK5.0)</h3><h4 id="3-lock-unlock"><a href="#3-lock-unlock" class="headerlink" title="3. lock/unlock"></a>3. lock/unlock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决线程安全问题的方式三：Lock锁   --AFTER JDK5.0</span></span><br><span class="line"><span class="comment">synchronized 和 lock的异同？</span></span><br><span class="line"><span class="comment">相同：都可以解决线程安全的问题</span></span><br><span class="line"><span class="comment">不同：synchronized 等执行完代码块或者同步方法，再自动释放同步监视器</span></span><br><span class="line"><span class="comment">      lock需要手动的启动同步，手动的结束同步 unlock</span></span><br><span class="line"><span class="comment">ReentrantLock是Lock接口的实现类，扩展性更好，更多子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">建议优先度：lock  同步代码块（已经进入方法体） 同步方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化reentrantlock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);   <span class="comment">//fair 先进先出</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               lock.lock();         <span class="comment">//使用try-catch结构，加锁</span></span><br><span class="line">               <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">                   System.out.println(Thread.currentThread().getName()+<span class="string">"票号为："</span>+tickets);</span><br><span class="line">                   tickets--;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();       <span class="comment">//解锁</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        difference between ReentrantLock&amp;sychronized</p><h3 id="线程同步问题DeadLock"><a href="#线程同步问题DeadLock" class="headerlink" title="线程同步问题DeadLock"></a>线程同步问题DeadLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的死锁问题</span></span><br><span class="line"><span class="comment">定义：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成的线程的死锁</span></span><br><span class="line"><span class="comment">出现死锁后不会出现异常，不会提示，只是所有线程都处于阻塞状态，无法继续，使用时要避免死锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决方法</span></span><br><span class="line"><span class="comment">1.专门的算法、原则</span></span><br><span class="line"><span class="comment">2.尽量减少使用同步资源</span></span><br><span class="line"><span class="comment">3.避免嵌套同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">"a"</span>);</span><br><span class="line">                    s2.append(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                        s1.append(<span class="string">"b"</span>);</span><br><span class="line">                        s2.append(<span class="string">"2"</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">"c"</span>);</span><br><span class="line">                    s2.append(<span class="string">"3"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                        s1.append(<span class="string">"d"</span>);</span><br><span class="line">                        s2.append(<span class="string">"4"</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123;  <span class="comment">//锁 A类的对象 a</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了A实例的foo方法"</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用B实例的last方法"</span>); <span class="comment">// ③</span></span><br><span class="line">b.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;    <span class="comment">//同步监视器 a</span></span><br><span class="line">System.out.println(<span class="string">"进入了A类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;  <span class="comment">//同步监视器 b</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了B实例的bar方法"</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用A实例的last方法"</span>); <span class="comment">// ④</span></span><br><span class="line">a.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;   <span class="comment">//同步监视器 对象b</span></span><br><span class="line">System.out.println(<span class="string">"进入了B类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"><span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">a.foo(b);</span><br><span class="line">System.out.println(<span class="string">"进入了主线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"副线程"</span>);</span><br><span class="line"><span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">b.bar(a);</span><br><span class="line">System.out.println(<span class="string">"进入了副线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock1 dl = <span class="keyword">new</span> DeadLock1();</span><br><span class="line"><span class="keyword">new</span> Thread(dl).start();</span><br><span class="line">dl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="四、线程通信"><a href="#四、线程通信" class="headerlink" title="四、线程通信"></a>四、线程通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程通信</span></span><br><span class="line"><span class="comment">两个线程交替打印1-100。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">涉及的三个方法</span></span><br><span class="line"><span class="comment">wait(): 一旦执行此方法，线程阻塞，释放同步监视器</span></span><br><span class="line"><span class="comment">notifyAll()：一旦执行此方法，唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment">notify();只唤醒一个线程，如果有多个wait的线程，就唤醒优先级高的线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.使用前提：只能在同步方法和同步代码块中的调用，使用ReentrantLock以另外的方式通信</span></span><br><span class="line"><span class="comment">2.三个方法的调用者必须是同步方法和同步代码块中的同步监视器，否则会报错</span></span><br><span class="line"><span class="comment">//java.lang.IllegalMonitorStateException，this和同步监视器不一样的话会报错</span></span><br><span class="line"><span class="comment">在类中调用方法的时候，非静态方法，省略了“this，” 静态方法省略了 “类.”</span></span><br><span class="line"><span class="comment">3.因为任何一个类的对象都可以充当同步监视器，所以任何一个对象都得有这三个方法，所以这三个方法时定义在java.lang.Object类中的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.比较：sleep()和wait()的异同</span></span><br><span class="line"><span class="comment">  相同：当前线程都会进入阻塞状态</span></span><br><span class="line"><span class="comment">  不同：在都用在同步代码块和同步方法中的时候，sleep()不会释放锁，wait()会释放锁</span></span><br><span class="line"><span class="comment">         sleep()声明在Thread且是静态的，wait()声明在Object类</span></span><br><span class="line"><span class="comment">         sleep()可以在任何需要的场景下调用，wait()必须使用在同步代码块和同步方法中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notifyAll();   <span class="comment">//notifyAll()唤醒所有线程，按优先级</span></span><br><span class="line">                <span class="comment">//java.lang.IllegalMonitorStateException</span></span><br><span class="line">                <span class="keyword">if</span>(num&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">10</span>);    <span class="comment">//不释放锁，不同于wait</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+num);</span><br><span class="line">                    num++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();                          <span class="comment">//使得调用该方法的线程进入阻塞状态，一旦执行wait() 会释放锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadComumnication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number num = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(num);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(num);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="producer-consumer-problem"><a href="#producer-consumer-problem" class="headerlink" title="producer-consumer problem"></a>producer-consumer problem</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程通信的应用： Producer-Consumer problem(Bounded-buffer problem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：生产者线程  消费者线程</span></span><br><span class="line"><span class="comment">共享数据：clerk</span></span><br><span class="line"><span class="comment">解决线程安全问题：同步机制</span></span><br><span class="line"><span class="comment">涉及线程的通信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//成产</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">procudeProcuct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">20</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":生产产品"</span>+num);</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProcuct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":消费产品"</span>+num);</span><br><span class="line">            num--;</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":开始成产产品"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            clerk.procudeProcuct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":开始消费产品"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            clerk.consumeProcuct();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk c = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(c);</span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(c);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(p1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(c1);</span><br><span class="line">        t1.setName(<span class="string">"生产者"</span>);</span><br><span class="line">        t2.setName(<span class="string">"消费者"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：多线程
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑Hexo博客迁移</title>
    <link href="https://paranoiddemon.github.io/blog/posts/HexoSync.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/HexoSync.html</id>
    <published>2020-06-20T16:22:46.000Z</published>
    <updated>2020-07-05T14:24:08.560Z</updated>
    
    <content type="html"><![CDATA[<p><strong>上传电脑中博客的源文件</strong></p><p>1.生成的静态网页(.deploy_git)放在master分支在paranoiddeon.github.io 新建hexo分支存放博客源文件(除.deploy_git外的文件)，在该仓库的setting&gt;branch&gt;default branch设为hexo。在本地任意目录打开git bash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>2.在克隆到本地的paranoiddeon.github.io中，把除了.git 文件夹外的所有文件都删掉。把之前博客文件夹中除了.deploy_git的文件全部复制到paranoiddeon.github.io中，删除theme文件夹中可能存在的.git 文件夹，避免嵌套上传失败。之后把博客的源文件上传到hexo分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>3.因为之前博客使用的主题是从第三方仓库clone的，在执行git add .的时候出现了”fatal: in unpopulated submodule maupassuant” 错误，导致主题文件夹没有被上传，所以需要删除再重新add该目录，在theme目录中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf --cached maupassuant  &#x2F;&#x2F;删除文件夹</span><br><span class="line">git add maupassuant</span><br></pre></td></tr></table></figure><p><strong>在新电脑(Windows)重新搭建环境</strong></p><p>1.<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载安装Git</a></p><p>2.设置git全局邮箱和用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><p>3.设置ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? </span><br><span class="line">#输入yes 生成后填到github 在提示的文件目录复制id_rsa.pub 添加到github（settings&gt;SSH keys)</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>4.<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装nodejs</a><br>5.安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>6.在新电脑clone博客源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>7.安装hexo-deployer-git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd paranoiddeon.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">&#x2F;&#x2F;用于将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，</span><br><span class="line">&#x2F;&#x2F;并且完全覆盖该分支下的已有内容。</span><br></pre></td></tr></table></figure><p>8.生成部署博客网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果在多台电脑上同步博客，写完上传到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .  &#x2F;&#x2F;所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)</span><br><span class="line">git commit –m &quot;xxxx&quot; &#x2F;&#x2F;将暂存区里的改动给提交到本地的版本库。</span><br><span class="line">git push  &#x2F;&#x2F;将本地版本库的分支推送到远程服务器上对应的分支</span><br></pre></td></tr></table></figure><p>在另一台电脑pull</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull&#x2F;&#x2F;取回远程主机某个分支的更新，再与本地的指定分支合并</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      hexo博客迁移
    
    </summary>
    
    
      <category term="其他" scheme="https://paranoiddemon.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="blog" scheme="https://paranoiddemon.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>GOG连接PSN超时解决方法</title>
    <link href="https://paranoiddemon.github.io/blog/posts/psn-gog-connection.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/psn-gog-connection.html</id>
    <published>2020-06-17T09:24:46.000Z</published>
    <updated>2020-06-30T01:08:53.585Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关闭两步验证，获取 “sso cookie”</strong></p><p>turn off 2-step verification first<br>log in to PSN (store.playstation.com) through your browser<br>after the login open this link: <a href="https://ca.account.sony.com/api/v1/ssocookie" target="_blank" rel="noopener">https://ca.account.sony.com/api/v1/ssocookie</a><br>Copy content of “npsso”</p><p><strong>修改代码，本地验证</strong><br>open windows explorer and enter the following into the address bar at the top and press enter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%LocalAppData%\GOG.com\Galaxy\plugins\installed\</span><br></pre></td></tr></table></figure><p>open the psn_{random number} folder and edit the plugin.py file with your favourite text editor<br>go to line 64 and change it from:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = stored_credentials.get(<span class="string">"npsso"</span>) <span class="keyword">if</span> stored_credentials <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = <span class="string">"Copied value of npsso"</span></span><br></pre></td></tr></table></figure><p>(“copied value of npsso” should be a 64 character long text consisting of numbers, lower case letters and upper case letters)   (the quotation marks “ “ are important!)<br>In addition to totally REPLACING the line 64, delete lines 65 and 66<br>the line 64 has to start after 8 blank SPACES (do not use tabs)</p><p><strong>重启gog再连接</strong><br>restart GOG Galaxy<br>try connecting with PSN again </p>]]></content>
    
    <summary type="html">
    
      Playstation connection timed out问题解决，领取PC版巫师3
    
    </summary>
    
    
      <category term="其他" scheme="https://paranoiddemon.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-面向对象</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-oop.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-oop.html</id>
    <published>2020-06-16T16:24:46.000Z</published>
    <updated>2020-06-30T01:12:02.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-面向对象"><a href="#4-面向对象" class="headerlink" title="4. 面向对象"></a>4. 面向对象</h2><h3 id="4-1-面向对象编程"><a href="#4-1-面向对象编程" class="headerlink" title="4.1 面向对象编程"></a>4.1 面向对象编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Object Oriented Programing vs Procedure Oriented Programing</span><br><span class="line"> <span class="number">1</span>.Java类及类的成员：属性，方法，构造器；代码块，内部类</span><br><span class="line"> <span class="number">2</span>.面向对象的三大特征：封装性、继承性、多态性（抽象性）</span><br><span class="line"> <span class="number">3</span>.其他关键字:<span class="keyword">this</span> <span class="keyword">super</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">package</span> <span class="title">import</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> <span class="title">POP</span>与<span class="title">OOP</span></span></span><br><span class="line"><span class="class"> 面向过程：强调功能行为，以函数为最小单位，考虑怎么做</span></span><br><span class="line"><span class="class"> 面向对象：强调具备功能的对象，以类/对象为最小单位，考虑谁来做</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> 人</span>&#123;  </span><br><span class="line">     打开冰箱&#123;</span><br><span class="line">     冰箱.打开()</span><br><span class="line">     &#125;</span><br><span class="line">     抬起(大象)&#123;</span><br><span class="line">     大象.进入(冰箱);</span><br><span class="line">     &#125;</span><br><span class="line">     关闭(冰箱)&#123;</span><br><span class="line">     冰箱.闭合();</span><br><span class="line">  &#125;</span><br><span class="line">---------------------------     </span><br><span class="line"> 冰箱&#123;</span><br><span class="line"> 打开()&#123;&#125;</span><br><span class="line"> 闭合()&#123;&#125;</span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line">---------------------------</span><br><span class="line"> 大象&#123;</span><br><span class="line"> 进入(冰箱)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> 类：抽象</span><br><span class="line"> 实例化为对象</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">4.2</span> Java语言的基本元素：类和对象</span><br><span class="line">类：对一类实物的描述，抽象的、概念上的定义</span><br><span class="line">对象：实际存在的该类实物的每个个体，实例instance</span><br><span class="line"></span><br><span class="line">面向对象程序设计的重点是类的设计，其实就是类的成员的设计</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="4-2-类和对象"><a href="#4-2-类和对象" class="headerlink" title="4.2 类和对象"></a>4.2 类和对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、设计类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 创建类的对象的类的实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">二、类和对象的的使用（面向对象思想落地的实现）</span></span><br><span class="line"><span class="comment"> 1.创建类，设计类的成员；最花时间</span></span><br><span class="line"><span class="comment"> 2.创建类的对象</span></span><br><span class="line"><span class="comment"> 3.通过“对象.属性” “对象.方法”调用对的结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、创建了一个类的多个对象，每个对象都拥有一套类的属性。（非static的）</span></span><br><span class="line"><span class="comment">修改一个对象的属性a，不影响其他对象的属性a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、对象的内存解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建person类的对象</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的结构：属性和方法</span></span><br><span class="line"><span class="comment">//调用属性：“对象.属性”</span></span><br><span class="line">p1.name = <span class="string">"TOM"</span>;</span><br><span class="line">System.out.println(p1.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法：“对象.方法”</span></span><br><span class="line">p1.eat();</span><br><span class="line">p1.sleep();</span><br><span class="line">p1.talk(<span class="string">"Chinese"</span>);</span><br><span class="line"></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//每一个对象都有一套属性</span></span><br><span class="line">System.out.println(p2.isMale);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Person p3 = p1;</span><br><span class="line">System.out.println(p3.name); <span class="comment">//TOM</span></span><br><span class="line">p3.age = <span class="number">10</span>;</span><br><span class="line">System.out.println(p1.age);<span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">Person p4 = <span class="keyword">new</span> Person();</span><br><span class="line">p4.isMale=<span class="keyword">true</span>;</span><br><span class="line">p4 = p3;   <span class="comment">//把p3的所有属性都给了p4</span></span><br><span class="line">System.out.println(p3.isMale);<span class="comment">//false</span></span><br><span class="line">System.out.println(p4.isMale);  <span class="comment">//false</span></span><br><span class="line">System.out.println(p4.name);    <span class="comment">//TOM</span></span><br><span class="line">System.out.println(p4.age);     <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 属性 = 成员变量 = field = 域 、字段</span></span><br><span class="line"><span class="comment">方法 = 成员方法 = 函数 = method  行为</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">( String language)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"speak "</span>+ language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line"><span class="comment">//内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//persontest类 调用person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.age = <span class="number">20</span>;</span><br><span class="line">p1.sex = <span class="number">0</span>;</span><br><span class="line">p1.name = <span class="string">"Alice"</span>;</span><br><span class="line"></span><br><span class="line">p1.study();</span><br><span class="line">p1.showAge();</span><br><span class="line">System.out.println(p1.addAge(<span class="number">2</span>));</span><br><span class="line">System.out.println(p1.age);<span class="comment">//22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sex:1 male</span></span><br><span class="line"><span class="comment"> * sex:0 female</span></span><br><span class="line"><span class="comment"> * 文档注释要写在上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"studying"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"age:"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">age+=i;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/17/MyqA1rlhC8VWzBt.jpg" alt="JVM内存结构"></p><p>Heap 堆： 存放对象实例、数组 （new的）</p><p>Stack 栈：虚拟机栈，存放局部变量（方法中的变量都是局部变量），各种基本数据类型，对象引用（reference类型，不同于对象本身，村的是对象在堆中的首地址），方法执行完自动释放</p><p>Method Area 方法区：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码</p><h3 id="4-3-类中属性的使用"><a href="#4-3-类中属性的使用" class="headerlink" title="4.3 类中属性的使用"></a>4.3 类中属性的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中属性的使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">属性（成员变量）vs 局部变量</span></span><br><span class="line"><span class="comment">- 相同点：</span></span><br><span class="line"><span class="comment">1.定义变量的格式：数据类型 变量名=变量值；</span></span><br><span class="line"><span class="comment">2.先声明后使用</span></span><br><span class="line"><span class="comment">3.变量都有其对应的作用域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 不同点：</span></span><br><span class="line"><span class="comment">1.在类中声明的位置不同</span></span><br><span class="line"><span class="comment">属性：直接定义在类的一对&#123;&#125;内</span></span><br><span class="line"><span class="comment">局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</span></span><br><span class="line"><span class="comment">2.关于权限修饰符的不同</span></span><br><span class="line"><span class="comment">属性：可以在声明属性是，指明其权限、使用权限修饰符</span></span><br><span class="line"><span class="comment">常用的权限修饰符：private public protected 却省  ---&gt;封装性</span></span><br><span class="line"><span class="comment">目前，暂时使用缺省</span></span><br><span class="line"><span class="comment">局部变量：不可以使用</span></span><br><span class="line"><span class="comment">3.默认初始化值的情况</span></span><br><span class="line"><span class="comment">属性：类的属性，根据其类型，都有默认初始化值</span></span><br><span class="line"><span class="comment">整形（byte short int long） 0</span></span><br><span class="line"><span class="comment">浮点型（float double）0.0</span></span><br><span class="line"><span class="comment">字符型（char）0 'u0000'</span></span><br><span class="line"><span class="comment">布尔型（boolean）false</span></span><br><span class="line"><span class="comment">引用数据类型（String、类、数组、接口）null</span></span><br><span class="line"><span class="comment">局部变量：没有初始化值，需要显式赋值</span></span><br><span class="line"><span class="comment">特别地：形参在调用时赋值</span></span><br><span class="line"><span class="comment">4.在内存中加载的位置不同</span></span><br><span class="line"><span class="comment">属性：加载到堆 （非static）</span></span><br><span class="line"><span class="comment">局部变量：加载到栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//属性（成员变量）</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;<span class="comment">//language:方法形参</span></span><br><span class="line">System.out.println(<span class="string">"speak "</span>+language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">String food = <span class="string">"egg"</span>; <span class="comment">//局部变量</span></span><br><span class="line">System.out.println(<span class="string">"eat"</span>+food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-类中方法的使用"><a href="#4-4-类中方法的使用" class="headerlink" title="4.4 类中方法的使用"></a>4.4 类中方法的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  方法：描述类应该具有的功能</span></span><br><span class="line"><span class="comment">  比如：Math类 sqrt() random()</span></span><br><span class="line"><span class="comment">       Scanner nextXxx()</span></span><br><span class="line"><span class="comment">       Arrays sort() binarySearch() toString() equals();</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  1.例子</span></span><br><span class="line"><span class="comment">  public void eat() &#123;&#125; //没有形参</span></span><br><span class="line"><span class="comment">  public void sleep(int hour) &#123;&#125;  //void 没有返回值</span></span><br><span class="line"><span class="comment">  public String getName() &#123;&#125; //返回值类型</span></span><br><span class="line"><span class="comment">  public String getNation(String nation) &#123;&#125; //有形参</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  2.方法的声明</span></span><br><span class="line"><span class="comment">  权限修饰符  返回值类型 方法名 形参列表()&#123;</span></span><br><span class="line"><span class="comment">  方法体</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  注意：static final abstrct 来修饰方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  3.说明</span></span><br><span class="line"><span class="comment">  3.1 权限修饰符 private public 缺省 protected  --&gt;封装性</span></span><br><span class="line"><span class="comment">  3.2 返回值类型 有返回值vs没有返回值</span></span><br><span class="line"><span class="comment">  - 如果方法有返回值，必须在方法声明时指定返回值的类型,方法中使用return关键字，返回指定类型常量或者变量</span></span><br><span class="line"><span class="comment">  - 没有返回值，使用void来表示，通常没有返回值的方法不适用return，但是要使用的话，只能return;表示结束</span></span><br><span class="line"><span class="comment">    return后不可声明执行语句</span></span><br><span class="line"><span class="comment">  - 该不该有返回值：</span></span><br><span class="line"><span class="comment">      题目要求、凭经验</span></span><br><span class="line"><span class="comment">  3.3 方法名：标识符，遵循规范 xxxYyy 见名知意</span></span><br><span class="line"><span class="comment">  3.4 形参列表 可以声明0 1 多个</span></span><br><span class="line"><span class="comment">           格式：数据类型1  形参1，数据类型2  形参2...</span></span><br><span class="line"><span class="comment">           该不该定义形参</span></span><br><span class="line"><span class="comment">  3.5 方法体</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  4.return关键字的使用：</span></span><br><span class="line"><span class="comment">  4.1.使用在方法体中</span></span><br><span class="line"><span class="comment">  4.2.作用：结束方法；有返回值的方法，使用return 数据 返回方法所要的数据</span></span><br><span class="line"><span class="comment">  4.3.return后不可以声明执行语句</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  5.方法的使用中，可以调用当前类的属性、方法</span></span><br><span class="line"><span class="comment">  特殊的：方法A中调用方法A 递归方法</span></span><br><span class="line"><span class="comment">  随意递归会导致：StackOverFlow 栈溢出</span></span><br><span class="line"><span class="comment">  方法中不能定义方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  //开发中一般一个源文件只写一个class</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer cust1 = <span class="keyword">new</span> Customer();</span><br><span class="line">cust1.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep for "</span>+hour+<span class="string">" hours"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">String info = <span class="string">"come from "</span> +nation;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">students</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String major;</span><br><span class="line">String interests;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String info = name + age + major + interests;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用面向对象的方法；设计类circle计算圆的面积</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Circle areaCal = <span class="keyword">new</span> Circle();</span><br><span class="line">areaCal.radius = <span class="number">2.1</span>;</span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double c1 = areaCal.circleArea();</span></span><br><span class="line"><span class="comment">//System.out.println(c1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line">areaCal.circleArea();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double radius;</span></span><br><span class="line"><span class="comment">//public double circleArea() &#123;</span></span><br><span class="line"><span class="comment">//double area = radius*radius*Math.PI ;</span></span><br><span class="line"><span class="comment">//return area;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">circleArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI ;</span><br><span class="line">System.out.println(<span class="string">"area is "</span>+ area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误情况:半径作为属性定义更好，而不是放在形参里</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">circleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = r*r*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：设计类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.1 编写程序，声明一个method方法，在方法中打印一个10*8 的*型矩形， 在main方法中调用该方法。</span></span><br><span class="line"><span class="comment">3.2 修改上一个程序，在method方法中，除打印一个10*8的*型矩形外，再 计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法， 接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment">3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个 m*n的*型矩形，并计算该矩形的面积， 将其作为方法返回值。在main方法 中调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exer3Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Print star = <span class="keyword">new</span> Print();</span><br><span class="line">star.length = <span class="number">10</span>;</span><br><span class="line">star.width = <span class="number">8</span>;</span><br><span class="line">star.recPrt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> area = star.recArea();</span><br><span class="line">System.out.println(<span class="string">"面积为："</span>+area);</span><br><span class="line"></span><br><span class="line">star.recPrtArea(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> area1=star.recPrtArea(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(area1);</span><br><span class="line">System.out.println(star.recArea());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recPrt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;width;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;length;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recArea</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> area = length*width;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recPrtArea</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> area = m*n;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：对象数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 4. 对象数组题目： 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩 score(int)。 </span></span><br><span class="line"><span class="comment"> 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。 </span></span><br><span class="line"><span class="comment"> 问题一：打印出3年级(state值为3）的学生信息。 </span></span><br><span class="line"><span class="comment"> 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">提示： 1) 生成随机数：Math.random()，返回值类型double;  </span></span><br><span class="line"><span class="comment">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期 对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Arrays a = new Arrays();</span></span><br><span class="line"></span><br><span class="line">Students[] stus = <span class="keyword">new</span> Students[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line">&#125;   <span class="comment">//遍历学生信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"><span class="keyword">if</span>(stus[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">System.out.print(stus[i].number+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].state+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].score+<span class="string">" "</span>+<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2改进：将功能封装到方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对对象数组问题的改进，将操作数组的功能封装到方法中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Students1[] stus = <span class="keyword">new</span> Students1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students1();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">ExerTest5 test = <span class="keyword">new</span> ExerTest5();  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在outline中可以看出，ExerTest5这个类中有main方法、print方法、searchState方法、</span></span><br><span class="line"><span class="comment">sort方法，如果要在main中调用其他方法，要在main中new一个ExerTest5的对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//遍历所有学生信息</span></span><br><span class="line">test.print(stus);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"></span><br><span class="line">test.searchState(stus, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">test.sort(stus);</span><br><span class="line">test.print(stus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  遍历Students1[]数组的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 查找Students1数组中指定年级的学生信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> landfill </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stus 要查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 要查找的年级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchState</span><span class="params">(Students1[] stus,<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[i].state == state) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:给Students1数组排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students1 temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students1</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事万物皆对象</p><p>匿名对象</p><h3 id="4-5-方法的拓展"><a href="#4-5-方法的拓展" class="headerlink" title="4.5 方法的拓展"></a>4.5 方法的拓展</h3><h4 id="4-5-1-重载"><a href="#4-5-1-重载" class="headerlink" title="4.5.1 重载"></a>4.5.1 重载</h4><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.编写程序，定义三个重载方法并调用。方法名为mOL。 </span></span><br><span class="line"><span class="comment">三个方法分别接收一个int参数、两个int参数、一个字符串参数。</span></span><br><span class="line"><span class="comment">分别 执行平方运算并输出结果，相乘并输出结果，输出字符串信息。 </span></span><br><span class="line"><span class="comment">在主类的main ()方法中分别用参数区别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.定义三个重载方法max()，</span></span><br><span class="line"><span class="comment">第一个方法求两个int值中的最大值，</span></span><br><span class="line"><span class="comment">第二个方 法求两个double值中的最大值，</span></span><br><span class="line"><span class="comment">第三个方法求三个double值中的最大值， 并分别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OverloadExer test = <span class="keyword">new</span> OverloadExer();</span><br><span class="line">test.mOL(<span class="number">5</span>);</span><br><span class="line">test.mOL(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">test.mOL(<span class="string">"OK"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">2</span>, <span class="number">8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>,<span class="number">9.3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.三个方法构成的重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(i*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">System.out.println(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.三个方法构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a&gt;b&amp;a&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&gt;a&amp;b&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-2-可变个数的形参"><a href="#4-5-2-可变个数的形参" class="headerlink" title="4.5.2 可变个数的形参"></a>4.5.2 可变个数的形参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">二、可变个数形参的方法</span><br><span class="line"> JDK5<span class="number">.0</span> variable number of arguments,允许直接定义能和多个实参相匹配的形参</span><br><span class="line"> <span class="number">1</span>.jdk5<span class="number">.0</span>新增的内容</span><br><span class="line"> <span class="number">2</span>.具体使用：</span><br><span class="line"> <span class="number">2.1</span>格式：类型...变量名</span><br><span class="line"> <span class="number">2.2</span>当调用可变个数形参的方法时，可以传入任意个数的参数</span><br><span class="line"> <span class="number">2.3</span>可变个数形参方法和本类中方法名相同，形参不同的方法构成重载</span><br><span class="line"><span class="number">2.4</span>可变个数形参方法和本类中方法名相同，形参类型相同的数组之间不构成重载，不能够共存</span><br><span class="line"> <span class="number">2.5</span>可变个数形参在方法的形参中，必须声明在末尾；</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b,String...strs)</span> <span class="comment">//编译器无法分清传入数据的类型</span></span></span><br><span class="line"><span class="function"> 2.6只能声明一个可变个数的形参，因为必须放在最后面</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class VarargsTest </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">VarargsTest test = <span class="keyword">new</span> VarargsTest();</span><br><span class="line"><span class="comment">//test.show("aa");</span></span><br><span class="line">test.show(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line"><span class="comment">//test.show();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sho"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以取0 1 2 ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String... strs)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line"><span class="comment">//实际上是个数组,也可以遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strs.length;i++) &#123;</span><br><span class="line">System.out.println(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和上面的定义是没有区别的，不能共存，jdk5.0之后</span></span><br><span class="line"><span class="comment">//public void show(Stirng[] strs) &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-3-值传递机制"><a href="#4-5-3-值传递机制" class="headerlink" title="4.5.3 值传递机制"></a>4.5.3 值传递机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">三、方法参数的值传递机制</span><br><span class="line"> <span class="number">1</span>.定义： 方法，必须由其所在类或对象调用才有意义，若方法含有函数：</span><br><span class="line"> 形参：方法声明时的参数 定义方法时（）内的参数</span><br><span class="line"> 实参：方法调用时，实际传给形参的数据参数值 </span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>.值传递机制</span><br><span class="line"> 参数传递方式：值传递</span><br><span class="line"> 即将实际参数值的副本传入方法内，而参数本身不受影响。</span><br><span class="line"> 形参是基本数据类型：将实参基本数据类型变量的数据值传递给形参</span><br><span class="line"> 形参是引用数据类型：把地址值传递给形参</span><br><span class="line"> </span><br><span class="line"> 关于变量的赋值；</span><br><span class="line">  基本数据类型：赋值得到的是保存的数据值</span><br><span class="line">  引用数据类型：赋值得到的是地址值</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsTest</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> ArgsTest test = <span class="keyword">new</span> ArgsTest();</span><br><span class="line"> Data data = <span class="keyword">new</span> Data();</span><br><span class="line"> data.m = <span class="number">10</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"> <span class="comment">//调用方法交换m n </span></span><br><span class="line"> <span class="comment">//复制 了一份地址到方法中，但是实参和形参指向堆中同样的对象，所以能实现交换</span></span><br><span class="line"> test.swap(data);</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//基本数据类型</span></span><br><span class="line"> <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = m;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span> ;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="comment">//int temp = m;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = temp;</span></span><br><span class="line"><span class="comment">//System.out.println(m+" " +n);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用swap方法,因为是基本数据类型不能交换</span></span><br><span class="line"><span class="comment">//test.swap(10,20);</span></span><br><span class="line">System.out.println(m+ <span class="string">" "</span> +n); </span><br><span class="line"><span class="comment">//没有交换，因为基本数据类型传递进入形参，在swap方法中交换后，就结束了，main方法中的数据没变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用数据类型   o2得到的是o1的地址值，指向堆中的同一个对象</span></span><br><span class="line">Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">o1.orderId = <span class="number">1001</span>;</span><br><span class="line">Order o2 = o1;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line">o2.orderId = <span class="number">2002</span>;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//交换两个变量值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(Data data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = data.m;</span><br><span class="line">data.m = data.n;</span><br><span class="line">data.n = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">ValueTransferTest test = <span class="keyword">new</span> ValueTransferTest();</span><br><span class="line">test.change(s1);<span class="comment">//还是hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String比较特别，本质上是一个char[]</span></span><br><span class="line"><span class="comment">//String 是存在常量池值中的，数组是不能随意更改的，所以 s在常量池中重新</span></span><br><span class="line"><span class="comment">//new一个char[] hi;然后s得到新的地址值，所以s1的地址值和指向的对象未改变</span></span><br><span class="line">System.out.println(s1); <span class="comment">//hello</span></span><br><span class="line"><span class="comment">//System.out.println(test.change(s1));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s = <span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArgsExer test = <span class="keyword">new</span> ArgsExer();</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//test.method(a,b);</span></span><br><span class="line"><span class="comment">//需要在方法被调用之后，仅打印出a= 100，b=20.写出method 不改变原题</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+b+<span class="string">" b="</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印流,取代原来的打印</span></span><br><span class="line"><span class="comment">//system.exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 值传递练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PassObject p = <span class="keyword">new</span> PassObject();</span><br><span class="line">Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">p.printAreas(c, <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"now radius is: "</span>+c.radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//circle类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求面积</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findAreas</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassObject</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAreas</span><span class="params">(Circle c,<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"radius\t\tArea"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//可以这样写，就可以在循环外使用 </span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;=time;i++) &#123;</span><br><span class="line"><span class="comment">//圆的半径</span></span><br><span class="line">c.radius = i;</span><br><span class="line"><span class="keyword">double</span> area = c.findAreas();</span><br><span class="line">System.out.println(c.radius+<span class="string">"\t\t"</span>+area);</span><br><span class="line">&#125;</span><br><span class="line">c.radius = i ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-递归方法"><a href="#4-5-4-递归方法" class="headerlink" title="4.5.4 递归方法"></a>4.5.4 递归方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 四、递归方法 recursion（了解）</span></span><br><span class="line"><span class="comment"> 1.递归方法：一个方法体内调用自身</span></span><br><span class="line"><span class="comment"> 2.一种隐式的循环，重复调用某段代码，但无需循环控制</span></span><br><span class="line"><span class="comment"> 递归一定要向一直方向递归，否则就成为无穷递归，会进入死循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算1-100之间自然数的和</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">System.out.println(getFactorial(<span class="number">10</span>));</span><br><span class="line">System.out.println(func(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第n个数</span></span><br><span class="line">System.out.println(fibo(n));</span><br><span class="line"><span class="comment">//打印整个斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">System.out.print(fibo(i)+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二 递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n +getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//终止的情况</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n *getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例3：数列f(0)=1,f(1)=4 f(n+2)=2f(n+1)+f(n)</span></span><br><span class="line"><span class="comment">//n&gt;0整数 求f（10）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*func(n-<span class="number">1</span>)+func(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例4：斐波那契数列 求n个值，打印数列</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13 21... 前两项的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1 1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(fibo(n-1)+fibo(n-2));</span></span><br><span class="line"><span class="keyword">return</span> fibo(n-<span class="number">1</span>)+fibo(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例5  汉诺塔问题</span></span><br><span class="line"><span class="comment">//例6  快排</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RecursionTest test = <span class="keyword">new</span> RecursionTest();</span><br><span class="line">test.binomial();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="comment">//递归调用的次数 相当于二叉树的前序遍历 从前往后</span></span><br><span class="line"><span class="comment">/*最后几项输出结果</span></span><br><span class="line"><span class="comment">count:282 k:-1</span></span><br><span class="line"><span class="comment">count:283 k:2</span></span><br><span class="line"><span class="comment">count:284 k:1</span></span><br><span class="line"><span class="comment">count:285 k:0</span></span><br><span class="line"><span class="comment">count:286 k:-1</span></span><br><span class="line"><span class="comment">count:287 k:0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">recursion(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">count ++;</span><br><span class="line">System.out.println(<span class="string">"count:"</span>+count+<span class="string">" k:"</span>+k);</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recursion(k-<span class="number">1</span>)+recursion(k-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h3 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a>三大特征</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h4 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h4><h3 id="Object类和包装类"><a href="#Object类和包装类" class="headerlink" title="Object类和包装类"></a>Object类和包装类</h3><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="BEFORE-JDK-7-0"><a href="#BEFORE-JDK-7-0" class="headerlink" title="BEFORE JDK 7.0"></a>BEFORE JDK 7.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 接口的使用</span></span><br><span class="line"><span class="comment"> 1.接口使用interface来定义，类是一种功能，一个类可以实现多个接口</span></span><br><span class="line"><span class="comment"> 2.java中，接口和类是并列的结构</span></span><br><span class="line"><span class="comment"> 3.如何定义接口：定义接口的成员</span></span><br><span class="line"><span class="comment"> 3.1 JDK 7及以前:只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment"> 全局常量：public static final的  但是书写时可以省略</span></span><br><span class="line"><span class="comment"> public abstract</span></span><br><span class="line"><span class="comment"> 3.2 JDK 8:除了全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.接口中是不能定义构造器的，意味着接口不可以实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在java开发中，接口通过让类去实现（implements)的方式使用</span></span><br><span class="line"><span class="comment"> 如果实现类覆盖了接口中所有的抽象方法，则此实现类就可以实例化</span></span><br><span class="line"><span class="comment"> 如果实现类没有全部覆盖接口中的所有方法，则此实现类就还是抽象类  重写--&gt;实现</span></span><br><span class="line"><span class="comment"> 6.java类可以实现多个接口，弥补了类的单继承性的局限</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 7.格式 class Bullet extends Object implements Attackable,Flyable&#123;&#125;  先继承后实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 8.接口和接口之间可以多继承。   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 9.接口的使用也体现了多态性  抽象类与接口的区别  都不可以实例化，如果接口或者抽象类做形参，就要使用实现类</span></span><br><span class="line"><span class="comment"> 10、接口的本质是一种规范   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Flyable.MIN_SPEED);</span><br><span class="line">Plane p = <span class="keyword">new</span> Plane();</span><br><span class="line">p.fly();</span><br><span class="line">p.stop();</span><br><span class="line">Bullet b = <span class="keyword">new</span> Bullet();</span><br><span class="line">b.attack();</span><br><span class="line">b.fly();</span><br><span class="line">b.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;</span><br><span class="line"><span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>; <span class="comment">//前面可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;<span class="comment">//省略了public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could stop"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kite</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;  <span class="comment">//只实现了一个还是抽象类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Attackable</span>,<span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"kill"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"stop"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span> <span class="keyword">extends</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AFTER-JDK-8-0"><a href="#AFTER-JDK-8-0" class="headerlink" title="AFTER JDK 8.0"></a>AFTER JDK 8.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfaceAFTER;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> AFTER JDK8.0 除了定义全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> 1.静态方法，通过interface.method调用</span></span><br><span class="line"><span class="comment"> 2.默认方法，通过实现类的对象调用，</span></span><br><span class="line"><span class="comment"> 默认方法还可以在实现类中重写，通过实现类调用的是重写后的方法</span></span><br><span class="line"><span class="comment"> 3.如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，</span></span><br><span class="line"><span class="comment"> 在没有重写此方法的情况下，默认调用的是父类中同名同参数的方法  --&gt;类优先原则</span></span><br><span class="line"><span class="comment"> 如果重写了就调用子类自己重写后的方法。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.如果实现类实现的多个接口中有同名同参数的默认方法，在继承的父类中没有该同名同参数的方法，也并且没有重写。</span></span><br><span class="line"><span class="comment"> 直接调用。编译不通过，不知道该调用哪个方法   --&gt;接口冲突，因此需要在实现类中重写此方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在实现类中重写了方法后调用 接口中的默认方法使用  接口名.super.默认方法名</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 6.实现类写进了接口中的默认方法，一般不怎么重写</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompareA</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;   <span class="comment">//静态方法，通过interface.method调用</span></span><br><span class="line">System.out.println(<span class="string">"compareA:BEIJING"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  <span class="comment">//默认方法 可以省略public</span></span><br><span class="line">System.out.println(<span class="string">"compareA:SHANGHAI"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类的成员之五：内部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 1.允许将一个类A声明在另一个类B中，则类A为内部类，类B称为外部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 2.分类：</span></span><br><span class="line"><span class="comment"> 成员内部类： 和其他构成平行的声明在类内   静态的和非静态的</span></span><br><span class="line"><span class="comment"> 局部内部类：方法内 代码块内 构造器内</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 3.成员内部类</span></span><br><span class="line"><span class="comment"> 一方面，作为外部类的成员：</span></span><br><span class="line"><span class="comment"> &gt; 可以调用外部类的结构</span></span><br><span class="line"><span class="comment"> &gt; 内部类可以被static修饰  分为静态非静态的内部类</span></span><br><span class="line"><span class="comment"> &gt; private default protected public    类本身只有两种权限修饰符  public 和 default</span></span><br><span class="line"><span class="comment"> 另一方面，作为一个类：</span></span><br><span class="line"><span class="comment"> &gt; 可以定义属性 方法 构造器 代码块 再定义内部类</span></span><br><span class="line"><span class="comment"> &gt; 可以被final修饰，表示不能被继承</span></span><br><span class="line"><span class="comment"> &gt; 可以被abstract修饰，表示不能被实例化</span></span><br><span class="line"><span class="comment"> 4.</span></span><br><span class="line"><span class="comment"> 4.1 如何实例化成员您外部类的对象</span></span><br><span class="line"><span class="comment"> 4.2 如何在成员内部类中区分调用外部类的结构</span></span><br><span class="line"><span class="comment"> 4.3 局部内部类如何在开发中使用   见InnerClassTest1.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建非静态成员内部类的实例化，先要把外部类实例化</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Brain b = p.<span class="keyword">new</span> Brain(); <span class="comment">//在外部的类的实例中去new一个内部类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员内部类的实例化</span></span><br><span class="line">Person.Heart h = <span class="keyword">new</span> Person.Heart();  <span class="comment">//如果是静态的内部类，可以通过这样调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员内部类 非静态的</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Brain</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Brain</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"BRAIN"</span>);</span><br><span class="line">Person.<span class="keyword">this</span>.eat();   <span class="comment">//可以在内部类的方法体中   调用外部类的方法,省略了Person.this.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(name);   <span class="comment">//调用形参传入的name</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);   <span class="comment">//调用的该方法所在类的name</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);  <span class="comment">//调用的是外部类的而name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员内部类 静态的</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Heart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Heart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部内部类：方法中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：构造区中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：代码块中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中局部内部类很少会声明在构造器和代码块中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即使是在方法中也很少见局部内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个实现了Comparable接口的类：局部内部类  非匿名实现类的匿名对象</span></span><br><span class="line"><span class="comment">//class MyComparable implements Comparable&#123;</span></span><br><span class="line"><span class="comment">//@Override  //对接口的抽象方法进行重写</span></span><br><span class="line"><span class="comment">//public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return new MyComparable();     //return一个实现类，这个内部类只在该方法内使用</span></span><br><span class="line"><span class="comment">//方式二  :return一个 匿名实现类的匿名对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：面向对象  没整理完
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-数组</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-array.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-array.html</id>
    <published>2020-06-16T03:24:46.000Z</published>
    <updated>2020-06-30T01:11:19.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>/*<br>数组的概念</p><ol><li><p>array，多个相同数据类型的数据按一定顺序排列集合，并使用一个名字命名，<br>并通过编号的方式对这些数据进行统一管理</p></li><li><p>相关概念<br>数组名<br>下表、角标、索引<br>元素<br>数组的长度 ，元素个数</p></li><li><p>1）数据是有序排列的 *<br>2）数组是引用数据类型变量，数组的元素既可以是基本数据类型，也可以是引用数据类型。<br>3）创建数据是在内存中开辟了一块连续的空间，数组名引用的是该空间的首地址<br>4）数组的长度一旦确定不能修改</p></li><li><p>分类：<br>维数：一维，二维数组…<br>按照元素：基本数据类型元素的数组，引用数据类型元素的数组</p></li><li><p>一维数组的使用<br>*一维数组的声明和初始化<br>*如何调用数组的制定位置的元素<br>*如何获取数组的长度<br>*如何遍历数组<br>*数组元素的默认初始化值<br>*数组的内存解析</p></li></ol><p>*/</p><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h2><ol><li>一维数组的声明和初始化</li><li>如何调用数组的制定位置的元素</li><li>如何获取数组的长度</li><li>如何遍历数组</li><li>数组元素的默认初始化值</li><li>数组的内存解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.一维数组的声明和初始化</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] ids;</span><br><span class="line"><span class="comment">//1.1静态初始化:数组的初始化和数组元素的赋值操作同时进行 </span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//1.2动态初始化：数组的初始化和数组元素的赋值操作分开进行，只写长度</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：数组一旦初始化完成，其长度就确定了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如何调用数组制定位置的元素：通过索引的方式调用</span></span><br><span class="line"><span class="comment">//数组的索引从0开始，到数组的长度-1结束</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"apple"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"banana"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"cat"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"dog"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"egg"</span>; <span class="comment">//charAt(0),和数据库sql交互一般从1开始</span></span><br><span class="line"><span class="comment">//names[5] = "fish";  超出数组长度无法运行 ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.如何获取数组的长度：</span></span><br><span class="line"><span class="comment">//length</span></span><br><span class="line">System.out.println(names.length);<span class="comment">//5</span></span><br><span class="line">System.out.println(ids.length);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.如何遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.数组元素的默认初始化值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数组元素是整型 0</span></span><br><span class="line"><span class="comment"> * 浮点型 0.0</span></span><br><span class="line"><span class="comment"> * char型：0 （ASCII码）'\u0000',而非'0'</span></span><br><span class="line"><span class="comment"> * boolean: false(二进制的0） </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 引用数据类型</span></span><br><span class="line"><span class="comment"> * Array作为元素的默认数据类型也是null</span></span><br><span class="line"><span class="comment"> * String: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr1.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"-----"</span>+arr1[i]+<span class="string">"-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr1[<span class="number">0</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"ok"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(arr3[<span class="number">0</span>]==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.数组的内存解析<sup>1</sup><br>         /*简化结构<br>         栈 stack线性关系：局部变量，在方法中定义的变量都是局部变量<br>         队 heap：new出来的结构 对象、数组<br>         方法区 method area，包括常量池，静态域<br>         */</p><p>注1：<a href="https://www.youtube.com/watch?v=ZFiYxdWKft8&list=PLTsrYYJ5DyAnRKvHbZ7LslqC_wQ1iOQsF&index=3&t=0s" target="_blank" rel="noopener">JVM内存模型解析</a></p><h2 id="练习：学生成绩"><a href="#练习：学生成绩" class="headerlink" title="练习：学生成绩"></a>练习：学生成绩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"input amounts of students"</span>);</span><br><span class="line"><span class="keyword">int</span> amounts = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[amounts];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"input score of students"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;amounts;i++) &#123;</span><br><span class="line">score[i] = scan.nextInt();</span><br><span class="line"><span class="keyword">if</span>(score[i]&gt;=max)&#123;</span><br><span class="line">max = score[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"the highest score is "</span>+max);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;amounts;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">10</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"A"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">20</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"B"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">30</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"C"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"D"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>多维数组(以二维为主）<br>理解一维数组array1又作为另一一维数组array2的元素而存在。<br>其实从数组底层的运行机制来看，没有多维数组。<br>array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</p><h2 id="2-二维数组的使用"><a href="#2-二维数组的使用" class="headerlink" title="2. 二维数组的使用"></a>2. 二维数组的使用</h2><ol><li>二维数组的声明和初始化</li><li>如何调用数组的制定位置的元素</li><li>如何获取数组的长度</li><li>如何遍历数组</li><li>数组元素的默认初始化值</li><li>数组的内存解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多维数组的使用(以二维为主）</span></span><br><span class="line"><span class="comment">1.理解一维数组array1又作为另一一维数组array2的元素而存在。</span></span><br><span class="line"><span class="comment">其实从数组底层的运行机制来看，没有多维数组。</span></span><br><span class="line"><span class="comment">2.array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.二维数组的使用：</span></span><br><span class="line"><span class="comment">1）声明和初始化 静态和动态</span></span><br><span class="line"><span class="comment">2）赋值和调用</span></span><br><span class="line"><span class="comment">3）长度</span></span><br><span class="line"><span class="comment">4）遍历（索引）</span></span><br><span class="line"><span class="comment">5）默认初始化值</span></span><br><span class="line"><span class="comment">6）内存解析</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.二维数组的声明和初始化</span></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>]; <span class="comment">// 3个地址 指向3个另外的数组</span></span><br><span class="line"><span class="comment">//动态初始化2</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//还没有赋值 外面的数组值是null，还没有指向的数组，所以也没有在堆中预留内部数组的空间</span></span><br><span class="line"><span class="comment">//另外的正确写法（较少用）：</span></span><br><span class="line"><span class="keyword">int</span> arr4[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr5[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> arr6[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr7 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//类型推断</span></span><br><span class="line"><span class="keyword">int</span>[][] arr8 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">String[] arr9 = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>&#125;;</span><br><span class="line"><span class="comment">//但是分行的是不能省略的，只有一行的是可以省略的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如何调用数组制定位置的元素</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//2</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line"><span class="comment">//System.out.println(arr3[1][0]); //报错NullPointerException 空指针</span></span><br><span class="line"></span><br><span class="line">arr3[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>]; </span><br><span class="line"><span class="comment">//在外面数组的索引1位置处，new一个4元素的string数据的空间 </span></span><br><span class="line"><span class="comment">//地址（16进制0x）赋值到索引位置1，等于创建了以个指针</span></span><br><span class="line">System.out.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取长度</span></span><br><span class="line">System.out.println(arr1.length);   <span class="comment">//3   length和内部的数组无关</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>].length);<span class="comment">//2   length和内部的数组无关</span></span><br><span class="line">System.out.println(arr1[<span class="number">2</span>].length);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.如何遍历</span></span><br><span class="line"><span class="comment">//嵌套循环</span></span><br><span class="line"><span class="comment">//二维数组：两层for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr1.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr1[i].length;j++) &#123;</span><br><span class="line">System.out.println(arr1[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.二维数组的元素的默认初始化值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 分为：外层数组的元素，内层数组的元素</span></span><br><span class="line"><span class="comment"> 初始化方式1：</span></span><br><span class="line"><span class="comment"> int[][] arr = new int[4][3];</span></span><br><span class="line"><span class="comment"> 外层元素：arr[0],arr[1];</span></span><br><span class="line"><span class="comment"> 内层元素：arr[0][1],arr[2][3];</span></span><br><span class="line"><span class="comment"> 外层元素的初始化值为null </span></span><br><span class="line"><span class="comment"> 内层元素的初始化值与一维相同 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 初始化方式二：</span></span><br><span class="line"><span class="comment"> int[][] arr = new int[4][];</span></span><br><span class="line"><span class="comment"> 外层元素：null</span></span><br><span class="line"><span class="comment"> 内层元素：无法调用，报错 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[][] arr10= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr10[<span class="number">0</span>]);  <span class="comment">//[I@424c0bc4地址值 在arr[0]位置的数组的地址值</span></span><br><span class="line">System.out.println(arr10[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr10);   <span class="comment">//[[I@3c679bde "[["表示二维 "I"表示int @后面是16进制的数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr11 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr11);<span class="comment">//[I@3c679bde</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>[][] arr12= <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr12[<span class="number">0</span>]);  <span class="comment">//[F@8807e25</span></span><br><span class="line">System.out.println(arr12[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0.0</span></span><br><span class="line">System.out.println(arr12); <span class="comment">//[[F@63e31ee</span></span><br><span class="line"></span><br><span class="line">String[][] arr13= <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr13[<span class="number">0</span>]);  <span class="comment">//[Ljava.lang.String;@68fb2c38</span></span><br><span class="line">System.out.println(arr13[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr13); <span class="comment">//[[Ljava.lang.String;@567d299b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[][] arr14= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr14[<span class="number">0</span>]);  <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.内存结构<br>        //main方法结束后，变量先进后出，出栈，指针就没有了，回收内存，堆中回收外层，之后内层元素失去指针也没回收。</p><p>方法中变量都是局部变量，局部变量都是在栈中。</p><p>地址是JVM算出来的hash值，不是底层内存真实的地址<br>引用类型的变量，存的不是null就是地址值</p><img src="https://i.loli.net/2020/06/16/N9Xoq3bajlTyvV7.png" alt="二维数组的内存解析" style="zoom:85%;" /><p>数据结构</p><ol><li>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多</li><li>数据的存储结构<ul><li>线性表：一对一关系 顺序表（如：数组）、链表、栈、队列</li><li>树形结构：二叉树 数据库中的B+树</li><li>图形结构（多对多）</li></ul></li></ol><p>算法：</p><ol><li>排序算法</li><li>搜索算法</li></ol><h2 id="练习：打印杨辉三角"><a href="#练习：打印杨辉三角" class="headerlink" title="练习：打印杨辉三角"></a>练习：打印杨辉三角</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用二维数组打印一个10行的杨辉三角</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YangHuiTriangle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr[i]= <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//首末赋值</span></span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;arr[i].length-<span class="number">1</span>;j++) &#123;<span class="comment">//这里用length作为判断条件。</span></span><br><span class="line">arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j]; <span class="comment">//某行等于上行的两个数的相加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(arr.length);i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr[i].length;j++) &#123;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、数组涉及常见算法"><a href="#三、数组涉及常见算法" class="headerlink" title="三、数组涉及常见算法"></a>三、数组涉及常见算法</h1><p>/*<br>数组涉及的常见算法：<br>1.<strong>数组元素的赋值</strong>（杨辉三角、回形数）<br>2.求数值型数组中元素的最大值、最小值、平均数、总和<br>3.数组的赋值、翻转、查找（线性查找、<strong>二分法查找</strong>）<br>4.数组元素的<strong>排序算法</strong>（冒泡算法）<br> */</p><h2 id="1-数组元素赋值"><a href="#1-数组元素赋值" class="headerlink" title="1. 数组元素赋值"></a>1. 数组元素赋值</h2><p>杨辉三角/回形树</p><p>练习：创建一个int[6]数组，要求元素在1-30之间，且是随机赋值，同时要求元素的值各不相同;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//int temp=(int)(Math.random()*30+1);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//while(temp==arr[i]) &#123;</span></span><br><span class="line"><span class="comment">//arr[i] = (int)(Math.random()*30+1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//temp = arr[1];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[i]==arr[j]) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-最大、最小，和、平均"><a href="#2-最大、最小，和、平均" class="headerlink" title="2. 最大、最小，和、平均"></a>2. 最大、最小，和、平均</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmStatistic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr2 =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> avg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr2[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&gt;max) &#123;</span><br><span class="line">max =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&lt;min) &#123;</span><br><span class="line">min =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line">sum += arr2[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.print(arr2[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">avg = sum/(<span class="keyword">double</span>)arr2.length;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(avg);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-赋值、翻转、查找"><a href="#3-赋值、翻转、查找" class="headerlink" title="3. 赋值、翻转、查找"></a>3. 赋值、翻转、查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmAssignment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">array2=array1;   <span class="comment">//堆空间中实际上只有一个数组，array2得到array1的赋值是个地址值</span></span><br><span class="line"><span class="comment">//new一次只有一个数组</span></span><br><span class="line"><span class="comment">//不能称作数组的复制，未在堆中开辟新的内存空间，类似于快捷方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array2[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(array1);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array2);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的复制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReplicate</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array11 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array22 = <span class="keyword">new</span> <span class="keyword">int</span>[array11.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">array22[i]=array11[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">System.out.print(array11[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array22[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(array11);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array22);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的反转</span></span><br><span class="line"><span class="comment">//写法1:多new了一个数组，要两个变量，效率不高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line">String[] array4 = <span class="keyword">new</span> String[array3.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array3.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = array3.length-i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">array4[j]=array3[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array4.length;i++) &#123;</span><br><span class="line">System.out.print(array4[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array5 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line"><span class="comment">//String[] array6 = new String[array5.length];</span></span><br><span class="line"><span class="comment">//for(int i = 0;i&lt;array5.length/2;i++) &#123;</span></span><br><span class="line"><span class="comment">//String temp = array5[i];</span></span><br><span class="line"><span class="comment">//array5[i]=array5[array5.length-i-1];</span></span><br><span class="line"><span class="comment">//array5[array5.length-i-1]=temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方法三：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=array5.length-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">String temp1=array5[j];</span><br><span class="line">array5[j]=array5[i];</span><br><span class="line">array5[i]=temp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array5.length;i++) &#123;</span><br><span class="line">System.out.print(array5[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找（或搜索）</span></span><br><span class="line"><span class="comment">//线性查找：一个个找</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] search = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"CC"</span>,<span class="string">"FF"</span>,<span class="string">"PPP"</span>&#125;;</span><br><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"please input the object you wanna search:"</span>);</span><br><span class="line">String object = scan.next();</span><br><span class="line"><span class="keyword">boolean</span> isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;search.length;i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(object.equals(search[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"the index of object is "</span>+i);</span><br><span class="line">isflag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isflag) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分法查找：</span></span><br><span class="line"><span class="comment">//前提：所有查找的数组必须有序</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">98</span>,-<span class="number">22</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">46</span>,<span class="number">98</span>,<span class="number">210</span>,<span class="number">333</span>,<span class="number">456</span>&#125;;</span><br><span class="line">Scanner scan1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"input:"</span>);</span><br><span class="line"><span class="keyword">int</span> object1 = scan1.nextInt();</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr2.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isflag2= <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end) &#123;</span><br><span class="line"><span class="keyword">int</span> middle = (head+end)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(object1==arr2[middle]) &#123;</span><br><span class="line">System.out.println(<span class="string">"index： "</span>+middle);</span><br><span class="line">isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(object1 &gt; arr2[middle]) &#123;</span><br><span class="line">head = middle+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">end = middle-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isflag2) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//差值法 哈希算法</span></span><br></pre></td></tr></table></figure><h2 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设n个记录的序列为&#123;R1 R2 ... Rn&#125;,其相应的关键字为&#123;K1,K2...Kn&#125;</span></span><br><span class="line"><span class="comment">重新排序&#123;Ri1,Ri2...Rin&#125;,满足&#123;Ki1&lt;=Ki2...&lt;=Kin&#125;,通常排序的目的是为了快速查找</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">衡量优劣： </span></span><br><span class="line"><span class="comment">时间复杂度 </span></span><br><span class="line"><span class="comment">空间复杂度 </span></span><br><span class="line"><span class="comment">稳定性：关键字相等的A,B，排序后先后书序不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">内部排序</span></span><br><span class="line"><span class="comment">外部排序：需要借助内存之外的磁盘储存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">十大内部排序算法：</span></span><br><span class="line"><span class="comment">选择排序：直接选择排序、**堆排序**</span></span><br><span class="line"><span class="comment">**交换排序**：冒泡、快速排序</span></span><br><span class="line"><span class="comment">插入排序：直接插入、折半插入、Shell排序（希尔排序）</span></span><br><span class="line"><span class="comment">**归并排序**</span></span><br><span class="line"><span class="comment">桶式排序（较少）</span></span><br><span class="line"><span class="comment">基数排序（较少）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法的五大特征：</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">有穷性</span></span><br><span class="line"><span class="comment">确定性</span></span><br><span class="line"><span class="comment">可行性</span></span><br><span class="line"><span class="comment">注：非确定性算法：并行算法 概率算法 深度学习</span></span><br><span class="line"><span class="comment">不要求终止的计算描述：过程</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的冒泡排序的实现</span></span><br><span class="line"><span class="comment">//n个元素，n-1趟，比较相邻的两个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>,<span class="number">23</span>,<span class="number">10</span>,-<span class="number">45</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">45</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序：递归  (思想)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序算法的横向对比</span></span><br></pre></td></tr></table></figure><h1 id="四、Arrays-工具类的使用"><a href="#四、Arrays-工具类的使用" class="headerlink" title="四、Arrays 工具类的使用"></a>四、Arrays 工具类的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> java.util.Arrays:操作数组的工具类,定义了很多操作数组的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.boolean equals(int[] a, int[] b):判断两个数组是否相等</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString(int[] a):输出数组信息</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void fill(int[] a, int val):将指定值填充到数组</span></span><br><span class="line">Arrays.fill(arr1, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void sort(int[] a):排序</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 2, 3]</span></span><br><span class="line">System.out.println(arr2.toString());<span class="comment">//注意两者的区别[I@16b4a017</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0].toString());  //int型不能用该方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int binarySearch(int[] a,int key)</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = Arrays.binarySearch(arr3,<span class="number">5</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//返回负数就是未找到</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、数组中的常见异常"><a href="#五、数组中的常见异常" class="headerlink" title="五、数组中的常见异常"></a>五、数组中的常见异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组中的常见异常：</span></span><br><span class="line"><span class="comment">1.数组角标越界异常：ArrayIndexOutOfBoundException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.空指针异常：NullPointerException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//System.out.println(arr[5]);</span></span><br><span class="line"><span class="comment">//System.out.println(arr[-1]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况1：</span></span><br><span class="line"><span class="comment">//    int[]arr1 = null;</span></span><br><span class="line"><span class="comment">//    System.out.println(arr1[0]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0][0]);//空指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况三：</span></span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());<span class="comment">//空指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础:数组
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>语言碎片 2020/06</title>
    <link href="https://paranoiddemon.github.io/blog/posts/thoughtsof202006.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/thoughtsof202006.html</id>
    <published>2020-06-14T14:22:46.000Z</published>
    <updated>2020-07-17T15:28:25.226Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>既然可以随时选择死，为什么不换种活法</p><p>2.<br>为什么这样子，我真的不理解</p><p>3.<br>人是如此的易驯服，被他们那套搞一搞，成为一头圈养的家猪，变得丑陋而讨厌，仿佛生下来就在等待屠宰，野猪的精气神儿就完全不一样。</p><p>4.<br>Welcome to the slaughterhouse!</p><p>5.<br>What kind of savages are we？ What kind of country do we live in？</p><p>6.<br>痛苦的药方就在痛苦之中</p><p>7.<br>活着成为猪和死了也不知道哪个更可怕</p><p>8.<br>行动！加速融入生活</p><p>9.<br>哦 眼泪~</p><p>10.<br>眼睛都哭模糊了，浴室，我的伤心地</p><p>11.<br>2020，罗大佑年，多次落泪，就这么飘来飘去，哪里是你的家？</p><p>12.<br>黑暗好像一颗巨石，按在胸口</p><p>13.<br>夏，十五日夜，秘密发丧，埋于后山。</p><p>14.<br>凑活过，一种普世生活哲学，好像一切都能缝补，slogan是「害想咋地？」</p><p>15.<br>舒展眉头<br>过失败而渺小的人生<br>也是一种伟大</p><p>16.<br>平行世界是真实存在的</p>]]></content>
    
    <summary type="html">
    
      胡言乱语inbox，查重率&lt;2%
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-基本语法</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-basics.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-basics.html</id>
    <published>2020-06-13T16:24:46.000Z</published>
    <updated>2020-06-30T01:11:20.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Java语言"><a href="#1-Java语言" class="headerlink" title="1. Java语言"></a>1. Java语言</h1><h2 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h2><p>JavaSE 9.04<br>IDEA 2020.1.2</p><ul><li>JVM Java virtual machine<br>Java的跨平台性<br>Java程序 运行在 JVM，JVM运行在不同的系统中</li><li>JRE(Java runtime environment)<br>包含JVM和运行所需的核心类库</li><li>JDK（Java development kit） 安装<br>程序开发工具包，包含JRE和开发人员使用的工具（编译器等）</li></ul><p>JDK 5.0 8.0 升级较大 1.8就是8.0<br>JavaSE 桌面级（不再用） /JavaEE 企业级 Web开发 /JavaME</p><h2 id="1-2-基础命令行指令"><a href="#1-2-基础命令行指令" class="headerlink" title="1.2 基础命令行指令"></a>1.2 基础命令行指令</h2><p>系统软件(操作系统）<br>应用软件 </p><p>人机交互方式<br>图形化界面 GUI graphical user interface<br>命令行 CLI command line interface<br>algorithms+data structures=programs</p><p>MS-DOS (Microsoft Disk operating system)<br>CMD<br>启动：win R cmd<br>切换盘符： 盘符：<br>进入文件夹 cd 文件夹名<br>进入多级文件夹：cd 文件夹1\文件夹2<br>返回上级 cd..<br>回根路径 cd<br>查看文件夹：dir<br>清屏：cls<br>退出：exit<br>删除：del<br>上下箭头：历史操作命令<br>删除文件夹 ：rd  (remove dir 目录得是空的<br>创建目录：md</p><h2 id="1-3-语言特点"><a href="#1-3-语言特点" class="headerlink" title="1.3 语言特点"></a>1.3 语言特点</h2><p>机器语言<br>汇编语言<br>高级语言 </p><ul><li>面向过程 C Pascal</li><li>面向对象 Java Python Scala<br>C 开发效率差，执行效率高→  Java  →  Python<br>严格的语法，丰富的类库<br>PHP JS解释型语言</li></ul><p>舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载、多重继承等（以接口取代），增加了垃圾回收期功能</p><ul><li>面向对象：<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态</li><li>健壮性</li><li>跨平台性  JVM<br>编写（.java，在记事本就可以）、编译（.class 字节码文件 javac.exe编译器），运行（JVM运行 java.exe解释器）</li></ul><p>垃圾回收：不再使用的内存空间<br>还是存在内存泄漏和内存溢出</p><p>Java web应用开发<br>后台开发：Java  PHP Python Go Node.js</p><p>Android系统结构<br>内核 linux kernel 和硬件交互<br>libraries  C<br>android runtime  C<br>application framework Java<br>applications Java<br><img src="https://i.loli.net/2020/06/13/tgTAWRYlJnyPKvi.jpg" alt="Android系统结构.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;   <span class="comment">//定义一个类的名称，类是Java中所有源代码的基本组织单位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; <span class="comment">//内容是固定写法，代表main方法，代表程序执行的起点</span></span><br><span class="line">        System.out.println(<span class="string">"hello world!"</span>);  <span class="comment">//打印输出语句，（）中即为显示的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">编译后的<span class="class">.<span class="keyword">class</span>不包含注释</span></span><br></pre></td></tr></table></figure><h2 id="1-4-注释及API文档"><a href="#1-4-注释及API文档" class="headerlink" title="1.4 注释及API文档"></a>1.4 注释及API文档</h2><p>单行注释、多行注释<br>文档注释:可以被JDK提供的javadoc工具解析，生成一套以网页文件形式体现的该程序的说明文档<br> /**<br>文档注释<br>@author xxx<br>@version v1.0<br>*/<br>注意：多行注释不可以嵌套使用</p><p>Java API 文档<br>API application programing interface 类库</p><p>注意事项：</p><ol><li><p>java程序编写-编译-运行的过程</p><ul><li>编写，以.java结尾的源文件</li><li>编译，javac file.java 生成字节码文件</li><li>运行   java 类名  运行解释字节码文件</li></ul></li><li><p>在一个java文件中可以声明多个class，但是最多只有一个类声明为public，要求声明为public的类的类名必须与源文件同名。</p></li><li><p>程序的入口是main（）方法，格式固定<br>public static void main(String[] args) { }  //args arguments参数</p></li><li><p>输出语句<br>System.out.println();  输出数据，然后换行<br>System.out.print();</p></li><li><p>每一行执行语句都以分号结束，一行的结束不是分号就是大括号</p></li><li><p>编译的过程：编译以后，会生成一个或多个字节码文件，与源文件中所声明的类的名称相同</p></li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h1><h2 id="2-1-关键字和保留字"><a href="#2-1-关键字和保留字" class="headerlink" title="2.1 关键字和保留字"></a>2.1 关键字和保留字</h2><ul><li>Keywords<br>定义：被java语言赋予了特殊含义，用作专门用途的字符串（单词）<br>特点：所有字母都为小写</li><li>reserved word<br>现有java版本尚未使用，以后版本可能会作为关键字使用如goto，const</li></ul><h2 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h2><p>identifier</p><ol><li><p>自己定义的内容。类名、方法名、变量名、包名、接口名等</p></li><li><p>命名规则：不遵守，编译不通过</p><ul><li>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _ （下划线） </li><li>标识符不能以数字开头。 </li><li>标识符不能是关键字和保留字，但可以包含。 </li><li>严格区分大小写，长度无限制</li><li>不能加空格</li></ul></li><li><p>命名规范： 建议遵守</p><ul><li>类名：首字母大写，后面每个单词首字母大写（大驼峰式）。HelloWorld </li><li>方法名、变量名： 首字母小写，后面每个单词首字母大写（小驼峰式）。 helloWorld</li><li>常量名：多个单词组成时，字母全部大写，下划线连接 例：INTEGER_CACHE</li><li>包名：多单词所有字母小写 xxxyyyzzz</li></ul></li><li><p>取名：见名知义 提高可读性</p></li><li><p>用unicode字符集，支持中文但不要使用</p></li></ol><h2 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h2><ol><li><p>概念：</p><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中的最基本的存储单元。包含类型，变量名，存储的值</li></ul></li><li><p>作用：在内存中保存数据</p><p>注意：</p><ul><li>每个变量必须先声明，后使用</li><li>使用变量名来访问这块区域的数据</li><li>变量的作用域：定义在一对｛｝内</li><li>变量只有在其作用域内才有效 </li><li>同一个作用域内，不能定义重名的变量</li></ul></li><li><p>使用</p><ul><li>格式 数据类型 变量名 = 变量值；</li></ul></li><li><p>变量按数据类型分：</p><ul><li>基本数据类型 <ul><li>整数型 byte（1byte=8bit -128~127） short int（默认）long</li><li>浮点型 float double(双精度，默认) 有些小数也无法精确表示</li><li>字符型 char</li><li>布尔型 boolean</li></ul></li><li>引用数据类型 <ul><li>数组 [ ] array</li><li>类 class   字符串也属于class</li><li>接口 interface<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> myAge = <span class="number">20</span>;  <span class="comment">//默认使用</span></span><br><span class="line">System.out.println(myAge);</span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">323134L</span> ;<span class="comment">//必须以l或L结尾</span></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">127</span> ; <span class="comment">//-127~128 </span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">1.5F</span> ;<span class="comment">//4byte,范围比long还大，以f或F结尾</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.声明一个字符 </span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>; <span class="comment">//2byte,用'',只能有一个字符</span></span><br><span class="line"><span class="comment">//2.转义字符</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'\n'</span> ;  <span class="comment">//换行符</span></span><br><span class="line">c2 = <span class="string">'\t'</span>;</span><br><span class="line">System.out.print(<span class="string">"hello"</span> + c2);</span><br><span class="line">System.out.println(<span class="string">"你好world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.unicode值来表示字符型常量</span></span><br><span class="line"><span class="keyword">char</span> c6 = <span class="string">'\u0043'</span>;</span><br><span class="line">System.out.println(c6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.还可以用ACISS玛</span></span><br><span class="line">        <span class="keyword">char</span> c7 = <span class="number">97</span>  <span class="comment">//输出a  开发中非常少年</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔型 boolean</span></span><br><span class="line"><span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(bb1);</span><br><span class="line"><span class="keyword">boolean</span> isMarried = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">"你就不能参加\"单身\"party了，\n很遗憾"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"哈哈"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int（默认）</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>ﬂoat</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table></li></ul></li></ul></li><li><p>按照声明位置 成员变量vs局部变量</p></li><li><p>基本数据类型之间的运算规则</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型之间的运算规则：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">前提：这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 自动类型提升：</span></span><br><span class="line"><span class="comment">    结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</span></span><br><span class="line"><span class="comment">byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特别的：当byte、char、short三种类型的变量做运算时，结果为int型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 强制类型转换：</span></span><br><span class="line"><span class="comment">使用强转符</span></span><br><span class="line"><span class="comment">可能导致精度损失</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">129</span>;</span><br><span class="line"><span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//byte b2 = b1 + i1;</span></span><br><span class="line"><span class="keyword">int</span> i2 = b1 + i1;</span><br><span class="line"><span class="keyword">long</span> l1 = b1 + i1;</span><br><span class="line">System.out.println(i2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f = b1 + i1;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = s1;</span><br><span class="line">System.out.println(d1);<span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***************特别地*********************</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;<span class="comment">//会转换成a的ASCII码97  </span></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i4 = c1 + i3;</span><br><span class="line">System.out.println(i4);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> cc = (<span class="keyword">char</span>)(<span class="number">2</span>+<span class="string">'A'</span>);  <span class="comment">//输出C ASCII码加两位</span></span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c2  = c1 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c3 = c1 + b2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s3 = b2 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s4 = b1 + b2;//编译不通过</span></span><br><span class="line"><span class="comment">//****************************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">12.9</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)d1;  <span class="comment">//12 强转符，截断，损失精度</span></span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b1); <span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.编码情况</span></span><br><span class="line"><span class="keyword">long</span> <span class="number">1</span> = <span class="number">123123</span>;  </span><br><span class="line">System.out.println(l);<span class="comment">//没有报错，实际是个int型</span></span><br><span class="line"><span class="comment">//long l1 = 121111111111111111111;   超出int范围就编译失败</span></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">121111111111111111111L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="comment">//float f1 = 12.3;   编译失败，相当于把double转为float，一定要加f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.情况2</span></span><br><span class="line"><span class="comment">//整型常量默认为int 浮点型默认为double</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//byte b1 = b + 1;  编译失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//float f1 = b + 12.3; 编译失败</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>String类型的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  String类型变量的使用</span></span><br><span class="line"><span class="comment">  1.属于引用数据类型</span></span><br><span class="line"><span class="comment">  2.使用"" 字符串</span></span><br><span class="line"><span class="comment">  3.String可以和8种基本数据类型做运算且运算只能是连接运算 +</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String s1 = <span class="string">"hello world!"</span>;</span><br><span class="line">  System.out.println(s1);</span><br><span class="line">  String s2 = <span class="string">"a"</span>;</span><br><span class="line">  String s3 = <span class="string">""</span>;  <span class="comment">//长度没有限制，不同于char一定要有一个字符</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1001</span>;</span><br><span class="line">  String numStr = <span class="string">"学号："</span>;</span><br><span class="line">  String info = numStr + num;  <span class="comment">//连接语法，输出的是Spring</span></span><br><span class="line">  <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">  String info1 = b1 + info;</span><br><span class="line">  System.out.println(info);</span><br><span class="line">  System.out.println(info1);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//----------------------</span></span><br><span class="line">  <span class="comment">//练习1</span></span><br><span class="line">  <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">  String str = <span class="string">"hello"</span>; </span><br><span class="line">  System.out.println(c + num2 + str); <span class="comment">//107hello  A:65</span></span><br><span class="line">  System.out.println(c + str + num2); <span class="comment">//ahello10</span></span><br><span class="line">  System.out.println(c + (num2 + str));<span class="comment">//a10hello</span></span><br><span class="line">  System.out.println((c + num2) + str);<span class="comment">//107hello</span></span><br><span class="line">  System.out.println(str+ num2 + c); <span class="comment">//hello10a</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//练习2</span></span><br><span class="line">  <span class="comment">//输出**   \t 为table</span></span><br><span class="line">  System.out.println(<span class="string">"* *"</span>);</span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);   <span class="comment">//93 两个char相加会转成int</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">"\t"</span> + <span class="string">'*'</span>);<span class="comment">//只有前面的+运算是string就会传递</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">"*"</span>); <span class="comment">//51*</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + (<span class="string">'\t'</span> + <span class="string">'*'</span>));  </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//String无法强转为int</span></span><br><span class="line">  <span class="comment">//int num1 = (int)str1  编译不通过</span></span><br><span class="line">  <span class="keyword">int</span> num1 = Integer.parseInt(str1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>进制转换（了解）</p><p>原码 反码 补码（计算机底层存储的）</p><p>二进制  0b 或0B开头<br>十进制<br>八进制 以0开头<br>十六进制 0x或 0X开头  A-F不区分大小写</p></li></ol><h2 id="2-4-运算符"><a href="#2-4-运算符" class="headerlink" title="2.4 运算符"></a>2.4 运算符</h2><h3 id="2-4-1-算术运算符"><a href="#2-4-1-算术运算符" class="headerlink" title="2.4.1 算术运算符"></a>2.4.1 算术运算符</h3><p>+  正号 加<br>-  负号 减<br>*<br>/<br>% mod<br>++  自增1<br>--  自减1<br>+  连接符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AriTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 除号：/</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> result1 = num1 / num2;</span><br><span class="line">        System.out.println(result1); <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">int</span> result2 = num1/num2*num2;</span><br><span class="line">        System.out.println(result2); <span class="comment">//10 </span></span><br><span class="line">        <span class="keyword">double</span> result3 = num1/num2; <span class="comment">//2.0 相当于把整形2赋值给double</span></span><br><span class="line">        <span class="keyword">double</span> result4 = num1/num2 + <span class="number">0.0</span>; <span class="comment">//2.0</span></span><br><span class="line">        System.out.println(result4);</span><br><span class="line">        <span class="keyword">double</span> result5 = num1/(num2+<span class="number">0.0</span>);</span><br><span class="line">        System.out.println(result5); <span class="comment">//2.4 相当于int/double</span></span><br><span class="line">        <span class="keyword">double</span> result6 = (<span class="keyword">double</span>)num1/num2; <span class="comment">//2.4 把num1强转</span></span><br><span class="line">        System.out.println(result6);</span><br><span class="line">        <span class="keyword">double</span> result7 = (<span class="keyword">double</span>)(num1/num2); <span class="comment">//2.0 把int型的2强转</span></span><br><span class="line">        System.out.println(result7);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//%:mod运算</span></span><br><span class="line">        <span class="comment">//结果的负号与被模数的符号相同</span></span><br><span class="line">        <span class="comment">//开发中，判断是否能除尽</span></span><br><span class="line">        <span class="keyword">int</span> m1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m1 % n1 = "</span> + m1 % n1 );</span><br><span class="line">        <span class="keyword">int</span> m2 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m2 % n2 = "</span> + m2 % n2);</span><br><span class="line">        <span class="keyword">int</span> m3 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m3 % n3 = "</span> + m3 % n3 );</span><br><span class="line">        <span class="keyword">int</span> m4 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n4 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m4 % n4 = "</span> + m4 % n4 );</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//（前）++ ：先自增1，然后再运算   运算可以是赋值之外的运算</span></span><br><span class="line">        <span class="comment">//（后）++ ：先运算，后自增1</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = ++a1;  <span class="comment">//先a1+1 再赋值给b1</span></span><br><span class="line">        <span class="keyword">int</span> a2 = <span class="number">10</span>;    <span class="comment">//先把10赋值给b2，再自增1</span></span><br><span class="line">        <span class="keyword">int</span> b2 = a2++;</span><br><span class="line">        System.out.println(<span class="string">"a1 = "</span>+ a1 + <span class="string">",b1 = "</span> + b1 ); <span class="comment">//a1 = 11,b1 = 11</span></span><br><span class="line">        System.out.println(<span class="string">"a2 = "</span>+ a2 + <span class="string">",b2 = "</span> + b2 ); <span class="comment">//a1 = 11,b1 = 10</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">        s1++;</span><br><span class="line">        System.out.println(s1);  <span class="comment">//11  自增1 不会改变变量自身的数据类型</span></span><br><span class="line">        <span class="keyword">byte</span> bb1 = <span class="number">127</span>;</span><br><span class="line">        bb1++;</span><br><span class="line">        System.out.println(bb1);  <span class="comment">//-128  二进制+1</span></span><br><span class="line">        <span class="comment">//（前）-- 先自减1 后运算</span></span><br><span class="line">        <span class="comment">//（后）-- 先运算 后自减1</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b4 = --a4;</span><br><span class="line">        System.out.println(<span class="string">"a4="</span>+a4+<span class="string">",b4="</span>+b4); <span class="comment">//a4=9,b4=9</span></span><br><span class="line">    </span><br><span class="line">         <span class="comment">/*练习：随意给出一个整数，打印显示它的个位数，十位数，百位数的值。 格式如下： 数字xxx的情况如下： 个位数： 十位数： 百位数：</span></span><br><span class="line"><span class="comment">         例如： 数字153的情况如下： 个位数：3 十位数：5 百位数：1 */</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">153</span>;</span><br><span class="line">        <span class="keyword">int</span> hun = num/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (num-hun*<span class="number">100</span>)/<span class="number">10</span>;  <span class="comment">//  num%100/10</span></span><br><span class="line">        <span class="keyword">int</span> one = num - <span class="number">100</span>*hun-<span class="number">10</span>*ten; <span class="comment">// num%10  %1是0</span></span><br><span class="line">        System.out.println(<span class="string">"个位数："</span>+one+<span class="string">'\n'</span>+<span class="string">" 十位数："</span>+ten+<span class="string">" 百位数："</span>+hun);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-赋值运算符"><a href="#2-4-2-赋值运算符" class="headerlink" title="2.4.2 赋值运算符"></a>2.4.2 赋值运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 支持连续赋值</span><br><span class="line"> = 两边数据类型不一致 可以使用自动类型转换或强制类型转换</span><br><span class="line"> 包括：= += -= *= /= %=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetValueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//赋值符号：=</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j1 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//连续赋值</span></span><br><span class="line">        <span class="keyword">int</span> i2,j2;</span><br><span class="line">        i2 = j2 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">10</span>,j3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------------</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        num1 += <span class="number">2</span>;<span class="comment">// 12 相当于 num1 = num1+2</span></span><br><span class="line">        num1 %= <span class="number">5</span>;   <span class="comment">//不会改变变量本身的数据类型</span></span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="comment">// 开发中，如果希望变量实现+2的操作，有几种加法（前提：int num=10）</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        num = num + <span class="number">2</span>;</span><br><span class="line">        num += <span class="number">2</span>; <span class="comment">//推荐</span></span><br><span class="line">        <span class="comment">//实现 +1</span></span><br><span class="line">        <span class="comment">//前两种 以及 ++运算 （推荐） 经常使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        i *= <span class="number">0.1</span>;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 0  不改变数据类型  0.1截断</span></span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习2</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">        n *= m++;  <span class="comment">//m=3,n=6</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习3</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        n1 += (n1++) + (++n1);</span><br><span class="line">        System.out.println(n1); <span class="comment">//n = 32  10+10+12  (++n1)中的n1已经是11了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-比较运算符"><a href="#2-4-3-比较运算符" class="headerlink" title="2.4.3 比较运算符"></a>2.4.3 比较运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较运算符</span></span><br><span class="line"><span class="comment">== != &gt; &lt; &gt;= &lt;= instanceof</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.比较运算符的结果是boolean类型</span></span><br><span class="line"><span class="comment">2.区分== 和  =</span></span><br><span class="line"><span class="comment">3.== 和 != 不仅可以用于数值类型数据之间，还可以用在其他引用类型的变量之间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        System.out.println(i==j);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(i=j);   <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(b1==b2);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(b1=b2);   <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-逻辑运算符"><a href="#2-4-4-逻辑运算符" class="headerlink" title="2.4.4 逻辑运算符"></a>2.4.4 逻辑运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符</span></span><br><span class="line"><span class="comment">&amp;逻辑与 &amp;&amp;短路与 |逻辑或 || 短路或 !逻辑非 ^ 逻辑异或</span></span><br><span class="line"><span class="comment">1.用于boolean型变量之间的运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//区分&amp;  和&amp;&amp;</span></span><br><span class="line">        <span class="comment">//运算结果相同；当符号左边是true时，都会执行右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边是false时,只有&amp;会执行右边的计算</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        b1 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b1 &amp; (num1++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">true</span>;</span><br><span class="line">        b2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b2&amp;&amp; (num2++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="comment">//b2已经是false了，短路与后面的语句就不再执行了，前面是true就要执行</span></span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//区分：| 与 ||</span></span><br><span class="line">        <span class="comment">//运算结果相同，当符号左边是false时，二者都会执行符号右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边为true时，只有|继续执行右边语句</span></span><br><span class="line">        <span class="comment">//开发中推荐使用&amp;&amp; ||</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-位运算符"><a href="#2-4-5-位运算符" class="headerlink" title="2.4.5 位运算符"></a>2.4.5 位运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位运算符 （了解）</span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.操作整型数据</span></span><br><span class="line"><span class="comment">2.&lt;&lt; 每向左移1位 相当于*2   左移 末尾补0</span></span><br><span class="line"><span class="comment">  &gt;&gt; 每向右移1位 相当于/2   右移 根据原先的符号，左边补1或0</span></span><br><span class="line"><span class="comment">  &gt;&gt;&gt; 无符号右移 都用00在前面补  负数会变成正数</span></span><br><span class="line"><span class="comment">  &amp;  二进制各位进行与运算 0位false 1为true</span></span><br><span class="line"><span class="comment">  |  二进制各位进行或运算</span></span><br><span class="line"><span class="comment">  ^  二进制各位进行异或运算</span></span><br><span class="line"><span class="comment">  ~  二进制码按补码各位取反</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  最高效方式计算 2*8？   2&lt;&lt;3 或 8&lt;&lt;1 乘法就是两个8相加或者8个2相加，底层运算更复杂</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">21</span>;</span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;2: "</span>+(i&lt;&lt;<span class="number">2</span>));  <span class="comment">//84</span></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;3: "</span>+(i&lt;&lt;<span class="number">3</span>));  <span class="comment">//168</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;27: "</span>+(i&lt;&lt;<span class="number">27</span>)); <span class="comment">//符号改变 int 32bit 二进制的第一位是符号位，1是负数，0是正数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习： 交换两个变量的值</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一:定义临时变量（推荐）</span></span><br><span class="line">        <span class="keyword">int</span> temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：好处：不用定义临时变量 节省内存空间</span></span><br><span class="line">        <span class="comment">//弊端：相加可能超出存储范围，只能用于数值型</span></span><br><span class="line">        num1 = num1 + num2;</span><br><span class="line">        num2 = num1 - num2;</span><br><span class="line">        num1 = num1 - num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：位运算符  m = (m^n)^n 也只能用于数值类型</span></span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        num2 = num1 ^ num2;</span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-6-三元运算符"><a href="#2-4-6-三元运算符" class="headerlink" title="2.4.6 三元运算符"></a>2.4.6 三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符 三目运算符</span></span><br><span class="line"><span class="comment">1.格式： (条件表达式)?表达式1 ： 表达式2</span></span><br><span class="line"><span class="comment">2.条件表达式的结果是boolean</span></span><br><span class="line"><span class="comment">    true执行表达式1</span></span><br><span class="line"><span class="comment">    false执行表达式2</span></span><br><span class="line"><span class="comment">3.表达式1和表达式2 能够统一为一个类型，才能用一个新的变量去接收</span></span><br><span class="line"><span class="comment">4.可以嵌套使用</span></span><br><span class="line"><span class="comment">5.凡是三元运算符，都可以改写为if-else；相反则不行</span></span><br><span class="line"><span class="comment">6.如果既可以用三元运算符又可以使用if-else 优先用三元运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TripleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取两个整数的较大值</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> max = (m&gt;n)? m : n;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        <span class="keyword">double</span> max0 = (m&gt;n)? <span class="number">2</span> : <span class="number">1.0</span>;</span><br><span class="line">        n=<span class="number">12</span>;</span><br><span class="line">        String maxStr = (m&gt;n)? <span class="string">"big"</span> : ((m == n)? <span class="string">"equal"</span>:<span class="string">"small"</span>);  <span class="comment">//三元运算符作为一个表达式 里面输出的是String</span></span><br><span class="line">        System.out.println(maxStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取三个数的最大值</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">43</span>;</span><br><span class="line">        <span class="keyword">int</span> max1 = (n1&gt;n2)? n1 : n2;</span><br><span class="line">        <span class="keyword">int</span> max2 = (max1&gt;n3)? max1 : n3;</span><br><span class="line">        System.out.println(max2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-运算符的优先级"><a href="#2-4-7-运算符的优先级" class="headerlink" title="2.4.7 运算符的优先级"></a>2.4.7 运算符的优先级</h3><p>了解</p><h2 id="2-5-程序流程控制"><a href="#2-5-程序流程控制" class="headerlink" title="2.5 程序流程控制"></a>2.5 程序流程控制</h2><h3 id="2-5-0-使用Scanner获取数据"><a href="#2-5-0-使用Scanner获取数据" class="headerlink" title="2.5.0 使用Scanner获取数据"></a>2.5.0 使用Scanner获取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何从键盘获取不同类型的变量：需要Scanner类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">具体实现步骤：</span></span><br><span class="line"><span class="comment">1. 导包： import java.util.Scanner; java.util为包名，Scanner为类</span></span><br><span class="line"><span class="comment">2.Scanner的实例化</span></span><br><span class="line"><span class="comment">3.调用Scanner类的相关方法，来获取指定类型的变量</span></span><br><span class="line"><span class="comment">注意：如果输入的数据类型与要求不匹配时，会报异常导致程序终止运行 InputMisMatchException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//Scanner为类 scan为标识符 new为关键字 System.in为从系统输入 新建了以个对象</span></span><br><span class="line">        System.out.println(<span class="string">"input your name:"</span>);  <span class="comment">//char以string替代，没有char相关方法</span></span><br><span class="line">        String name = scan.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">"input your age:"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = scan.nextInt(); <span class="comment">//nextInt为Scanner类中的方法之一</span></span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(<span class="string">"input your weight:"</span>);</span><br><span class="line">        <span class="keyword">double</span> weight = scan.nextDouble();</span><br><span class="line">        System.out.println(weight);</span><br><span class="line">        System.out.println(<span class="string">"Are u single?(true/false)"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> status = scan.nextBoolean();</span><br><span class="line">        System.out.println(status);</span><br><span class="line">        System.out.println(<span class="string">"input your gender"</span>);</span><br><span class="line">        String gender = scan.next();</span><br><span class="line">        <span class="keyword">char</span> genderChar = gender.charAt(<span class="number">0</span>); <span class="comment">//变量名.charAt()  获取索引位置0上的字符</span></span><br><span class="line">        System.out.println(genderChar);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-1-分支结构"><a href="#2-5-1-分支结构" class="headerlink" title="2.5.1 分支结构"></a>2.5.1 分支结构</h3><h4 id="if-else-if-else-结构"><a href="#if-else-if-else-结构" class="headerlink" title="if- else if -else 结构"></a>if- else if -else 结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分支结构中的if else（条件判断结构）</span></span><br><span class="line"><span class="comment">三种结构</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式1)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式2) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式3) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式3&#125;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式n</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//举例1</span></span><br><span class="line">        <span class="keyword">int</span> heartBeats = <span class="number">79</span>;</span><br><span class="line">        <span class="keyword">if</span> (heartBeats &lt;<span class="number">60</span> || heartBeats&gt;<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"further check"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"healthy"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例2</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"anime"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"porn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例3</span></span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"false"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"teen"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"grownup"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.else 结构是可选的,如果没有结果可以不输出</span></span><br><span class="line"><span class="comment">2.针对条件表达式：</span></span><br><span class="line"><span class="comment">&gt;如果多个条件表达式之间是互斥关系（没有交集），判断和执行语句上下位置无所谓</span></span><br><span class="line"><span class="comment">&gt;如果有交集，需要根据实际情况考虑清楚应该讲那个结构声明在上面</span></span><br><span class="line"><span class="comment">&gt;如果有包含关系，通常情况下要将范围小的放在范围大的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input your grade:(0-100)"</span>);</span><br><span class="line">        <span class="keyword">int</span> grade = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (grade == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"BMW automobile"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">80</span> &amp;&amp; grade&lt;=<span class="number">99</span> )&#123;</span><br><span class="line">            <span class="comment">//不能写作 80&lt;grade&lt;=99,前面一步结果为boolean，不能和后面的int进行比较</span></span><br><span class="line">            System.out.println(<span class="string">"iPhone Xs Max"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">60</span> &amp;&amp; grade&lt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"iPad Pro"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2：将输入的三个数排序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.if-else的结构是可以嵌套的</span></span><br><span class="line"><span class="comment">2.嵌套结构中的大括号是可以省略的（还是加上好，可能经常要在其中加入其他语句），只执行if下的1句</span></span><br><span class="line"><span class="comment">3.else 就近原则 和最近的if配对</span></span><br><span class="line"><span class="comment">4.if(条件)，判断条件中如果变量是boolean，=号也能编译通过</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iftest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input three integral:(finish with enter)"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> c = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a&gt;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;a)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;b)&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;b)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;a)&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：彩票问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> ranNum = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"input your lottery number:"</span>);</span><br><span class="line">        <span class="keyword">int</span> lotNum = scan.nextInt();</span><br><span class="line">        System.out.println(ranNum);</span><br><span class="line">        <span class="keyword">int</span> rTen = ranNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> rOne = ranNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lTen = lotNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lOne = lotNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (lTen == rTen &amp;&amp; lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$10000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne &amp;&amp; lOne == rTen)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$3000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rTen || lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$1000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne || lOne == rTen) &#123;</span><br><span class="line">            System.out.println(<span class="string">"$500"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：如何获取一个随机数：10-99</span></span><br><span class="line"><span class="keyword">double</span> value = Math.random();<span class="comment">//区间[0.0,1.0)</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">System.out.println(num)</span><br><span class="line"><span class="comment">//公式  [a,b]: (int)(Math.random()*(b-a+1)+a)</span></span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if(String的变量名.equals());</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input height(cm) wealth(10Grand) appearance(true/false:"</span>);</span><br><span class="line">        <span class="keyword">double</span> height = scan.nextDouble();</span><br><span class="line">        <span class="keyword">int</span> wealth = scan.nextInt();</span><br><span class="line">        <span class="keyword">boolean</span> appearance = scan.nextBoolean();</span><br><span class="line">        <span class="keyword">if</span> (height&gt;<span class="number">180.0</span> &amp;&amp;wealth&gt;<span class="number">1000</span> &amp;&amp; appearance== <span class="keyword">true</span> )&#123;</span><br><span class="line">            System.out.println(<span class="string">"marry him"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height&gt;<span class="number">180.0</span> ||wealth&gt;<span class="number">1000</span> || appearance== <span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"think twice"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"find a better one"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch - case结构"></a>switch - case结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.格式</span></span><br><span class="line"><span class="comment">switch(表达式)&#123;</span></span><br><span class="line"><span class="comment">case 常量1：</span></span><br><span class="line"><span class="comment">     执行语句1；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">case 常量2：</span></span><br><span class="line"><span class="comment">     执行语句2；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">default:</span></span><br><span class="line"><span class="comment">      执行语句n;</span></span><br><span class="line"><span class="comment">      //break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.说明：</span></span><br><span class="line"><span class="comment">&gt; 根据switch表达式的值，依次匹配case中的常量。一旦匹配成功，进入相应case中结构中</span></span><br><span class="line"><span class="comment">调用执行语句，调用完毕后，则仍然继续向下执行其他case中的执行语句，直到遇到break</span></span><br><span class="line"><span class="comment">或者switch结构结束。</span></span><br><span class="line"><span class="comment">&gt; break,在switch case结构中，一旦遇到就跳出，是可选的</span></span><br><span class="line"><span class="comment">&gt; switch 结构中的表达式只能是如下的6中数据类型之一：</span></span><br><span class="line"><span class="comment">byte short int char String（JDK7.0新增） 枚举类型(JDK 5.0新增)</span></span><br><span class="line"><span class="comment">&gt;case后面只能声明常量，不能声明范围</span></span><br><span class="line"><span class="comment">&gt;default 类似于if - else中的 else ，也是可选的，而且位置是灵活的</span></span><br><span class="line"><span class="comment">&gt;能用switch case都能用 if else，反之不行</span></span><br><span class="line"><span class="comment">&gt;写分支结构时，二者都可用时，switch中的表达式的取值不多的情况下，有限选择 switch case，因为switch case 的执行效率稍高，实际开发中用if else较多。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"zero"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"one"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"two"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"three"</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvertCapital</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input the character"</span>);</span><br><span class="line">        String character = scan.next();</span><br><span class="line">        <span class="keyword">char</span> cha = character.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (cha) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                System.out.println(<span class="string">"A"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                System.out.println(<span class="string">"B"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                System.out.println(<span class="string">"C"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                System.out.println(<span class="string">"D"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                System.out.println(<span class="string">"E"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//说明：如果执行语句相同，可以合并</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">78</span>;</span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//练习 ：一年中的第几天 但是怎么限定每个月的值的取值范围呢</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input month(1-12) &amp; date(0-31)"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> date = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> days = <span class="number">0</span>;             <span class="comment">//定义变量要初始化值</span></span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"wrong"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"this is the "</span>+ days +<span class="string">" days of 2019"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的year："</span>);</span><br><span class="line">        <span class="keyword">int</span> year = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的month："</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的day："</span>);</span><br><span class="line">        <span class="keyword">int</span> day = scan.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量来保存总天数</span></span><br><span class="line">        <span class="keyword">int</span> sumDays = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!= <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sumDays += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sumDays += <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sumDays += day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"2019年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日是当年的第"</span> + sumDays + <span class="string">"天"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-循环结构"><a href="#2-5-3-循环结构" class="headerlink" title="2.5.3 循环结构"></a>2.5.3 循环结构</h3><p>在某些条件满足的情况下，反复执行特定代码</p><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">For循环的使用</span><br><span class="line">一、循环结构的4个要素</span><br><span class="line">1.初始条件</span><br><span class="line">2.循环条件  boolean 类型</span><br><span class="line">3.循环体</span><br><span class="line">4.迭代条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、for 循环的结构</span><br><span class="line">for（1；2；4）&#123;</span><br><span class="line">    3;</span><br><span class="line">&#125;</span><br><span class="line">执行过程1&gt;2&gt;3&gt;4&gt;2&gt;3&gt;4&gt;...&gt;2 退出循环</span><br><span class="line"></span><br><span class="line">i在循环外是不可调用的</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class ForTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for(int i&#x3D;1;i &lt;&#x3D; 5;i++)&#123;</span><br><span class="line">            System.out.println(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;练习：</span><br><span class="line">        int num &#x3D; 1;  &#x2F;&#x2F;要在外面初始化值，不然可能后面无法输出 如果是if else则为二选一，一定会有值，可以不用初始化，如果只是if没有else也要初始化。</span><br><span class="line">        for(System.out.print(&#39;a&#39;);num &lt;&#x3D; 3;System.out.print(&#39;c&#39;),num++)&#123;</span><br><span class="line">            System.out.print(&#39;b&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;输出结果：abcbcbc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历100内的偶数,输出所有偶数的和，输出偶数的个数</span><br><span class="line">class TraverseEven &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int sum &#x3D; 0;  &#x2F;&#x2F;sum要在循环外创建，不然每次进循环就又赋值0了</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;&#x3D; 100; i++) &#123;</span><br><span class="line">            if (i % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum +&#x3D; i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);  &#x2F;&#x2F;写在for语句外面</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;练习</span><br><span class="line">    class ForExer&#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            for(int i&#x3D;1;i&lt;151;i++)&#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                if(i%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    System.out.print(&quot; foo&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if(i%5&#x3D;&#x3D;0)&#123;  &#x2F;&#x2F;这里不用else if 因为既是3也是5的倍数</span><br><span class="line">                    System.out.print(&quot; biz&quot;);</span><br><span class="line">                &#125;else if(i%7&#x3D;&#x3D;0) &#123;</span><br><span class="line">                    System.out.print(&quot; baz&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&#39;\n&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>break 关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break关键字的使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入正整数m,n  求最大公约数和最小公倍数  </span></span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input 2 positive integral:"</span>);</span><br><span class="line">    <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> max = (m&gt;n)?m:n;</span><br><span class="line">    <span class="keyword">int</span> min = (m&lt;n)?m:n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max; i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"greatest common divisor is "</span>+i);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//一旦执行到break 就跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = min; i&lt;=m*n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"least common multiple is "</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while循环的使用</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">while(2)&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.写while循环不能少了迭代条件，可能导致死循环。</span></span><br><span class="line"><span class="comment">2.避免死循环</span></span><br><span class="line"><span class="comment">3.for和while可以相互转换</span></span><br><span class="line"><span class="comment">4.初始条件的作用域不同</span></span><br><span class="line"><span class="comment">5.初始化条件复杂的就用while</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法：有限性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1 2 3 4 2 3 4...2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do - while"></a>do - while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do-while循环的使用</span></span><br><span class="line"><span class="comment">1;</span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125; while(2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1  3 4  2 3 4  2 3 4 ...2</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.do while循环至少会执行一次循环体</span></span><br><span class="line"><span class="comment">2.使用 for while 较多，do while 较少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;<span class="number">101</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(sum + (<span class="keyword">char</span>)count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while-true-和-for"><a href="#while-true-和-for" class="headerlink" title="while(true) 和 for( ; ; )"></a>while(true) 和 for( ; ; )</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘读入不确定个数的整数，并判断正负数的个数，输入为0时结束程序</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不再限制循环次数的结构：for(;;) while(true)</span></span><br><span class="line"><span class="comment">结束循环的方式：</span></span><br><span class="line"><span class="comment">1.循环条件返回 false</span></span><br><span class="line"><span class="comment">2.在循环体中执行break</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> postive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> negative =<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"input"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;<span class="comment">//while的判断条件是一个boolean</span></span><br><span class="line">            <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                postive++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                negative++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;System.out.println(postive);</span><br><span class="line">        System.out.println(negative);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.5.x嵌套循环</span></span><br><span class="line"><span class="comment">/* 嵌套循环的使用</span></span><br><span class="line"><span class="comment">1.定义：将一个循环结构A声明在另一个循环结构B的结构体中，就构成了嵌套循环</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">内层循环；</span></span><br><span class="line"><span class="comment">外层循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.内层循环结构遍历一遍，相当于外层循环体执行了一次</span></span><br><span class="line"><span class="comment">4.外层m次，内层n次，内层循环体执行了m*n次</span></span><br><span class="line"><span class="comment">5.外层控制行数，内层控制列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=<span class="number">4</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=<span class="number">5</span>-m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印菱形 lozenge diamond</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileExer1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">5</span>-i;k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下半部分 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套循环的应用：九九乘法表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplicationTable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">"*"</span>+j+<span class="string">"="</span>+(i*j)+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法优化：输出质数"><a href="#算法优化：输出质数" class="headerlink" title="算法优化：输出质数"></a>算法优化：输出质数</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100以内所有质数的输出</span></span><br><span class="line"><span class="comment">//自己做的 （没有引入boolean,错误做法）</span></span><br><span class="line"><span class="comment">//流程控制结构的的使用+算法逻辑（难点）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(i-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于10的情况</span></span><br><span class="line">            <span class="comment">//if (i%2!=0&amp;&amp;i%3!=0&amp;&amp;i%5!=0&amp;&amp;i%7!=0)&#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                    count0++;</span><br><span class="line">                    <span class="keyword">break</span>;  <span class="comment">//使用break来结束循环，就能够只打印一次</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count0);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;<span class="comment">//遍历100以内的自然数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt; i;j++)&#123;<span class="comment">//j:被i去除</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;    <span class="comment">//i=2直接没进入内循环，所以是true就输出了</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对质数问题的优化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=i-<span class="number">1</span> ;j++)&#123;</span><br><span class="line">          <span class="comment">//  for(int j = 2;j &lt;=Math.sqrt(i) ;j++)&#123;</span></span><br><span class="line">                <span class="comment">//优化2 开根号 使用两个数进行因式分解，就只要考虑小的一段，开根号为因式分解的中间临界点</span></span><br><span class="line">                <span class="comment">//对本身是质数的自然数有效</span></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//break;   //优化1：只对非质数有效的优化</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(i);</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">        <span class="comment">//衡量优化的指标  31511ms 优化1后 3560ms 优化2 后214ms</span></span><br><span class="line">        <span class="comment">//不再输出只计数       40144ms 优化1后 5064ms 优化2 后41ms</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出质数的实现方式二；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        label: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=Math.sqrt(i) ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> label;   <span class="comment">//一旦被除尽，就进入下一个i；</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   凡是能执行到吃步骤的就都是质数</span></span><br><span class="line">                System.out.println(i);<span class="comment">//是我一开始想尝试的做法</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ; <span class="comment">//199</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-continue-的用法【带标签】"><a href="#break-continue-的用法【带标签】" class="headerlink" title="break continue 的用法【带标签】"></a>break continue 的用法【带标签】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break coutinue 的使用</span></span><br><span class="line"><span class="comment">break： switch case</span></span><br><span class="line"><span class="comment">          循环结构：  结束当前循环</span></span><br><span class="line"><span class="comment">continue: 循环结构    结束当次循环</span></span><br><span class="line"><span class="comment">相同：</span></span><br><span class="line"><span class="comment">break 和continue后不能加语句，无法编译</span></span><br><span class="line"><span class="comment">默认跳出包裹此关键字最近一层的循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//break;  //123</span></span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//123567910</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       l: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// break l;   //结束指定标识的一层循环结构  123</span></span><br><span class="line">                    <span class="keyword">continue</span> l;  <span class="comment">//  结束指定标识的一层循环结构的当次循环 123123123123</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>衡量一个功能代码的优劣势：</p><ol><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率与低存储：<strong>时间复杂度</strong>、空间复杂度（衡量算法的好坏）</li></ol>]]></content>
    
    <summary type="html">
    
      Java基础：基本语法
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>香港选举制度</title>
    <link href="https://paranoiddemon.github.io/blog/posts/hk-election.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/hk-election.html</id>
    <published>2020-06-10T16:22:46.000Z</published>
    <updated>2020-06-30T01:09:23.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、特首选举："><a href="#一、特首选举：" class="headerlink" title="一、特首选举："></a>一、特首选举：</h1><p>1、特首 </p><p>任期5年，可以连任一届，获得601票以上。</p><p>候选人需获得选委会150人以上提名（提前三个月）</p><p>2、选委会</p><p><img src="https://i.loli.net/2020/06/11/dknejl2QoXs7Nri.png" alt="选委会构成"></p><p>由20多万专业界别登记的选民选出，选举委员会委员是以个人身份投票，而选举委员会每届任期五年</p><p>其中宗教界界别分组（60名委员）是由六个指定团体提名产生。<br>香港地区全国人民代表大会代表（36名委员）及立法会议员（70名委员）为当然委员。<br>117个（港九57+新界60）经由民选区议员相互选出而产生</p><p> 选委会的代表性和有权选举的人存在诸多<strong>不合理</strong>之处：</p><blockquote><p>例如代表中小学教师的教育界有80,643人有权投票，可选出30个选举委员；与此同时，渔农界只有154人有权投票，却可选出60个选举委员。<br>有些组别例如会计界，只要是注册会计师就可以投票，全港近三万名名会计从业员中有26,001人是选民。但到了保险界，却只有保险公司的东主才可以投票，于是全港近五万名的保险从业员都没有投票权，只有131名东主是选民。至于为什么会计界和保险界有不同做法，是没有解释的。<br>回到刚才提到的渔农界，那154人和现役渔民或农民不一定有关，也不是由他们所选出，而是由规定的一系列渔农业团体作为代表。至于为什么是这些团体而不是另一些团体，这些团体是否有代表性，新成立的团体要怎样才可能为被指定的团体，同样是没有解释的。</p></blockquote><h1 id="二、立法会选举"><a href="#二、立法会选举" class="headerlink" title="二、立法会选举"></a>二、立法会选举</h1><p>职责：</p><ul><li>制定、修改和废除法律（参见：三读）</li><li>控制公共开支</li><li>监察政府工作</li><li>审核、通过政府的财政预算</li><li>接受香港居民申诉</li><li>同意终审法院法官和高等法院首席法官的任免</li><li>如立法会全体议员四分之一联合动议，指控行政长官有严重违法或渎职行为而不辞职的话，立法会可通过进行调查，并委托终审法院首席法官组成独立调查委员会进行调查。如调查委员会调查后认为有足够证据构成对行政长官的指控，立法会会对是否提出弹劾案进行表决。如果立法会以全体议员三分之二通过的话，可提出弹劾行政长官案，并报请中央人民政府决定。</li></ul><p>立法会共70议席</p><p>任期4年</p><p>35个议席：五个选区直选（300多万选民）</p><p>香港岛6席：中西区、湾仔区、东区、南区</p><p>九龙西6席：油尖旺区、深水埗区、九龙城区</p><p>九龙东5席：黄大仙区、观塘区</p><p>新界西9席：荃湾区、屯门区、元朗区、葵青区、离岛区</p><p>新界东9席：北区、大埔区、沙田区、西贡区</p><p>35个议席：29个功能界别</p><p>其中：</p><p>其他26界：26席</p><p>劳工界：3席</p><p>区议会第一界别（区议员互选1席）</p><p>区议会第二界别超级区议员（5席）由300多万选区选民直选，但是候选人提名（15个以上）及参选都来自区议会</p><p><img src="https://i.loli.net/2020/06/11/p9lvrZMm6tqkTUO.png" alt="立法会部分议席"></p><h1 id="三、区议会选举"><a href="#三、区议会选举" class="headerlink" title="三、区议会选举"></a>三、区议会选举</h1><p>任期4年，就市民日常生活事务向政府提供意见，没有立法权</p><p>18个选区</p><p>479席（每年会变化）当然议席27，民选议席452</p><p>将会影响：立法会中6席，选委会中117席的选出</p><p>2,943,842名登记选民投票，投票率71.23%     </p><p>57.44%vs41.32%：民主派vs建制派（实际票数）</p>]]></content>
    
    <summary type="html">
    
      香港选举制度概要
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL基础笔记</title>
    <link href="https://paranoiddemon.github.io/blog/posts/mysql-basic.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/mysql-basic.html</id>
    <published>2020-06-08T16:22:46.000Z</published>
    <updated>2020-07-15T14:36:55.988Z</updated>
    
    <content type="html"><![CDATA[<p>B站视频教程：<a href="https://www.bilibili.com/video/BV12b411K7Zu?p=1" target="_blank" rel="noopener">MySQL 基础+高级篇- 数据库 -sql -尚硅谷</a><br>MySql8.0：<a href="https://zhuanlan.zhihu.com/p/37152572" target="_blank" rel="noopener">MySql安装</a><br>Navicat 15： <a href="https://www.ghpym.com/navicatpatchdoc.html" target="_blank" rel="noopener">Navicat注册机</a></p><p>DB/DBMS</p><p>Sql/MySql</p><table><thead><tr><th>分类</th><th>中文</th><th>语法</th></tr></thead><tbody><tr><td>DQL（Data Query Language）</td><td>数据查询语言</td><td>select</td></tr><tr><td>DML  (Data Manipulate Language)</td><td>数据操作语言</td><td>insert 、update、delete</td></tr><tr><td>DDL（Data Define Languge）</td><td>数据定义语言</td><td>create、drop、alter</td></tr><tr><td>TCL（Transaction Control Language）</td><td>事务控制语言</td><td>commit、rollback</td></tr></tbody></table><h1 id="DQL-查询"><a href="#DQL-查询" class="headerlink" title="DQL 查询"></a>DQL 查询</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表 FROM 表名；</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.查询列表可以是：表中的字段、常量值、表达式、函数</span><br><span class="line">2.查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#1. 查询单个字段</span><br><span class="line">SELECT email FROM employees;</span><br><span class="line"></span><br><span class="line">#2. 查询多个字段</span><br><span class="line">SELECT email, last_name FROM employees;</span><br><span class="line"></span><br><span class="line">#3. 查询全部字段</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">#4. 查询常量值</span><br><span class="line">SELECT 100;</span><br><span class="line">SELECT &#39;john&#39;;</span><br><span class="line"></span><br><span class="line">#5.查询表达式</span><br><span class="line">SELECT 100*98;</span><br><span class="line"></span><br><span class="line">#6.查询函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line">#7.字段起别名</span><br><span class="line">&#x2F;*</span><br><span class="line">1.便于理解</span><br><span class="line">2.如果要查询的字段有重名，可以区分开</span><br><span class="line">*&#x2F;</span><br><span class="line">#方式一：使用as</span><br><span class="line">SELECT 100*98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#案例：查询salary，显示结果为out put,含有关键词或者空格</span><br><span class="line">SELECT salary  AS &quot;out put&quot; FROM employees;</span><br><span class="line"></span><br><span class="line">#8.去重</span><br><span class="line"></span><br><span class="line">#案例：查询员工表中中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line">#9.+号的作用</span><br><span class="line">&#x2F;*</span><br><span class="line">mysql中的+号：</span><br><span class="line">仅仅只有一个功能：运算符</span><br><span class="line"></span><br><span class="line">1.两个操作数都为数值型，则做加法运算</span><br><span class="line">  SELECT 100+90; </span><br><span class="line"></span><br><span class="line">2.其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">- SELECT &#39;123&#39;+90;   如果转换成功，则继续做加法运算</span><br><span class="line">- SELECT &#39;John&#39;+90;  如果转换失败，则将字符型数值转换成0</span><br><span class="line">- SELECT null +10;   只要其中一方为null，则结果肯定为null；</span><br><span class="line">*&#x2F;</span><br><span class="line"># 查询员工们和姓连接过程一个字段</span><br><span class="line">SELECT last_name+first_name AS 姓名 FROM employees;</span><br><span class="line">SELECT CONCAT(last_name,&#39; &#39;, first_name) AS 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#显示表的结构，并查询全部数据</span><br><span class="line">DESC departments;</span><br><span class="line">SELECT * FROM departments;</span><br><span class="line"></span><br><span class="line">#显示出employees的全部列，各个列之间用逗号连接，列头为output</span><br><span class="line">SELECT </span><br><span class="line">IFNULL(commission_pct,0) AS 奖金率,commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line">#----------------------------------------------------</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name,&#39;,&#39;,IFNULL(commission_pct,0)) AS output</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名 </span><br><span class="line">WHERE 筛选条件；</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1. 按条件表达式筛选</span><br><span class="line">条件运算符：&gt; &lt; &#x3D; !&#x3D; or &lt;&gt; &gt;&#x3D; &lt;&#x3D;</span><br><span class="line"></span><br><span class="line">2.按逻辑表达式筛选</span><br><span class="line">逻辑运算符：用于连接条件表达式</span><br><span class="line">&amp;&amp; || ！</span><br><span class="line">and or not</span><br><span class="line">and: 两个条件都为true</span><br><span class="line">or: 一个条件为true，则为true</span><br><span class="line">not：相反</span><br><span class="line"></span><br><span class="line">3.模糊查询</span><br><span class="line">like</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.按条件表达式筛选</span><br><span class="line">#案例1：查询工资&gt;12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;12000;</span><br><span class="line">#案例2：查询部门编号不等于90的员工名和部门编号</span><br><span class="line">SELECT</span><br><span class="line">last_name, department_id</span><br><span class="line">FROM </span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id!&#x3D;90 ;</span><br><span class="line"></span><br><span class="line">#2.按逻辑表达式筛选</span><br><span class="line"></span><br><span class="line">#案例1：查询工资在10000-20000的员工名、工资、及奖金</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name) AS &#39;name&#39;,</span><br><span class="line">salary,</span><br><span class="line">IFNULL(commission_pct,0) AS comission</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;&#x3D;10000 AND salary&lt;&#x3D;20000;</span><br><span class="line"></span><br><span class="line">#案例2：查询部门编号不在90-110之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&lt;90 OR department_id&gt;110 OR salary&gt;&#x3D;15000;</span><br><span class="line"></span><br><span class="line">#3.模糊查询</span><br><span class="line">&#x2F;*</span><br><span class="line">like </span><br><span class="line">特点：</span><br><span class="line">一般和通配符搭配使用</span><br><span class="line">通配符：</span><br><span class="line">% 任意多个字符，包含0个字符</span><br><span class="line">_ 任意单个字符</span><br><span class="line">\ 转义字符</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">is not null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.like</span><br><span class="line"></span><br><span class="line">#案例1：查询员工名中包含字符a的员工信息</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;%a%&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name like &#39;__n_l%&#39;;</span><br><span class="line"></span><br><span class="line">#案例3：查询员工名中第二个字符为_的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;_a_%&#39; ESCAPE &#39;a&#39;;</span><br><span class="line"># 效果一样last_name LIKE &#39;_\_%&#39;;</span><br><span class="line"></span><br><span class="line">#2. between and </span><br><span class="line">#case 1: 查询员工编号在100-120的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id BETWEEN 100 AND 120; #包含临界值，不可以颠倒临界值顺序</span><br><span class="line"></span><br><span class="line">#3. in</span><br><span class="line">&#x2F;*</span><br><span class="line">判断某字段的值是否属于in列表中的某一项</span><br><span class="line">-提高简洁度</span><br><span class="line">-in列表的值类型必须一致或兼容</span><br><span class="line">-不支持通配符的使用</span><br><span class="line">*&#x2F;</span><br><span class="line"># case：查询员工的工种编号是IT_PROG、AD_VP、AD_PRES中的员工名和工种编号</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id &#x3D;&#39;IT_PROG&#39; OR job_id&#x3D;&#39;AD_VP&#39; OR job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line">#-------------------------------------------------------</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id IN(&#39;IT_PROG&#39;,&#39;AD_VP&#39; ,&#39;AD_PRES&#39;);</span><br><span class="line"></span><br><span class="line">#4 is null&#x2F; is not null</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x3D; &lt;&gt;不能判断null值，is&#x2F; is not 才可以判断null值</span><br><span class="line">*&#x2F;</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL;</span><br><span class="line"></span><br><span class="line">#安全等于&lt;&#x3D;&gt; 判断null值和普通数值</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct &lt;&#x3D;&gt; NULL;</span><br><span class="line"></span><br><span class="line">#case2:查询工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary &lt;&#x3D;&gt; 12000;</span><br><span class="line"></span><br><span class="line">#查询员工号为176的姓名和部门号和年薪</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) AS &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id&#x3D;176;</span><br><span class="line"></span><br><span class="line">#测试题</span><br><span class="line">#1.查询没有奖金，且工资小于18000的salary,last_name</span><br><span class="line">SELECT</span><br><span class="line">salary,</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL </span><br><span class="line">AND salary&lt;18000;</span><br><span class="line"></span><br><span class="line">#2.查询employees表中，job_id不为‘IT’或者工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">job_id &lt;&gt;&#39;IT&#39; OR salary&#x3D;12000;</span><br><span class="line"></span><br><span class="line">#3.查询departments的结构</span><br><span class="line">DESC departments;</span><br><span class="line"></span><br><span class="line">#4.查询departments表中涉及到了哪些位置编号</span><br><span class="line">SELECT DISTINCT</span><br><span class="line">location_id</span><br><span class="line">FROM</span><br><span class="line">departments;</span><br><span class="line"></span><br><span class="line">&#x2F;*5.SELECT * FROM employees 和</span><br><span class="line">SELECT * FROM employees WHERE commission_pct like&#39;%%&#39; AND last name like &#39;%%&#39;</span><br><span class="line">结果是否一样，原因</span><br><span class="line">不一样，值存在null的情况</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SELECT * from employees;</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">SELECT 列表</span><br><span class="line">FROM 表</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">ORDER BY 排序列表 DESC&#x2F;ASC</span><br><span class="line"> 1.ORDER BY子句支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line"> 2.ORDER BY子句一般是放在查询语句的最后面，limit子句除外</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#case 1：查询员工信息，要求工资从高到低排序</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">DESC;</span><br><span class="line"></span><br><span class="line">#------------------------------升序是默认的，可以不用写出</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">ASC;</span><br><span class="line"></span><br><span class="line">#case 2：查询部门编号&gt;&#x3D;90的员工信息，按入职时间的先后（筛选条件）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&gt;&#x3D;90</span><br><span class="line">ORDER BY</span><br><span class="line">hiredate;</span><br><span class="line"></span><br><span class="line">#case 3：按年薪的高低显示员工信息（按表达式排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class="line"></span><br><span class="line">#case 4:按年薪的高低显示员工信息（按别名排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC;</span><br><span class="line"></span><br><span class="line">#case 5:按姓名的长度显示员工的姓名和工资（按函数）</span><br><span class="line">SELECT </span><br><span class="line">LENGTH(last_name),last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"></span><br><span class="line">#case 6:查询员工信息，先按工资排序，再按员工编号排序(按多个字段排序）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY salary ASC,employee_id DESC;</span><br><span class="line"></span><br><span class="line">#1.查询员工的姓名、部门号、年薪，按年薪降序，按姓名升序</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC,last_name;</span><br><span class="line"></span><br><span class="line">#2.选择工资不在8000-17000的员工的姓名和工资，按工资降序</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">#salary&lt;8000 OR salary&gt;17000</span><br><span class="line">#NOT (salary BETWEEN 8000 AND 17000) </span><br><span class="line">salary NOT BETWEEN 8000 AND 17000</span><br><span class="line">ORDER BY</span><br><span class="line">salary DESC;</span><br><span class="line"></span><br><span class="line">#3.查询邮箱中包含e的员工信息，按邮箱字节数降序，按部门号升序</span><br><span class="line">SELECT </span><br><span class="line">*,LENGTH(email)</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">email like &#39;%e%&#39;</span><br><span class="line">ORDER BY</span><br><span class="line">LENGTH(email) DESC,department_id;</span><br></pre></td></tr></table></figure><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">概念：一组逻辑语句封装在方法体重，对外暴露方法名</span><br><span class="line">1.隐藏了实现细节</span><br><span class="line">2.提高代码的重用性</span><br><span class="line">调用：SELECT 函数名(实参列表) [from 表]；如果调用了表内的字段</span><br><span class="line">特点：1.函数名 2.函数功能</span><br><span class="line">函数可以自定义</span><br><span class="line">分类：</span><br><span class="line">1.单行函数：CONCAT、LENGTH，IFNULL等，做处理使用</span><br><span class="line">2.分组函数：做统计使用，传一组值，返回一个值，又称为统计函数、聚合函数、组函数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1. 单行函数</span><br><span class="line">&#x2F;*</span><br><span class="line">字符函数 concat substr instr length lpad rpad upper lower trim replace</span><br><span class="line">数学函数  ceil floor truncate mod round</span><br><span class="line">日期函数 now curdate curtime year month day hour minute second  str_to_date date_format monthname</span><br><span class="line">其他函数 version datebase user</span><br><span class="line">流程控制函数 if case的两种用法</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、字符函数</span><br><span class="line"></span><br><span class="line">#1.length 获取参数值的字节个数</span><br><span class="line">SELECT LENGTH(&#39;john&#39;);</span><br><span class="line">SELECT LENGTH(&#39;啊&#39;); #utf8字符集，汉字占3个字节</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39; #展示字符集</span><br><span class="line"></span><br><span class="line">#2.concat 拼接字符串</span><br><span class="line">SELECT CONCAT(last_name,&#39;_&#39;,first_name) &#39;name&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.upper、lower 改变大小写</span><br><span class="line">SELECT UPPER(&#39;john&#39;);</span><br><span class="line">SELECT LOWER(&#39;jOHN&#39;);</span><br><span class="line"># e.g. 将姓大写，名小写,然后拼接</span><br><span class="line">SELECT</span><br><span class="line">CONCAT(UPPER(last_name),&#39; &#39;,LOWER(first_name)) &#39;NAME&#39; #函数可以嵌套</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#4.substr、substring 截取字符串</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,3);   #索引都是从1开始的， nihilation</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,1,3); #ann 索引，长度</span><br><span class="line"></span><br><span class="line">#case: 姓名中首字符大写，其他小写后用_拼接</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2)))</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line">#5.instr 返回子串在字符串中的第一次出现的起始索引</span><br><span class="line">SELECT INSTR(&#39;annihilation&#39;,&#39;nihilation&#39;);</span><br><span class="line"></span><br><span class="line">#6.trim  去除两端的字符</span><br><span class="line">SELECT LENGTH(TRIM(&#39;  annihilation  &#39;));</span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aannihilationa&#39;); #输出nnihilation</span><br><span class="line"></span><br><span class="line">#7.lpad 用指定字符左填充指定长度</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #--------annihilation</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,2,&#39;-&#39;) AS output;  #an</span><br><span class="line"></span><br><span class="line">#8.rpad 用指定字符右填充指定长度</span><br><span class="line">SELECT RPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #annihilation--------</span><br><span class="line"></span><br><span class="line">#9.replace 替换</span><br><span class="line">SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;z&#39;);</span><br><span class="line"></span><br><span class="line">#二、数学函数</span><br><span class="line"></span><br><span class="line">#round 四舍五入</span><br><span class="line">SELECT ROUND(1.65);  #2</span><br><span class="line">SELECT ROUND(1.45);  #1</span><br><span class="line">SELECT ROUND(-1.65); #-2</span><br><span class="line">SELECT ROUND(1.657,2); #1.66 保留2位</span><br><span class="line"></span><br><span class="line">#ceil 向上取整，返回&gt;&#x3D;该参数的最小整数</span><br><span class="line">SELECT CEIL(1.52);  #2</span><br><span class="line">SELECT CEIL(1.00);  #1 </span><br><span class="line">SELECT CEIL(-1.02); #-1 </span><br><span class="line"></span><br><span class="line">#floor 向下取证，返回&lt;&#x3D;该参数的最大整数</span><br><span class="line">SELECT FLOOR(9.8)   #9</span><br><span class="line">SELECT FLOOR(-9.8)  #-10</span><br><span class="line"></span><br><span class="line">#truncate 截断</span><br><span class="line">SELECT TRUNCATE(1.699,1)  #1.6</span><br><span class="line"></span><br><span class="line">#mod 取余</span><br><span class="line">&#x2F;*</span><br><span class="line">mod(a,b): a-a&#x2F;b*b  (其中a&#x2F;b是取整数）</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT MOD(10,3); #1</span><br><span class="line">SELECT 10%3;</span><br><span class="line">SELECT MOD(-10,3); #-1  根据被除数的正负，取正负</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、日期函数</span><br><span class="line"></span><br><span class="line">#now 返回当前系统日期及时间 2020-06-10 17:10:22</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#curdate 返回当前系统日期   2020-06-10</span><br><span class="line">SELECT CURDATE(); </span><br><span class="line"></span><br><span class="line">#curtime 返回当前时间   17:12:15</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">#获取指定的部分：年月日、时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT YEAR(&#39;1900-1-1&#39;);</span><br><span class="line">SELECT YEAR(hiredate) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MONTH(NOW());     # 6</span><br><span class="line">SELECT MONTHNAME(NOW()); # June</span><br><span class="line"></span><br><span class="line">#DAY(date),HOUR(time),MINUTE(time),SECOND(time)</span><br><span class="line"></span><br><span class="line">#STR_TO_DATE(str,format) 将字符串转换成指定格式的日期</span><br><span class="line">&#x2F;*格式符</span><br><span class="line">%Y  20xx</span><br><span class="line">%y  xx</span><br><span class="line">%m  01,02...12</span><br><span class="line">%c  1,2...12</span><br><span class="line">%d  01,02...31</span><br><span class="line">%H  01,02...24</span><br><span class="line">%h  01,02...12</span><br><span class="line">%i  00,01...59</span><br><span class="line">%s  00,01...69</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT STR_TO_DATE(&#39;1900-01-01&#39;,&#39;%Y-%m-%d&#39;);</span><br><span class="line"></span><br><span class="line">#case 查询入职日期1992-4-3的员工信息</span><br><span class="line">SELECT *FROM employees</span><br><span class="line">WHERE hiredate&#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br><span class="line"></span><br><span class="line">#DATE_FORMAT(date,format) 将日期转换成字符</span><br><span class="line">SELECT DATE_FORMAT(&#39;2008&#x2F;1&#x2F;1&#39;,&#39;%Y年%m月%d日&#39;);</span><br><span class="line"></span><br><span class="line">#四、其他函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line"></span><br><span class="line">#五、流程控制函数</span><br><span class="line">#1.if函数：if else的效果</span><br><span class="line">SELECT IF(10&gt;5,&#39;大&#39;,&#39;小&#39;) ; #expr1条件表达式，true返回expr2，false返回expr3</span><br><span class="line">SELECT last_name,commission_pct, IF(commission_pct is null,&#39;no&#39;,&#39;yes&#39;) # if前面要加逗号</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.case函数的使用一：switch case的效果</span><br><span class="line">&#x2F;*</span><br><span class="line">java中 </span><br><span class="line">switch(变量或表达式）&#123;</span><br><span class="line">       case 常量1：语句1；break；</span><br><span class="line"> ...</span><br><span class="line"> default:语句n;break;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">mysql中   判断等值</span><br><span class="line">  CASE 要判断的变量或表达式</span><br><span class="line">WHEN 常量1 THEN 要显示的值1或语句1； </span><br><span class="line">WHEN 常量2 THEN 要显示的值2或语句2；</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ELSE 要显示的值n或语句n；</span><br><span class="line">  END </span><br><span class="line">#如果是在select后面，case作为表达式，只能显示为值，而不能用语句</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*案例：查询员工的工资，要求</span><br><span class="line">部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示为原工资</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,department_id,</span><br><span class="line">  CASE department_id</span><br><span class="line">WHEN  30 THEN salary*1.1   #是个值，不用加分号</span><br><span class="line">WHEN  40 THEN salary*1.2 </span><br><span class="line">WHEN  50 THEN salary*1.3</span><br><span class="line">ELSE  salary</span><br><span class="line">  END AS &#39;new salary&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.case函数的使用二：类似于多重if</span><br><span class="line">&#x2F;*</span><br><span class="line">java中：</span><br><span class="line">if(条件1）｛</span><br><span class="line">语句1；</span><br><span class="line">｝</span><br><span class="line">else if(条件2）｛</span><br><span class="line">语句2；</span><br><span class="line">｝</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">语句n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql中：</span><br><span class="line">case   #后面没有变量或表达式，判断区间</span><br><span class="line">when 条件1 then 显示值1 或语句1；</span><br><span class="line">when 条件2 then 显示值2 或语句2；</span><br><span class="line">...</span><br><span class="line">else 显示值n或语句n；</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">#案例：查询员工的工资情况</span><br><span class="line">如果工资&gt;20000，显示A</span><br><span class="line">如果工资&gt;15000，显示B</span><br><span class="line">如果工资&gt;10000，显示C</span><br><span class="line">否则D</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,</span><br><span class="line">CASE</span><br><span class="line">WHEN salary&gt;20000 THEN &#39;A&#39;   #字符串一定要加单引号</span><br><span class="line">WHEN salary&gt;15000THEN &#39;B&#39;</span><br><span class="line">WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">ELSE &#39;D&#39;</span><br><span class="line">END AS &#39;rank&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">#1.显示系统时间（时间+日期）</span><br><span class="line">SELECT NOW();</span><br><span class="line">#2.查询员工号、姓名、工资、以及工资提高20%后的结果</span><br><span class="line">SELECT employee_id,last_name,salary,salary*1.2 as &#39;new salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">#3.将员工的姓名按首字母排序，写出姓名长度</span><br><span class="line">SELECT last_name,length(last_name) as length,substr(last_name,1,1) as initial</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY initial;</span><br><span class="line">#区别于order by last_name 效果不一样，先首字母，后第二个字母。按initial排序，后面是随机的</span><br><span class="line"></span><br><span class="line">#4.做一个查询，产生下面结果</span><br><span class="line">&#x2F;*&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span><br><span class="line">Dream Salary</span><br><span class="line">K_ing earns 24000.00 monthly but wants 72000.00</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT CONCAT(last_name,&#39; earns &#39;,salary,&#39; monthly but wants &#39;, salary*3) as &#39;Dream Salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;&#39;K_ing&#39; and salary&#x3D;24000;</span><br><span class="line"></span><br><span class="line">#5. 使用case when，按照下面的条件</span><br><span class="line"> job     grade</span><br><span class="line">AD_PRES    A</span><br><span class="line">ST_MAN     B</span><br><span class="line">IT_PROG    C</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id job, </span><br><span class="line">CASE job_id</span><br><span class="line">WHEN &#39;AD_PRES&#39; THEN &#39;A&#39;  #字符串一定要加引号</span><br><span class="line">WHEN &#39;ST_MAN&#39;  THEN &#39;B&#39;</span><br><span class="line">WHEN &#39;IT_PROG&#39; THEN &#39;C&#39;</span><br><span class="line">END AS grade</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、分组函数</span><br><span class="line">&#x2F;*</span><br><span class="line">功能：用作统计使用，又称聚合函数、统计函数、组函数</span><br><span class="line">分类</span><br><span class="line">sum</span><br><span class="line">avg</span><br><span class="line">max</span><br><span class="line">min</span><br><span class="line">count：计算非空的</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.忽略null</span><br><span class="line">2.和dinstinct搭配使用</span><br><span class="line">3.和分组函数一同查询的字段要求是group by后的字段</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.简单使用</span><br><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT min(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,min(salary),MAX(salary),COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.参数支持类型</span><br><span class="line">&#x2F;*</span><br><span class="line">sum avg：数值型</span><br><span class="line">max min count ：字符型也可以做参数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#3.是否忽略null</span><br><span class="line">&#x2F;*</span><br><span class="line">null+任何数为null</span><br><span class="line">sum avg:忽略</span><br><span class="line">max min count ：忽略</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#4.搭配distinct  去重</span><br><span class="line">SELECT </span><br><span class="line">SUM(DISTINCT salary),  #中间没有逗号</span><br><span class="line">SUM(salary) </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary) FROM employees;</span><br><span class="line"></span><br><span class="line">#5.count函数的详细介绍</span><br><span class="line">SELECT COUNT(*) FROM employees; #统计行数</span><br><span class="line">SELECT COUNT(1) FROM employees; #加了1列1，统计行数</span><br><span class="line">SELECT COUNT(2） FROM employees; </span><br><span class="line">SELECT COUNT(&#39;abc&#39;) FROM employees; #加了1列常量，统计行数</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">效率：</span><br><span class="line">MYISAM存储引擎，count（*）效率高</span><br><span class="line">INNODB存储引擎，count（*）和count（1）相似，比count（字段）高</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#6.和分组函数一同查询的字段有限制</span><br><span class="line">SELECT AVG(salary),employee_id FROM employees; # employee_id的值无意义</span><br><span class="line"></span><br><span class="line">#查询最大入职时间和最小入职时间相差天数</span><br><span class="line">SELECT DATEDIFF(NOW(),&#39;1996-09-12&#39;) #前面减后面 8673</span><br><span class="line"></span><br><span class="line"># 查询部门编号为90的员工个数</span><br><span class="line">SELECT COUNT(department_id) #不能用count（department_id&#x3D;90）,结果和count(department_id)一样</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&#x3D;90;</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><figure class="highlight plain"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#查询每个部门的平均工资</span><br><span class="line">&#x2F;*</span><br><span class="line">SELECT column(要出现在group by后面, group_function()</span><br><span class="line">FROM table</span><br><span class="line">[WHERE 筛选条件]</span><br><span class="line">GROUP BY  分组的列表</span><br><span class="line">[ORDER BY 字句]</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">查询列表必须特殊，要求是分组函数和group by后出现的字段</span><br><span class="line">where一定放在from后面</span><br><span class="line"></span><br><span class="line">特点：1.分组查询中的筛选条件分为两类</span><br><span class="line">| |数据源|位置|关键字|</span><br><span class="line">|---------------|----------------------|-------------------|------|</span><br><span class="line">|分组前筛选       |原始表 |group by子句前    | where|</span><br><span class="line">    |分组后筛选 |分组后的结果集  |group by子句后     | having|</span><br><span class="line"></span><br><span class="line">分组函数（max min sum avg count）做条件肯定是放在having子句中</span><br><span class="line">能用分组前筛选的，优先考虑分组前筛选</span><br><span class="line"></span><br><span class="line">2.group by子句支持表达式，单个字段，多个字段（用逗号隔开）</span><br><span class="line">3.也可以添加排序，在整个分组查询的最后</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#简单的分组查询</span><br><span class="line"># case 1:查询每个工种的最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line"># case 2：查询每个位置上的部门个数</span><br><span class="line">SELECT COUNT(DISTINCT department_id),location_id</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY location_id;</span><br><span class="line"></span><br><span class="line">#推加筛选条件</span><br><span class="line"># case 1：邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line"># case 2:查询每个领导手下有奖金的员工的最高工资</span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line">#添加复杂的筛选条件</span><br><span class="line">#案例1：查询哪个部门的员工个数&gt;2</span><br><span class="line">#a.查询每个部门的员工数</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#b.根据前面的结果进行筛选</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING COUNT(*)&gt;2;      #分号视作语句的结束，在最后面用</span><br><span class="line"></span><br><span class="line">#case 2:查询每个工种有奖金的员工最高工资&gt;12000的工种编号和最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">#case 3:查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号及最低工资</span><br><span class="line">SELECT MIN(salary), manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id </span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按表达式或函数分组</span><br><span class="line"># case：按员工姓名的长度分组，查询每一组的员工个数，筛选员工数&gt;5的</span><br><span class="line">SELECT COUNT(*),LENGTH(last_name)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY LENGTH(last_name)</span><br><span class="line">HAVING COUNT(*)&gt;5;</span><br><span class="line"></span><br><span class="line">#按多个字段分组</span><br><span class="line">#case：查询每个部门每个工种的平均工资</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id,job_id; #可以调换顺序</span><br><span class="line"></span><br><span class="line">#添加排序</span><br><span class="line">#case：查询每个部门每个工种的平均工资，并且按照平均工资高低显示</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id is NOT NULL</span><br><span class="line">GROUP BY department_id,job_id</span><br><span class="line">HAVING AVG(salary)&gt;10000     #having和group by支持别名</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#1.查询个job_id员工工资的最大值、最小值、平均值、和，按job_id升序</span><br><span class="line">SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY job_id;</span><br><span class="line"></span><br><span class="line">#2.最高最低工资的差距</span><br><span class="line">SELECT MAX(salary)-MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计入</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id is not null</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;&#x3D;6000;</span><br><span class="line"></span><br><span class="line">#4.查询所有部门的编号，员工数量和工资平均值，按平均工资降序</span><br><span class="line">SELECT department_id,COUNT(*) quantity,ROUND(AVG(salary),2) avgsal</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#5.选择具有各个job_id的员工人数</span><br><span class="line">SELECT COUNT(*),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">含义：多表查询，当查询的字段来自于多个表时使用</span><br><span class="line">笛卡尔乘积现象：表1 m行，表2 n行，结果m*n行</span><br><span class="line"></span><br><span class="line">原因：没有有效的连接条件</span><br><span class="line">避免：添加有效的连接条件</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1.按年代分类：</span><br><span class="line">sql92标准：在mysql中仅仅支持内连接，在oracle等中支持部分外连接</span><br><span class="line">sql99标准（推荐）：支持内连接+外连接（左、右）+交叉连接</span><br><span class="line"></span><br><span class="line">2.按功能分类：</span><br><span class="line">内连接：</span><br><span class="line">等值连接</span><br><span class="line">非等值连接</span><br><span class="line">自连接</span><br><span class="line">外连接：</span><br><span class="line">左外连接</span><br><span class="line">右外连接</span><br><span class="line">全外连接</span><br><span class="line">交叉连接</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys; </span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#一、sql92标准</span><br><span class="line"></span><br><span class="line">#1.等值连接</span><br><span class="line">&#x2F;*</span><br><span class="line">a.多表等值连接为交集部分</span><br><span class="line">b.n表连接，至少要n-1个连接条件</span><br><span class="line">c.顺序无要求</span><br><span class="line">d.一般要起别名</span><br><span class="line">e.可以搭配排序、分组、筛选</span><br><span class="line">*&#x2F;</span><br><span class="line">#case 1</span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#case 2:查询员工名和对应的部门名</span><br><span class="line">SELECT last_name,department_name </span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.department_id&#x3D;departments.department_id;</span><br><span class="line"></span><br><span class="line">#2.为表起别名</span><br><span class="line">#case 查询员工名、工种号、工种名</span><br><span class="line">SELECT last_name,e.job_id,job_title #不知道job_id的来源。需要用表名限定</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id;   #如果起别名就全部要用，统一</span><br><span class="line"></span><br><span class="line">#3.两个表的顺序可以调换</span><br><span class="line">SELECT last_name,e.job_id,job_title #用一个表一行行去对另一个表</span><br><span class="line">FROM jobs j，employees e</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id</span><br><span class="line"></span><br><span class="line">#4.加筛选</span><br><span class="line"># case 1 :查询有奖金的员工名、部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND e.commission_pct is not null;</span><br><span class="line"></span><br><span class="line"># case 2:查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">SELECT city,department_name</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">AND city LIKE &#39;_o%&#39;;</span><br><span class="line"></span><br><span class="line">#5.加分组</span><br><span class="line">#case 1：查询每个城市的部门个数</span><br><span class="line">SELECT COUNT(*) amount ,city</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">GROUP BY city;</span><br><span class="line"></span><br><span class="line">#case 2:查询有奖金的每个部门的部门名和部门领导编号和该部门的最低工资</span><br><span class="line">SELECT d.department_name, d.manager_id,min(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">AND commission_pct is NOT NULL</span><br><span class="line">GROUP BY e.department_id,d.manager_id;</span><br><span class="line"></span><br><span class="line">#6.加排序</span><br><span class="line">#案例：查询每个工种的工种名和员工的个数，按员工个数降序</span><br><span class="line">SELECT job_title, COUNT(*)</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br><span class="line"></span><br><span class="line">#7.三表连接</span><br><span class="line">#case 1： 查询员工名、部门名、所在的城市</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e, departments d, locations l</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#2.非等值连接</span><br><span class="line">#case 1：查询员工的工资和工资级别</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e, job_grades g</span><br><span class="line">WHERE salary BETWEEN lowest_sal and highest_sal</span><br><span class="line">AND grade_level&#x3D;&#39;A&#39;;</span><br><span class="line"></span><br><span class="line">#3.自连接</span><br><span class="line">#case：查询员工名和上级的名称</span><br><span class="line">SELECT e.last_name,e.employee_id,m.last_name</span><br><span class="line">FROM employees e,employees m </span><br><span class="line">WHERE m.employee_id&#x3D;e.manager_id;</span><br><span class="line"></span><br><span class="line">#显示员工表的最大工资，工资平均值</span><br><span class="line">SELECT MAX(salary),AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#查询 员工表的job_id中包含a和e，a在前</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id like &#39;%a%e%&#39;</span><br><span class="line"></span><br><span class="line">#Exercise</span><br><span class="line"></span><br><span class="line">#1. 显示所有员工的姓名，部门号和部门名称。 </span><br><span class="line">SELECT last_name,e.department_id,department_name</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line">#2. 查询 90 号部门员工的 job_id 和 90 号部门的 location_id </span><br><span class="line">SELECT job_id,location_id,department_id</span><br><span class="line">FROM employees e, locations l</span><br><span class="line">WHERE department_id&#x3D;90 ;  #不用连接条件会产生笛卡尔乘积问题</span><br><span class="line">*-----------------------</span><br><span class="line">SELECT job_id,location_id,e.department_id</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;90 </span><br><span class="line">AND e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. 选择所有有奖金的员工的 last_name , department_name , location_id , city </span><br><span class="line">SELECT last_name,department_name,l.location_id,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#4. 选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line">SELECT last_name,job_id,e.department_id,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE city&#x3D;&#39;Toronto&#39;</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;   #三表连接，要写两个条件</span><br><span class="line"> </span><br><span class="line">#5.查询每个工种、每个部门的部门名、工种名和最低工资 </span><br><span class="line">SELECT j.job_id,department_name,job_title,MIN(salary)</span><br><span class="line">FROM jobs j, departments d,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#6.查询每个国家下的部门个数大于 2 的国家编号 </span><br><span class="line">SELECT country_id, department_id,count(*)</span><br><span class="line">FROM locations l,departments d</span><br><span class="line">WHERE l.location_id&#x3D;d.location_id</span><br><span class="line">GROUP BY country_id</span><br><span class="line">HAVING count(*)&gt;2;</span><br><span class="line">#7.择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格 式 </span><br><span class="line">&#x2F;*</span><br><span class="line">employees Emp# manager Mgr# </span><br><span class="line">kochhar   101  king    100 </span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT e.last_name employees,e.employee_id &#39;Emp#&#39;,m.last_name manager,m.employee_id &#39;Mgr#&#39;</span><br><span class="line">FROM employees e, employees m</span><br><span class="line">WHERE e.manager_id&#x3D;m.employee_id</span><br><span class="line">AND e.employee_id&#x3D;101;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#进阶7：子查询</span><br><span class="line">&#x2F;* </span><br><span class="line"></span><br><span class="line">含义：出现在其他语句内部的Select语句，称为子查询或内查询</span><br><span class="line">查询的嵌套，外部的就是外查询（主查询）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">分类</span><br><span class="line">按子查询出现的位置：</span><br><span class="line">  SELECT :仅支持标量子查询</span><br><span class="line">  FROM    支持表只查询</span><br><span class="line">（重点）WHERE&#x2F;HAVING  标量子查询 列子查询 行子查询</span><br><span class="line">EXISTS （相关子查询（ 表子查询</span><br><span class="line">按结果集的行列数不同：</span><br><span class="line">标量子查询：结果集只有一行一列</span><br><span class="line">列子查询  一列多行</span><br><span class="line">行子查询  一行多列</span><br><span class="line">表子查询  多行多列</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、WHERE或HAVING后</span><br><span class="line">-- 1、标量子查询 单行</span><br><span class="line">-- 2、列子查询  一列多行</span><br><span class="line">-- </span><br><span class="line">-- 3、特点：</span><br><span class="line">-- 子查询放在小括号内</span><br><span class="line">-- 子查询一般放在条件的右侧</span><br><span class="line">-- 标量子查询，一般搭配单行操作符使用 ，如 &gt; &lt; &#x3D; &lt;&gt;</span><br><span class="line">-- </span><br><span class="line">-- 列子查询 一般搭配多行操作符使用  in any&#x2F;some all</span><br><span class="line">-- 4、子查询是优先于主查询进行的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案例1：谁的工资比Abel高？</span><br><span class="line"># 查询出子查询</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39;</span><br><span class="line"></span><br><span class="line">#作为主查询的条件</span><br><span class="line">SELECT * </span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; (</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2 返回job_id与141员工相同，salary比143员工多的员工 的姓名 job_id 和工资</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D;141;</span><br><span class="line"></span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 143;</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt; (</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 143</span><br><span class="line"></span><br><span class="line">) AND job_id &#x3D; </span><br><span class="line">(</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D;141</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例3 返回工资最少的员工的 last_name job_id salary</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &#x3D; (</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例4 查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line">#选出每个部门的最低工资，大于子查询中 50号部门的最低工资</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D; 50</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">#非法使用标量子查询</span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">SELECT salary    #内部是个列子查询  多个值，没法比较</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D; 50</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2、多行子查询(列子查询)  搭配多行比较操作符  一列多行</span><br><span class="line">IN &#x2F;NOT IN     等于列表中任意一个</span><br><span class="line">ANY &#x2F; SOME和子查询返回的某一个值比较    使用较少 会使用MIN MAX等代替</span><br><span class="line">ALL和子查询返回的所有值比较      也可以替换为MIN MAX</span><br><span class="line"></span><br><span class="line">#案例1 返回location_id是1400或1700部门中所有的员工姓名</span><br><span class="line"></span><br><span class="line">#只要先查出1400 1700的部门编号就行，不用连接查询</span><br><span class="line">SELECT last_name </span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(   #IN 可以替换成 &#x3D; ANY   &#x2F;  NOT IN  可以替换成 &lt;&gt;ALL</span><br><span class="line">SELECT DISTINCT department_id  #最好去重</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN (1400,1700)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例2 返回其他部门中比  job_id为IT_PROG工种任一工资   低的员工的工号 姓名 jobid 及salary</span><br><span class="line">#都可以是使用min max替代</span><br><span class="line"></span><br><span class="line">SELECT employee_id, last_name, job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &lt; ANY(</span><br><span class="line">SELECT DISTINCT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例3 返回其他部门中比  job_id为IT_PROG工种所有工资   低的员工的工号 姓名 jobid 及salary</span><br><span class="line"></span><br><span class="line">SELECT employee_id, last_name, job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &lt; ALL(</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3、行子查询（一行多列或者多行多列）   用的相对列子查询少</span><br><span class="line"></span><br><span class="line">#案例 查询员工编号最小且工资最高的员工信息</span><br><span class="line">#不一定存在，也可以使用上面的列子查询的 AND来做，效果是一致的</span><br><span class="line">SELECT * </span><br><span class="line">FROM employees</span><br><span class="line">WHERE (employee_id,salary) &#x3D; (   #两个条件都放在小括号里，将多个字段当做一个虚拟的字段</span><br><span class="line">SELECT MIN(employee_id),MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、SELECT 后面  只能一行一列</span><br><span class="line"></span><br><span class="line"># 案例查询每个部门的员工个数 </span><br><span class="line">#和连接的效果一样</span><br><span class="line">SELECT d.*,(</span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE e.department_id &#x3D; d.department_id</span><br><span class="line">)</span><br><span class="line">FROM departments d;</span><br><span class="line"></span><br><span class="line">#查询员工号 102的部门名</span><br><span class="line"></span><br><span class="line">SELECT (</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN employees e</span><br><span class="line">ON e.department_id &#x3D; d.department_id</span><br><span class="line">WHERE employee_id &#x3D; 102</span><br><span class="line">) 部门名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、FROM后面</span><br><span class="line">#案例：查询每个部门的平均工资的工资等级</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT ags.* ,grade_level</span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id) ags   #必须起别名，因为该表没有名字</span><br><span class="line">INNER JOIN job_grades j</span><br><span class="line">ON ags.ag BETWEEN lowest_sal AND highest_sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#四、exsits后面 相关子查询  boolean 子查询是不是有值 ,1为true</span><br><span class="line">&#x2F;*</span><br><span class="line">exsits(完整的查询语句）</span><br><span class="line">返回1,0</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT EXISTS(SELECT employee_id FROM employees);</span><br><span class="line"></span><br><span class="line">#查询有员工的部门名</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(   #类似一个filter</span><br><span class="line">SELECT employee_id </span><br><span class="line">FROM employees e</span><br><span class="line">WHERE d.department_id &#x3D; e.department_id   #如果不加这句，就变成全选了，全都返回true</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.department_id IN(</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees  #凡是有部门的员工 都有其对应的部门编号</span><br><span class="line">#WHERE employee_id IS NOT NULL</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT * FROM boys   #boys. 前缀要加就都加</span><br><span class="line">WHERE id NOT IN(</span><br><span class="line">SELECT boyfriend_id</span><br><span class="line">FROM beauty</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 1. 查询和 Zlotkey 相同部门的员工姓名和工资 </span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D; (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Zlotkey&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 2. 查询工资比公司平均工资高的员工的员工号，姓名和工资。 </span><br><span class="line"></span><br><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 3. 查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资 </span><br><span class="line">SELECT employee_id,last_name,salary,e.department_id,avs.ag</span><br><span class="line">FROM employeese</span><br><span class="line"> JOIN (    #INNER 可以省略 复习一下连接查询</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) as avs  #这里要加分号的</span><br><span class="line">ON e.department_id &#x3D; avs.department_id</span><br><span class="line">WHERE e.salary&gt;avs.ag;  #分组才用having</span><br><span class="line"></span><br><span class="line">-- 4. 查询和姓名中包含字母 u 的员工在相同部门的  员工的员工号和姓名 </span><br><span class="line">SELECT employee_id,last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">SELECT DISTINCT department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name LIKE &#39;%u%&#39;  #不要写成is like</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 5.  查询在部门的 location_id 为 1700 的部门工作的员工的员工号</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN (</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id &#x3D;1700</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 6.  查询管理者是 K_ing 的员工姓名和工资 </span><br><span class="line"></span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IN (</span><br><span class="line">SELECT employee_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;K_ing&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 7.  查询工资最高的员工的姓名，要求 first_name 和 last_name 显示为一列，列名为 姓.名 </span><br><span class="line">SELECT CONCAT(first_name,last_name) &#39;姓名&#39;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &#x3D; (</span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#子查询案例</span><br><span class="line">--  1. 查询工资最低的员工信息: last_name, salary  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--  2. 查询平均工资最低的部门信息 </span><br><span class="line"></span><br><span class="line">#和分组函数的一起查询字段的也是分组的后的</span><br><span class="line"></span><br><span class="line">SELECT d.* </span><br><span class="line">FROM departments d  </span><br><span class="line">JOIN (</span><br><span class="line">SELECT AVG(salary) avgsal,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) avs</span><br><span class="line">ON d.department_id &#x3D; avs .department_id</span><br><span class="line">ORDER BY avs.avgsal</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">--  3. 查询平均工资最低的部门信息和该部门的平均工资  </span><br><span class="line">SELECT d.*,avs.avgsal</span><br><span class="line">FROM departments d</span><br><span class="line">JOIN (</span><br><span class="line">SELECT AVG(salary) avgsal,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) avs</span><br><span class="line">ON d.department_id &#x3D; avs .department_id</span><br><span class="line">ORDER BY avs.avgsal</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">--  4. 查询平均工资最高的 job 信息 </span><br><span class="line">SELECT j.*</span><br><span class="line">FROM jobs j</span><br><span class="line">JOIN (</span><br><span class="line">SELECT AVG(salary) avs,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line"></span><br><span class="line">) maxj</span><br><span class="line">ON maxj.job_id &#x3D; j.job_id</span><br><span class="line">ORDER BY maxj.avs DESC</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--  5. 查询平均工资高于公司平均工资的部门有哪些? </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT department_name,avg.asgs</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN</span><br><span class="line">(SELECT AVG(salary) asgs,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line"></span><br><span class="line">) as avg</span><br><span class="line">ON avg.department_id &#x3D; d.department_id  #存在department_id为null的员工</span><br><span class="line"></span><br><span class="line">WHERE avg.asgs&gt; (</span><br><span class="line">SELECT AVG(salary) FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--  6. 查询出公司中所有 manager 的详细信息.  </span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN (</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees</span><br><span class="line">);</span><br><span class="line">--  7. 各个部门中 最高工资中最低的那个部门的 最低工资是多少 </span><br><span class="line"></span><br><span class="line">SELECT MIN(m.maxsal)</span><br><span class="line">FROM(</span><br><span class="line">SELECT MAX(salary) maxsal</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) m;</span><br><span class="line"></span><br><span class="line">--  8. 查询平均工资最高的部门的 manager 的详细信息: last_name, department_id, email, salary </span><br><span class="line">SELECT last_name,e.department_id,email,salary</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d</span><br><span class="line">ON d.manager_id &#x3D; e.employee_id</span><br><span class="line">WHERE e.department_id &#x3D; (</span><br><span class="line"></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) DESC</span><br><span class="line">limit 1</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#进阶8 分页查询  重要</span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">应用场景：当要显示的数据一页显示不全，需要分页提交sql请求</span><br><span class="line">语法：SELECT  查询列表</span><br><span class="line">FROM table1</span><br><span class="line">【连接类型 JOIN table2</span><br><span class="line">ON 连接条件</span><br><span class="line">WHERE  筛选条件</span><br><span class="line">GROUP BY 分组字段</span><br><span class="line">HAVING  分组后的筛选</span><br><span class="line">ORDER BY 排序的字段】</span><br><span class="line">LIMIT OFFSET,SIZE   分页查询</span><br><span class="line"></span><br><span class="line">offset：要显示条目的起始索引，起始索引是0</span><br><span class="line">size：显示条目个数</span><br><span class="line"></span><br><span class="line">特点：limit语句在查询语句的最后</span><br><span class="line">公式 显示的页数page 每页的条目size</span><br><span class="line">SELECT </span><br><span class="line">FROM</span><br><span class="line">LIMIT (page-1)*size ,size;</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例1 查询前五条员工信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees LIMIT 0,5;</span><br><span class="line">SELECT * FROM employees LIMIT 5;#从0开始可以简写</span><br><span class="line"></span><br><span class="line">#案例2 查询11-25条员工信息</span><br><span class="line">SELECT * FROM employees LIMIT 10,15;</span><br><span class="line"></span><br><span class="line">#案例3 有奖金，工资前十名</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">ORDER BY salary DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#进阶9 联合查询</span><br><span class="line">&#x2F;*</span><br><span class="line">UNION 将多条查询语句的结果合并成一个结果</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">SELECT * FROM employees WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM employees WHERE department_id &gt;90</span><br><span class="line">UNION</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line">应用场景：</span><br><span class="line">当涉及查多个表的时候，且没有连接关系，但是查的要素是一样的，</span><br><span class="line">可以拆分查询，然后合成一个查询结果</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1、多个查询语句查询的列数必须是一致的</span><br><span class="line">2、字段名是第一条查询的字段名，所以要求多条查询的每一列类型和顺序是一致的</span><br><span class="line">3、如果多个表中存在完全相同的数据，会去重。如需不去重 使用UNION ALL</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#查询部门编号&gt;90 或邮箱含a的员工信息</span><br><span class="line">SELECT * FROM employees WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM employees WHERE department_id &gt;90;</span><br></pre></td></tr></table></figure><h1 id="DML-增删改"><a href="#DML-增删改" class="headerlink" title="DML 增删改"></a>DML 增删改</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"># DATA MANIPULATE LANGUAGE</span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">INSERT 插</span><br><span class="line">UPDATE 改</span><br><span class="line">DELETE 删</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、插入语句</span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">方式一  用的多</span><br><span class="line">语法：</span><br><span class="line">INSERT INTO 表名(列名,...) VALUES(值...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.插入值的类型要与列的类型一致或兼容</span><br><span class="line">INSERT INTO beauty(id,&#96;name&#96;,sex，borndate,phone,phone,boyfriend_id)</span><br><span class="line">VALUES(15,&#39;lucy&#39;,&#39;female&#39;,&#39;1999-1-1&#39;,&#39;18988898889&#39;,NULL,1)</span><br><span class="line"></span><br><span class="line">#2.不可以为null的列必须插入值。可以为null的列可以插入null，或者</span><br><span class="line">#字段和value都不写，会填入默认值，未设置默认值的就会填充null</span><br><span class="line"></span><br><span class="line">#3.列的顺序可以随意，但值要一一对应</span><br><span class="line"></span><br><span class="line">#4.列数和值得个数一定要一致</span><br><span class="line"></span><br><span class="line">#5.可以省略列名，默认为所有列的默认顺序</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(16,&#39;jessie&#39;,&#39;female&#39;,&#39;1999-1-1&#39;,&#39;18988898889&#39;,NULL,2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">方式二</span><br><span class="line">语法：</span><br><span class="line">INSERT INTO 表名</span><br><span class="line">SET 列名 &#x3D; 值，列名 &#x3D; 值，...</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">INSERT INTO beauty </span><br><span class="line">SET id &#x3D; 20,name &#x3D; &#39;bope&#39;,phone &#x3D; &#39;3123&#39;;</span><br><span class="line"></span><br><span class="line">#比较</span><br><span class="line"></span><br><span class="line">#1.方式一支持插入多行</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES(17,&#39;jessie&#39;,&#39;f&#39;,&#39;1999-1-1&#39;,&#39;1898889888&#39;,NULL,2),</span><br><span class="line">(18,&#39;jessie2&#39;,&#39;f&#39;,&#39;1999-1-2&#39;,&#39;1898889288&#39;,NULL,2);</span><br><span class="line"></span><br><span class="line">#2.方式一支持子查询</span><br><span class="line">INSERT INTO beauty(id,name,phone)</span><br><span class="line">SELECT 23,&#39;joe&#39;,&#39;123433&#39;;</span><br><span class="line"></span><br><span class="line">#二、修改语句</span><br><span class="line">&#x2F;*</span><br><span class="line">1.修改单表的记录</span><br><span class="line">语法：</span><br><span class="line">UPDATE 表名</span><br><span class="line">SET 列名 &#x3D; 新值，列名 &#x3D; 新值，...</span><br><span class="line">WHERE 筛选条件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.修改多表的记录（补充）</span><br><span class="line"></span><br><span class="line">sql92语法：</span><br><span class="line">UPDATE 表名1 别名，表2 别名</span><br><span class="line">SET 列名 &#x3D; 新值，列名 &#x3D; 新值，...</span><br><span class="line">WHERE 连接条件</span><br><span class="line">AND 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法：</span><br><span class="line">UPDATE 表名1 别名</span><br><span class="line">xxxJOIN 表2 别名</span><br><span class="line">ON 连接条件</span><br><span class="line">SET 列名 &#x3D; 新值，列名 &#x3D; 新值，...</span><br><span class="line">WHERE 筛选条件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">#1.修改单表的记录</span><br><span class="line"></span><br><span class="line">#案例1 修改 姓唐的 电话为&#39;&#39;</span><br><span class="line">UPDATE beauty</span><br><span class="line">SET phone &#x3D; &#39;23123213&#39;</span><br><span class="line">WHERE NAME LIKE &#39;j%&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#案例1 修改 boys id2 的名称和userC</span><br><span class="line">UPDATE boys SET boyName &#x3D; &#39;jack&#39;,userCP &#x3D; 100</span><br><span class="line">WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.修改多表的记录</span><br><span class="line">#案例2 </span><br><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty b</span><br><span class="line">ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">SET phone &#x3D; &#39;123132&#39;</span><br><span class="line">WHERE boyName &#x3D; &#39;jack&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">UPDATE boys bo</span><br><span class="line">RIGHT JOIN beauty b </span><br><span class="line">ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">SET b.boyfriend_id &#x3D; 2</span><br><span class="line">WHERE b.boyfriend_id IS NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、删除语句</span><br><span class="line">&#x2F;*</span><br><span class="line">方式一：DELETE</span><br><span class="line">语法：</span><br><span class="line">1.单表的删除</span><br><span class="line">DELETE FROM 表名 WHERE 筛选条件;</span><br><span class="line"></span><br><span class="line">2.多表的删除</span><br><span class="line">sql92语法</span><br><span class="line">DELETE  表1别名，【表2别名】</span><br><span class="line">FROM 表1 别名，表2 别名</span><br><span class="line">WHERE 连接条件</span><br><span class="line">AND  筛选条件</span><br><span class="line"></span><br><span class="line">sql99</span><br><span class="line">DELETE  表1别名，【表2别名】</span><br><span class="line">FROM 表1</span><br><span class="line">xxxJOIN 表2  ON 连接条件</span><br><span class="line">WHERE 筛选条件</span><br><span class="line"></span><br><span class="line">方式二：TRUNCATE</span><br><span class="line">语法：</span><br><span class="line">TRUNCATE TABLE 表名；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#方式一：DELETE</span><br><span class="line">#单表</span><br><span class="line">DELETE FROM beauty WHERE phone LIKE &#39;%9&#39;;</span><br><span class="line"></span><br><span class="line">#多表删除，同多表update，按需要删除某个表或多个表的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方式二：TRUNCATE,不能使用where</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE boys;  #清空</span><br><span class="line"></span><br><span class="line">#区别</span><br><span class="line">&#x2F;*</span><br><span class="line">1.delete可以加where</span><br><span class="line">2.truncate 效率略高</span><br><span class="line">3.如果使用delete，再insert，自增长列(id自增长）的值从断点开始</span><br><span class="line"> truncate则从1开始</span><br><span class="line">4.truncate没有返回值 DELETE会返回 affected rows: int</span><br><span class="line"></span><br><span class="line">5.truncate删除不可以回滚，DELETE可以回滚</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h1 id="DDL-库表"><a href="#DDL-库表" class="headerlink" title="DDL 库表"></a>DDL 库表</h1><h2 id="库表操作"><a href="#库表操作" class="headerlink" title="库表操作"></a>库表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#DDL DATA DEFINE LANGUAGE</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">库和表的管理</span><br><span class="line"></span><br><span class="line">一、库的管理</span><br><span class="line">创建、修改、删除</span><br><span class="line"></span><br><span class="line">二、表的管理</span><br><span class="line">创建、修改、删除</span><br><span class="line"></span><br><span class="line">三、关键字</span><br><span class="line">create alter drop</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、库的管理</span><br><span class="line">#1.创建库</span><br><span class="line">CREATE DATABASE IF NOT EXISTS books;</span><br><span class="line"></span><br><span class="line">#2.修改库  一般不修改</span><br><span class="line">#更改字符集</span><br><span class="line">ALTER DATABASE books CHARACTER SET gbk;</span><br><span class="line"></span><br><span class="line">#3.删库</span><br><span class="line">DROP DATABASE IF EXISTS books;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS books;</span><br><span class="line"></span><br><span class="line">#二、表的管理</span><br><span class="line">#1、表的创建</span><br><span class="line">&#x2F;*</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">列名 列类型【（长度）约束】,</span><br><span class="line">列名 列类型【（长度）约束】,</span><br><span class="line">列名 列类型【（长度）约束】,</span><br><span class="line">...</span><br><span class="line">列名 列类型【（长度）约束】</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE TABLE book(</span><br><span class="line">id INT,</span><br><span class="line">bookName VARCHAR(20),</span><br><span class="line">price DOUBLE,</span><br><span class="line">authorID INT,</span><br><span class="line">publishDate INT </span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC book;</span><br><span class="line"></span><br><span class="line">CREATE TABLE AUTHOR(</span><br><span class="line">id INT,</span><br><span class="line">au_name VARCHAR(20),</span><br><span class="line">nation VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2、表的修改</span><br><span class="line"></span><br><span class="line">#ALTER TABLE 表名 CHANGE&#x2F;MODIFY&#x2F;ADD&#x2F;DROP COLUMN 列名 列类型 约束;</span><br><span class="line">#1.修改列名</span><br><span class="line">ALTER TABLE book CHANGE COLUMN publishDate pubDate TIMESTAMP;</span><br><span class="line">#需要加上类型</span><br><span class="line"></span><br><span class="line">#2.修改列类型或约束</span><br><span class="line">ALTER TABLE book MODIFY COLUMN pubDate TIMESTAMP;</span><br><span class="line"></span><br><span class="line">#3.添加新列</span><br><span class="line">ALTER TABLE author ADD COLUMN annual DOUBLE;</span><br><span class="line"></span><br><span class="line">#4.删除列</span><br><span class="line">ALTER TABLE author DROP COLUMN annual;</span><br><span class="line">#5.修改表名</span><br><span class="line"></span><br><span class="line">ALTER TABLE author RENAME TO bookauthor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3、表的删除</span><br><span class="line">&#x2F;*</span><br><span class="line">*&#x2F;</span><br><span class="line">DROP TABLE IF EXISTS book_author;</span><br><span class="line">SHOW TABLE;</span><br><span class="line"></span><br><span class="line">#4、表的复制</span><br><span class="line"></span><br><span class="line">INSERT INTO author VALUES</span><br><span class="line">(1,&#39;a&#39;,&#39;japan&#39;),</span><br><span class="line">(2,&#39;b&#39;,&#39;japan&#39;),</span><br><span class="line">(3,&#39;c&#39;,&#39;japan&#39;),</span><br><span class="line">(4,&#39;d&#39;,&#39;china&#39;);</span><br><span class="line"> </span><br><span class="line"> #1.仅复制表的结构</span><br><span class="line">CREATE TABLE copyOfAuthor LIKE author;  </span><br><span class="line">SELECT * FROM author;</span><br><span class="line">SELECT * FROM copyOfAuthor;</span><br><span class="line"></span><br><span class="line"> #2.复制表的 结构+数据</span><br><span class="line">CREATE TABLE copyOfAuthor1</span><br><span class="line">SELECT * FROM author;</span><br><span class="line">SELECT * FROM copyOfAuthor1;</span><br><span class="line"></span><br><span class="line">#3.复制表的 结构+部分数据</span><br><span class="line">CREATE TABLE copyOfAuthor2</span><br><span class="line">SELECT id,au_name FROM author</span><br><span class="line">WHERE nation &#x3D; &#39;japan&#39;;</span><br><span class="line"></span><br><span class="line">#4.复制表的 部分结构</span><br><span class="line">CREATE TABLE copyOfAuthor3</span><br><span class="line">SELECT id,au_name FROM author</span><br><span class="line">WHERE 0;</span><br></pre></td></tr></table></figure><h2 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">#常见的数据类型</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">数值型</span><br><span class="line">整型</span><br><span class="line">小数： 定点数  DEC(M,D)</span><br><span class="line">浮点数 FLOAT(M,D) DOUBLE(M,D)</span><br><span class="line">字符型</span><br><span class="line">较短的文本：char varchar</span><br><span class="line">较长的文本：text blob（binary large object）</span><br><span class="line"></span><br><span class="line">日期型：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、整型 TINYINT(8bit) SMALLINT(2byte) MEDIUMINT(3byte) INT&#x2F;INTEGER(4byte) BIGINT(8byte)</span><br><span class="line">&#x2F;*</span><br><span class="line">#特点：</span><br><span class="line">1.默认是有符号</span><br><span class="line">2.超出范围，默认插入临界值  out of range</span><br><span class="line">3.如果不设置长度，会有默认的长度,长度为显示的宽度，ZEROFILL会用0填充</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.如何设置无符号和有符号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE tab_int(</span><br><span class="line">t1 INT(7) ZEROFILL, #而且默认变成无符号</span><br><span class="line">t2 INT UNSIGNED #无符号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_int </span><br><span class="line">SET t1 &#x3D; 123,</span><br><span class="line">t2 &#x3D; 123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- #二、小数</span><br><span class="line">&#x2F;*</span><br><span class="line">DEC(M,D)</span><br><span class="line">FLOAT(M,D) DOUBLE(M,D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">1.M 整数+小数长度  D保留D位小数</span><br><span class="line">2.浮点的M D可以省略</span><br><span class="line">3.DEC默认为 DEC(10,0) 不保留小数 四舍五入</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">CREATE TABLE tab_float(</span><br><span class="line">f1 FLOAT(5,2),</span><br><span class="line">f2 DOUBLE(5,2),</span><br><span class="line">f3 DEC  #不要逗号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_float VALUES</span><br><span class="line">(100.00,100.00,100.90);</span><br><span class="line"></span><br><span class="line">#选择简单类型，选择较小的够保存的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、字符型</span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">较短的文本：</span><br><span class="line">char(M)    M:字符数 效率略高一些，默认为1可以省略</span><br><span class="line">varchar(M)  必须声明长度 可变长度，根据存储的数据的长度，开辟存储空间，节省空间</span><br><span class="line"></span><br><span class="line">较长的文本：</span><br><span class="line">text </span><br><span class="line">blob（binary large object） JDBC</span><br><span class="line"></span><br><span class="line">enum型  规定了插入数据 只能是其枚举的类型,大小写不影响,只能是字符</span><br><span class="line"></span><br><span class="line">set型  集合,可以插入几个，都在一对&#39;&#39;内</span><br><span class="line"></span><br><span class="line">BINARY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE TABLE enum(</span><br><span class="line"></span><br><span class="line">e1 enum(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO enum VALUES</span><br><span class="line">(&#39;A&#39;)</span><br><span class="line"></span><br><span class="line">CREATE TABLE set1(</span><br><span class="line"></span><br><span class="line">e1 SET(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO set1 VALUES</span><br><span class="line">(&#39;a,b&#39;),</span><br><span class="line">(&#39;a&#39;),</span><br><span class="line">(&#39;a,b,c&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#四、日期型</span><br><span class="line">&#x2F;*</span><br><span class="line">DATE  3BYTE</span><br><span class="line">TIME  3</span><br><span class="line">YEAR  1</span><br><span class="line"></span><br><span class="line">DATETIME  8byte   1000-9999</span><br><span class="line">TIMESTAMP 4byte  32位，只能表示2的32次方ms 当前时区</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE TABLE chronicle(</span><br><span class="line">c1 DATETIME,</span><br><span class="line">c2 TIMESTAMP</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO chronicle VALUES</span><br><span class="line">(now(),now());</span><br><span class="line"></span><br><span class="line">SELECT * FROM chronicle;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;time_zone&#39;;</span><br><span class="line"></span><br><span class="line">SET time_zone &#x3D; &#39;+9:00&#39;;</span><br></pre></td></tr></table></figure><h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#常见约束</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">含义： 一种限制，用于限制表中的数据，为了保证表中的数据的准确性和可靠性</span><br><span class="line"></span><br><span class="line">分类：六种</span><br><span class="line">NOT NULL 保证该字段的值不能为空</span><br><span class="line">DEFAULT 保证字段有默认值</span><br><span class="line">PRIMARY KEY 主键 保证该字段的唯一性且非空</span><br><span class="line">UNIQUE 保证字段的值唯一，可以为空</span><br><span class="line">CHECK  MYSQL不支持 检查性别，检查年龄的范围</span><br><span class="line">FOREIGN KEY 限制两个表的关系，用于保证该字段的值必须来自主表的关联列的值</span><br><span class="line">            在从表添加外键约束，引用主表的值</span><br><span class="line">添加约束的时机：</span><br><span class="line">1.创建表时</span><br><span class="line">2.修改表时</span><br><span class="line"></span><br><span class="line">添加分类</span><br><span class="line">列级约束  语法上都支持，但外键约束没有效果</span><br><span class="line">表级约束  除了NOT NULL 和DEFAULT</span><br><span class="line"></span><br><span class="line">添加列级约束：</span><br><span class="line">直接在字段类型后面追加 NOT NULL、 DEFAULT、 PRIMARY KEY、 UNIQUE</span><br><span class="line"></span><br><span class="line">添加表级约束：在字段最后  【CONSTRAINT 约束名】 约束类型(约束字段)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PRIMARY KEY 对比  UNIQUE</span><br><span class="line">1.主键为非空，一个表中至多只有一个</span><br><span class="line">2.UNIQUE只能有一个null，一个表可以有多个</span><br><span class="line">3.都可以组合主键 组合唯一  就是组合中只要有一项不同就是不同的，但是不推荐使用</span><br><span class="line"></span><br><span class="line">外键：</span><br><span class="line">1.要求在从表设置外键关系</span><br><span class="line">2.从表的外键列的类型必须和主表的关联列一致或兼容</span><br><span class="line">3.要求主表的关联列必须是一个key （一般是主键或者唯一）</span><br><span class="line">4.插入数据时，先插入主表，再插入从表；删除时先删除从表，后删除主表，因为有从表的引用</span><br><span class="line"></span><br><span class="line">一个字段可以添加多个约束</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、创建表时添加约束</span><br><span class="line">#1.添加列级约束</span><br><span class="line"></span><br><span class="line">CREATE TABLE info(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">s_name VARCHAR(20) NOT NULL,</span><br><span class="line">gender CHAR(1) CHECK(gender &#x3D; &#39;男&#39;or gender &#x3D; &#39;女&#39;),</span><br><span class="line">seat INT UNIQUE,</span><br><span class="line">age INT DEFAULT 18,</span><br><span class="line">majorId INT REFERENCES major(id)  #引用major表的列,列级约束无效</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE major(</span><br><span class="line">id INT PRIMARY KEY,</span><br><span class="line">majorName VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查看所有的索引 </span><br><span class="line">SHOW INDEX FROM info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.添加表级约束</span><br><span class="line">#在字段最后  【CONSTRAINT 约束名】 约束类型(约束字段)</span><br><span class="line"></span><br><span class="line">CREATE TABLE info1(</span><br><span class="line">id INT ,</span><br><span class="line">s_name VARCHAR(20) ,</span><br><span class="line">gender CHAR(1) ,</span><br><span class="line">seat INT ,</span><br><span class="line">age INT ,</span><br><span class="line">majorId INT,</span><br><span class="line"></span><br><span class="line">CONSTRAINT pk PRIMARY KEY(id,s_name),</span><br><span class="line">CONSTRAINT uni UNIQUE(seat),</span><br><span class="line">CONSTRAINT ck CHECK(gender &#x3D; &#39;男&#39;or gender &#x3D; &#39;女&#39;),</span><br><span class="line">CONSTRAINT fk FOREIGN KEY(majorId) REFERENCES major(id)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#一般除了外键使用表级约束，其他都使用列级约束</span><br><span class="line"></span><br><span class="line">#二、修改表时添加约束</span><br><span class="line">#表级约束用ADD   列级用MODIFY</span><br><span class="line"></span><br><span class="line">CREATE TABLE info2(</span><br><span class="line">id INT ,</span><br><span class="line">s_name VARCHAR(20) ,</span><br><span class="line">gender CHAR(1) ,</span><br><span class="line">seat INT ,</span><br><span class="line">age INT ,</span><br><span class="line">majorId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN s_name VARCHAR(20) NOT NULL;</span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN age INT DEFAULT 19;</span><br><span class="line"></span><br><span class="line">#主键</span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN id PRIMARY KEY;</span><br><span class="line">ALTER TABLE info2 ADD PRIMARY KEY(id); #只有添加表级约束才可以设置约束名，省略了【CONSTRAINT 约束名】</span><br><span class="line"></span><br><span class="line">#UNIQUE</span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN seat UNIQUE;</span><br><span class="line">ALTER TABLE info2 ADD UNIQUE(seat);</span><br><span class="line"></span><br><span class="line">ALTER TABLE info2 ADD FOREIGN KEY(majorId) REFERENCES major(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、修改表时删除约束</span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN s_name VARCHAR(20) NULL;</span><br><span class="line">ALTER TABLE info2 MODIFY COLUMN age INT;</span><br><span class="line"></span><br><span class="line">ALTER TABLE info2 DROP PRIMARY;</span><br><span class="line"></span><br><span class="line">#唯一 外键 +约束名</span><br><span class="line">ALTER TABLE info2 DROP INDEX seat;</span><br><span class="line">ALTER TABLE info2 DROP FOREIGN KEY fk;</span><br></pre></td></tr></table></figure><h2 id="标识列-（自增长列）"><a href="#标识列-（自增长列）" class="headerlink" title="标识列 （自增长列）"></a>标识列 （自增长列）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#标识列</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"></span><br><span class="line">自增长列</span><br><span class="line"></span><br><span class="line">含义：系统提供的默认的序列值</span><br><span class="line"></span><br><span class="line">1.标识列：必须是一个key</span><br><span class="line"></span><br><span class="line">2.一个表只能有一个自增长列</span><br><span class="line"></span><br><span class="line">3.标识列的类型：只能是数值型  一般是int</span><br><span class="line"></span><br><span class="line">4.标识列可以设置步长 set auto_increment_increment &#x3D; 3;  </span><br><span class="line">可以修改起始值  在插入的时候自己先插入一个数，再插入null</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、创建表时设置标识列</span><br><span class="line"></span><br><span class="line">CREATE TABLE indentity (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">TRUNCATE TABLE indentity;</span><br><span class="line">INSERT INTO indentity VALUES</span><br><span class="line">(NULL,&#39;john&#39;),</span><br><span class="line">(NULL,&#39;john&#39;),</span><br><span class="line">(NULL,&#39;john&#39;),</span><br><span class="line">(NULL,&#39;john&#39;),</span><br><span class="line">(NULL,&#39;john&#39;);</span><br><span class="line"></span><br><span class="line">set auto_increment_increment &#x3D; 3;  #修改步长</span><br><span class="line"></span><br><span class="line">#起始值 在插入的时候自己先插入一个数，再插入null</span><br><span class="line"></span><br><span class="line">#二、修改表时设置标识列</span><br><span class="line"></span><br><span class="line">ALTER TABLE indentity MODIFY COLUMN id INT PRIMARY KEY AUTO_IMCREMENT;</span><br><span class="line"></span><br><span class="line">#三、修改表时删除标识列</span><br><span class="line">ALTER TABLE indentity MODIFY COLUMN id INT;</span><br></pre></td></tr></table></figure><h1 id="TCL-事务控制"><a href="#TCL-事务控制" class="headerlink" title="TCL 事务控制"></a>TCL 事务控制</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#TCL  TRANSACTION CONTROL LANGUAGE 事务控制语言</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">事务：一个或一组语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行</span><br><span class="line"></span><br><span class="line">a转账100给b</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">需要二者同时执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">存储引擎 ：InnoDB存储引擎 支持事务</span><br><span class="line"></span><br><span class="line">事务的特性：ACID属性</span><br><span class="line">1.原子性 atomicity ：事务是一个不可分割的工作单位，事务的操作要么发生，要么不发生</span><br><span class="line">2.一致性 consisentecy：事务会从一个一致性的状态进入另一个一致性的状态，比如转账一致</span><br><span class="line">3.隔离性 isolation： 一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用数据</span><br><span class="line">对其他并发的事务是隔离的，并发执行的各个事务之间不能互相干扰</span><br><span class="line">4.持久性 durability ：一旦提交了就是永久性的改变，接下来的其他操作和数据库故障不应该对其有影响</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#事务的创建</span><br><span class="line">隐式事务：事务没有明显的开启和结束的标记</span><br><span class="line">比如 insert update delete</span><br><span class="line"></span><br><span class="line">显式事务：事务具有明显的开启和结束的标记</span><br><span class="line">前提：必须先设置自动提交功能为禁用</span><br><span class="line"></span><br><span class="line">1.开启事务</span><br><span class="line">SET autocommit &#x3D; 0; 只针对当前事务</span><br><span class="line">START TRANSACTION; 可选</span><br><span class="line"></span><br><span class="line">2.编写sql语句</span><br><span class="line">SELECT;</span><br><span class="line">INSERT;</span><br><span class="line">UPDATE;</span><br><span class="line">DELETE;</span><br><span class="line"></span><br><span class="line">3.结束事务</span><br><span class="line">commit;提交</span><br><span class="line">二选一</span><br><span class="line">rollback; 回滚  </span><br><span class="line"></span><br><span class="line">前面的sql语句执行后驻留在内存中，当出现结束语句时，</span><br><span class="line">如果是commit就提交修改，如果是rollback就不写出到磁盘。所以就还是原来的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update 表 set 余额 &#x3D; 0 where name &#x3D; &#39;a&#39;</span><br><span class="line">意外中断</span><br><span class="line">update 表 set 余额 &#x3D; 200 where name &#x3D; &#39;b&#39;</span><br><span class="line"></span><br><span class="line">数据库的隔离级别</span><br><span class="line">对于同时运行的多个事务，就当这些事务访问数据库中相同的数据时，如果没有</span><br><span class="line">采用必要的隔离机制，就会导致各种并发问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">并发问题：</span><br><span class="line">脏读：对于两个事务T1 T2, T1读取了T2更新但还没有没提交的字段之后，如果T2回滚</span><br><span class="line">T1读取的内容就是临时且无效的。针对update</span><br><span class="line"></span><br><span class="line">不可重复读：T1读取了一个字段，T2更新了该字段，T1再次读取同一字段，值就不同了</span><br><span class="line"></span><br><span class="line">幻读： T1读取了一个字段，T2在该表中插入了一些新的行，T1再读会多出几行，针对insert</span><br><span class="line"></span><br><span class="line">通过设置隔离级别来解决这些问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SHOW ENGINES;</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;autocommit&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySQL基础：增删改查、库表管理、事务控制
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="https://paranoiddemon.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
</feed>
