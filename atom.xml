<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LANDFILL</title>
  
  
  <link href="/paranoiddemon.github.io/atom.xml" rel="self"/>
  
  <link href="https://paranoiddemon.github.io/blog/"/>
  <updated>2020-07-08T09:53:37.139Z</updated>
  <id>https://paranoiddemon.github.io/blog/</id>
  
  <author>
    <name>Demon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb-Tomcat、Servlet与HTTP协议</title>
    <link href="https://paranoiddemon.github.io/blog/posts/tomcat-servlet-http-protocol.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/tomcat-servlet-http-protocol.html</id>
    <published>2020-07-07T16:24:46.000Z</published>
    <updated>2020-07-08T09:53:37.139Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容：</p><ol><li>web相关概念</li><li>web服务器软件：Tomcat</li><li>Servlet</li><li>HTTP协议</li><li>Request</li></ol><h2 id="web相关概念"><a href="#web相关概念" class="headerlink" title="web相关概念"></a>web相关概念</h2><ol><li>软件架构<br>C/S 客户端<br>B/S 浏览器</li><li>资源分类<br>静态资源：所有用户访问后得到的效果是一样的   如：html css js，可以直接被浏览器解析，客户端请求<br>动态资源: 每个用户访问相同资源后，得到的结果可能不一样。 动态资源先转换为静态资源，再返回（服务端响应）给浏览器解析 如servlet/jsp php asp</li><li>网络通信三要素<br>IP：计算机等网络设备在网络中的唯一标识<br>端口：应用程序的在计算机中的唯一标识 0-65536<br>协议：规定了数据通信的规则<pre><code>TCP/UDP</code></pre></li></ol><h2 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h2><p>服务器：安装了服务器软件的计算机<br>服务器软件：接收用户的请求，处理请求，做出响应     如：mysql服务器，web服务器<br>web服务器软件：<br>    可以部署web项目，让用户通过浏览器来访问这些项目<br>    web容器，动态资源需要通过容器来使用</p><p>常用的java相关的web服务器软件<br>    WebLogic oracle公司 大型的JavaEE服务器 支持所有的JavaEE规范  收费<br>    WebSphere：IBM 收费<br>    JBOSS:JBOSS公司 收费<br>    Tomcat：Apache基金组织，中小型的JavaEE服务器，仅支持少量的JavaEE规范servlet/jsp，开源</p><p>注：JavaEE： Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>​    下载<br>​    安装 解压压缩包<br>​        安装的目录不要有中文和空格<br>​    卸载 删除目录就行了<br>​    启动    bin/startup.bat   localhost:8080 一般会把默认端口号改为80 http协议的默认端口号访问不用再输入端口号<br>​    关闭<br>​        强制关闭  关闭窗口<br>​        正常关闭  调用shutdown.bat/ ctrl c 推荐使用<br>​    配置<br>​        部署项目的方式：<br>​        1. 直接将项目放在webapps目录下 <a href="http://localhost/hello/hello.html" target="_blank" rel="noopener">http://localhost/hello/hello.html</a><br>​        /hello 项目的访问路径，虚拟目录<br>​        一般会将项目打成war包放到webapps目录下，war包会自动解压缩<br>​        2.  在conf/server.xml配置<br>​               <Context docBase="D:\hello" path="/hi"/> docBase是资源所在路                径，path是访问时的虚拟路径。server.xml是全局配置文件不建议直接配置<br>​        3.conf\Catalina\localhost创建任意名称的xml，xml的文件名称即为虚拟目录<br>​             <Context docBase="D:\hello"/></p><p><img src="https://i.loli.net/2020/07/07/jNUxvsRF36Z1p8V.png" alt="Tomcat目录结构"></p><p>静态项目和动态项目<br>    目录结构：<br>        java动态项目的目录的结构：<br>            |–根目录<br>                |–WEB-INFO （有web-info就是动态项目）<br>                    |–web.xml        web项目的核心配置文件<br>                    |–classes目录 放置字节码文件<br>                    |–lib目录         放置依赖的jar包</p><p>将Tomcat集成到IDEA，创建JavaEE项目 run -&gt; edit configuration-&gt;tomcat<br>热部署 update resources</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>概念：server applet  运行在服务器上</p><p>动态资源通过逻辑性的Java代码（java类）来执行，依赖于服务器tomcat执行它<br>需要遵守一定的接口，才能被tomcat所识别</p><p>Servlet就是一个接口，定义了java类被浏览器访问到（tomcat识别到）的规则<br>自定义Servlet接口的实现类，重写方法。<br>浏览器访问相应的路径就会运行mapping的类中重写的方法</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>快速入门：<br>    1. 创建JavaEE项目<br>    2. 定义Servlet的实现类<br>    3. 重写所有方法<br>    4. 配置servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在web.xml中配置  把实现了Servlet的类映射到一个虚拟路径，浏览器访问该路径就会去调用该类</span><br><span class="line"><span class="comment">&lt;!--    配置servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  <span class="comment">&lt;!--名称自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cc.landfill.web.servlet.ServletTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> <span class="comment">&lt;!-- 全类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>   <span class="comment">&lt;!--虚拟路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在run configuration-&gt;deployment-&gt;application context，把虚拟目录修改为项目名称</p><h3 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h3><p>1.当服务器接收到客户端浏览器的请求后，会解析url路径，获取Servlet的资源路径<br>2.查找web.xml文件，是否有对应的url—pattern标签体内容<br>3.如果有则找到对应的<servlet-class>全类名<br>4.tomcat通过反射把字节码加载进入内存，并且创建对象<br>5.调用相关方法</p><p><img src="https://i.loli.net/2020/07/07/P4LFV2aZ1toGn6f.png" alt="image.png"></p><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>1.被创建    init() 执行一次方法<br>    默认情况下，第一次被访问时，Servlet被创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  标签中配置</span><br><span class="line"><span class="comment">&lt;!--        指定servlet的创建时机</span></span><br><span class="line"><span class="comment">            1.在第一次被访问时，创建   默认值为-1</span></span><br><span class="line"><span class="comment">            2.在服务器启动时，创建     0或正整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>5<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">Servlet 的init()执行一次，说明内存中只有一个Servlet对象，是单例的</span><br><span class="line">多个用户同时访问该对象时，存在线程安全问题，如果加锁会严重影响性能</span><br><span class="line">解决：尽可能不要定义成员变量，用局部变量。即使了定义了成员变量，也不要对其进行赋值，</span><br><span class="line">只去获取值。</span><br></pre></td></tr></table></figure><p>2.提供服务    service()  执行多次<br>    每次访问都会被调用<br>3.被销毁    service() 执行一次<br>    服务器正常关闭的时候执行，Servlet对象销毁，destroy()在被销毁之前执行，用于释放资源</p><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>Servlet3.0:<br>支持注解配置，不再需要web.xml</p><p>步骤：</p><ol><li>选择3.0以上版本，可以不创建web.xml文件</li><li>定义Servlet接口的实现类</li><li>重写方法</li><li>在类上使用webservlet注解配置 @WebServlet(“/test4”) Servlet资源路径</li></ol><p>IDEA与Tomcat部署<br>    1. IDEA会为每一个tomcat部署的项目单路建立一份配置文件<br>    2. 项目路径</p><blockquote><p>工作空间项目: C:\Users\demon\IdeaProjects\day13_tomcat<br>    tomcat部署的项目C:\Users\demon\IdeaProjects\out\artifacts\day13_tomcat_Web_exploded<br>tomcat真正访问的是tomcat部署的web项目，对应工作空间项目的web目录下的所有资源<br>3. 项目的web-info文件夹不能直接被浏览器访问，静态资源<br>4. 断点调试。debug<br>5. 不同项目需要设置不同的虚拟目录 application context 再下一层目录才是实际的资源的位置</p></blockquote><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p>Servlet                                 接口<br>    |–GenericServlet      抽象类<br>        |–HttpServlet        抽象类：继承GenericServlet</p><p><strong>GenericServlet</strong><br>在GenericServlet类中把其他方法做了空实现，只剩下一个抽象方法void Service(),只要实现一个方法</p><p><strong>HttpServlet</strong><br>对http协议的封装，简化操作</p><ol><li>定义类继承<strong>HttpServlet</strong></li><li>重写doGet() 和doPost()   根据请求的方式</li></ol><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>urlpattern</p><ol><li>一个Servlet可以定义多个访问路径  <code>@WebServlet({&quot;/demo4-1&quot;,&quot;/demo4-2&quot;,&quot;/demo4-3&quot;})</code></li><li>路径定义规则：<br><code>/xxx</code><br><code>/xxx/xxx</code>   多层路径  目录结构 可以写成/xxx/*  可以使用通配符，通配符的优先级较低<br> <code>*.do</code>        配合demo4.do来配置 do是自定义的，可以任意</li></ol><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>概念：代表整个web应用，可以和程序的容器（Server）通信</p><p>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过从Servlet继承的方法获取</span></span><br><span class="line">ServletContext context1 = request.getServletContext();</span><br><span class="line"><span class="comment">//通过HttpServlet获取</span></span><br><span class="line">ServletContext context2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//获取的对象是指向同一个引用的 ==</span></span><br></pre></td></tr></table></figure><p>功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 获取MIME类型</span><br><span class="line">MIME类型：在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">格式：大类型/小类型 text/html image/jpeg</span><br><span class="line">响应的时候需要设置content-type</span><br><span class="line">获取：<span class="function">String <span class="title">getMimeType</span><span class="params">(String file)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2. 域对象 共享数据</span></span><br><span class="line"><span class="function">范围：所有用户所有请求的数据</span></span><br><span class="line"><span class="function">在一个 Servlet存数据</span></span><br><span class="line"><span class="function">  ServletContext context </span>= <span class="keyword">this</span>.getServletContext();</span><br><span class="line">      context.setAttribute(<span class="string">"msg"</span>,<span class="string">"hello"</span>);</span><br><span class="line">在另一个 Servlet读数据</span><br><span class="line">  ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">      Object msg = context.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line">      System.out.println(msg);</span><br><span class="line">因为ServletContext的生命周期很长，会一直驻留在内存，存的数据太多会占用内存，谨慎使用</span><br><span class="line">        </span><br><span class="line"><span class="number">3</span>. 获取文件的真实（服务器）路径</span><br><span class="line">将项目部署在远程的服务器上，需要其在服务器中的真实路径</span><br><span class="line">        </span><br><span class="line"><span class="comment">//项目部署在服务器，访问的不是工作空间，而是项目路径</span></span><br><span class="line"><span class="comment">//默认是找在web目录下的？</span></span><br><span class="line">String realPath = context.getRealPath(<span class="string">"a.txt"</span>);</span><br><span class="line">System.out.println(realPath);  <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//web目录下</span></span><br><span class="line">String realPath1 = context.getRealPath(<span class="string">"/a.txt"</span>);</span><br><span class="line">System.out.println(realPath1); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//web的WEB-INF目录下</span></span><br><span class="line">String realPath2 = context.getRealPath(<span class="string">"/WEB-INF/a.txt"</span>);</span><br><span class="line">System.out.println(realPath2); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\WEB-INF\a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//src目录下</span></span><br><span class="line">String realPath3 = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);</span><br><span class="line">System.out.println(realPath3); <span class="comment">//C:\Users\demon\IdeaProjects\out\artifacts\day15_response_war_exploded\WEB-INF\classes\a.txt</span></span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>概念：Hyper Text transfer Protocol    定义了客户端和服务器端通信时，传输的数据的格式  </p><p>请求消息/相应消息<br>特点：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号为80</li><li>基于请求响应模型：一次请求对应一次相应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><p>版本：</p><p>ver1.0 每次请求响应都会建立新的连接</p><p>ver1.1 复用连接</p><h3 id="Request-Response工作原理"><a href="#Request-Response工作原理" class="headerlink" title="Request/Response工作原理"></a>Request/Response工作原理</h3><ol><li>tomcatt服务器会根据url中的资源路径，创建ServletDemo1的对象（Sevelet实现类的对象）</li><li>tomcat创建request和response对象，request对象封装了请求消息数据</li><li>把两个对象作为参数传给ServletDemo1实例的Service()</li><li>通过request对象来获取请求消息数据，通过response对象来设置响应消息数据</li><li>服务器在响应浏览器之前，会从封装了响应消息的Response对象中获取响应消息数据，再返回给浏览器</li></ol><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><h4 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1. 请求行</span><br><span class="line">请求方式 请求url 协议&#x2F;版本</span><br><span class="line">GET&#x2F;login.html HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">请求方式：有7种，常用的有两种</span><br><span class="line">GET: </span><br><span class="line">请求参数在请求行中，直接跟在url后面</span><br><span class="line">请求的url长度有限制</span><br><span class="line">不安全</span><br><span class="line"></span><br><span class="line">POST：</span><br><span class="line">请求参数在请求体中</span><br><span class="line">没有url长度限制</span><br><span class="line">更安全</span><br><span class="line"></span><br><span class="line">2. 请求头</span><br><span class="line">请求头名称：请求头值   以键值对的方式出现</span><br><span class="line"></span><br><span class="line">常见请求头：</span><br><span class="line">Host</span><br><span class="line">User-Agent：浏览器告诉服务器，访问使用的浏览器及其版本，可以解决浏览器的兼容问题（因为浏览器的解析引擎不同），服务器根据</span><br><span class="line">Accept：接收响应的形式</span><br><span class="line">Referer：告诉服务器请求从哪里来</span><br><span class="line">作用：</span><br><span class="line">防盗链</span><br><span class="line">统计：判断流量的来源</span><br><span class="line">Connection； keep-alive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7,zh-HK;q&#x3D;0.6</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 11</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Cookie: Idea-41d450f1&#x3D;229dd7a7-ea44-4bf7-8c79-ca88718e85a4; JSESSIONID&#x3D;7E11EE42B5820055DDF4EA1FA317A334</span><br><span class="line">Host: localhost</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;83.0.4103.116 Safari&#x2F;537.36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 请求空行</span><br><span class="line">空行  用于分隔 POST的请求头和请求体</span><br><span class="line">4. 请求体</span><br><span class="line">正文  封装POST请求信息的请求参数，GET方式就没有请求体</span><br><span class="line">字符串格式  username&#x3D;jack</span><br></pre></td></tr></table></figure><ol start="5"><li><h4 id="Request的继承关系"><a href="#Request的继承关系" class="headerlink" title="Request的继承关系"></a>Request的继承关系</h4></li></ol><p>ServletRequest 接口<br>        |–HttpServletRequest 接口 继承<br>                    |–org.apache.catalina.connector.RequestFacade  Tomcat写的实现类</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol><li><h5 id="获取请求消息数据："><a href="#获取请求消息数据：" class="headerlink" title="获取请求消息数据："></a>获取请求消息数据：</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">获取请求行  GET  &#x2F;day14&#x2F;demo1?name&#x3D;jack HTTP&#x2F;1.1</span><br><span class="line">方法：</span><br><span class="line">String getMethod()   GET </span><br><span class="line">    String getContextPath()  &#x2F;day14  (*)重点掌握</span><br><span class="line">String getServletPath() &#x2F;demo1</span><br><span class="line">String getQueryString  name&#x3D;jack</span><br><span class="line">String getRequestURI()  &#x2F;day14&#x2F;demo1   (*)</span><br><span class="line">StringBuffer getRequestURL()  http:&#x2F;&#x2F;localhost&#x2F;day14&#x2F;demo1</span><br><span class="line">String getProtocol HTTP&#x2F;1.1</span><br><span class="line">String getRemoteAddr()  获取客户机的ip地址</span><br><span class="line"></span><br><span class="line">URL:统一资源定位符  是URL的子集</span><br><span class="line">URI:统一资源标识符  </span><br><span class="line"></span><br><span class="line">获取请求头</span><br><span class="line">String getHeader(String name) 通过请求头的名称获取请求头的值  键值对(*)</span><br><span class="line">Enumeration&lt;String&gt; getHeaderNames() 获取所有请求头名称 </span><br><span class="line"></span><br><span class="line">获取请求体</span><br><span class="line">只有POST方式才有，封装了请求参数</span><br><span class="line">步骤：</span><br><span class="line">1.获取流对象</span><br><span class="line">BufferedRead getReader() 字符流</span><br><span class="line">ServletInputStream get InputStream() 字节流  在文件上传时在讲</span><br><span class="line">2.再从流对象中获取数据</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">获取请求参数通用方式  兼容GET和POST</span><br><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span> 根据参数名称返回参数值  如<span class="title">getParameter</span><span class="params">(<span class="string">"name"</span>)</span> </span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span>  返回参数名的多个value，返回数组</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> 获取所有参数名称</span></span><br><span class="line"><span class="function">Map&lt;String,String[]&gt; <span class="title">getParameterMap</span><span class="params">()</span> 获取所有参数的Map集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">TOMCAT8 在GET模式下已经将中文乱码问题解决</span></span><br><span class="line"><span class="function">POST模式 在获取参数前，设置请求request的变暗 request.<span class="title">setCharacterEncoding</span><span class="params">(<span class="string">"utf-8"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">请求转发:一种在服务器内部进行资源跳转的方式 </span></span><br><span class="line"><span class="function">步骤：</span></span><br><span class="line"><span class="function">1.通过request对象获取请求转发器对象RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">2.使用RequestDispatcherd对象进行转发 forward（ServletRequest request,ServletResponseresponse) </span></span><br><span class="line"><span class="function">    特点：</span></span><br><span class="line"><span class="function">    1.浏览器地址栏不会发生变化</span></span><br><span class="line"><span class="function">    2.服务器内部的资源的转发，转发的路径不能是外部的资源</span></span><br><span class="line"><span class="function">    3.转发是一次请求</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">共享数据</span></span><br><span class="line"><span class="function">    域对象：一个有作用范围的对象，在范围内共享数据</span></span><br><span class="line"><span class="function">    request域：代表一次请求的范围，用于请求转发的多个资源中共享数据</span></span><br><span class="line"><span class="function">    方法：</span></span><br><span class="line"><span class="function">    <span class="title">setAttribute</span><span class="params">(String name,Object obj)</span> 在第一个servlet里设置值</span></span><br><span class="line"><span class="function">    Object <span class="title">getAttribute</span><span class="params">(name)</span>  在得到转发的servlet中去接收值</span></span><br><span class="line"><span class="function">    <span class="title">removeAttribute</span><span class="params">(name)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">获取SevrletContext</span></span><br><span class="line"><span class="function">    ServletContext <span class="title">getServletContext</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><p>用户登录案例需求：<br>    1.编写login.html登录页面<br>        username &amp; password 两个输入框<br>    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表<br>    3.使用JdbcTemplate技术封装JDBC<br>    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您<br>    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误<br>步骤：</p><ol><li><p>创建项目，导入html页面，数据库配置文件，jar包</p></li><li><p>获取数据库连接</p></li><li><p>创建Javabean，封装user信息</p></li><li><p>创建UserDAO 操作user表的类，写增删改查方法</p></li><li><p>写login suc fail Servlet，进行请求转发</p></li><li><p>BeanUtils工具类<br>JavaBean标准<br>类用public修饰<br>提供空参的构造器<br>成员变量必须使用private修饰<br>提供public的getter和setter</p><p>setProperty() getProperty()  populate(Object obj,Map map)封装</p></li></ol><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">响应行</span><br><span class="line">组成：协议&#x2F;版本  响应状态码 状态码描述  HTTP&#x2F;1.1 200 OK</span><br><span class="line"></span><br><span class="line">响应状态码：服务器告诉浏览器本次请求和响应的状态，都是3位数，分为5类</span><br><span class="line">分类：</span><br><span class="line">1xx  服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx，询问是否还有请求</span><br><span class="line">2xx  成功。200</span><br><span class="line">3xx  重定向。302（重定向），资源跳转的方式； 304（访问缓存）</span><br><span class="line">4xx  客户端错误  404请求路径没有对应的资源 405（请求没有对应的doXxx方法，和请求方式不一致）</span><br><span class="line">5xx 服务器错误 500（服务器内部错误）</span><br><span class="line">响应头</span><br><span class="line">格式 头名称：值</span><br><span class="line">常见响应头</span><br><span class="line">Content-Type:type&#x2F;html;charset&#x3D;UTF-8</span><br><span class="line">Content-disposition 服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">默认值：in-line 在当前页面打开</span><br><span class="line">atttachment；filename&#x3D;xxx 以附件形式打开响应体。用于文件下载</span><br><span class="line">响应空行</span><br><span class="line">响应体</span><br><span class="line">真实的传输的数据 html页面 ，图片等资源</span><br></pre></td></tr></table></figure><h4 id="功能：设置响应消息"><a href="#功能：设置响应消息" class="headerlink" title="功能：设置响应消息"></a>功能：设置响应消息</h4><ol><li>设置响应行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">设置状态码：setStatus(int sc)</span><br></pre></td></tr></table></figure><ol start="2"><li>设置响应头</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setHeader(String name,String value)</span><br></pre></td></tr></table></figure><ol start="3"><li>设置响应体</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤</span><br><span class="line">(1)获取输出流</span><br><span class="line">字符流PrintWriter getWriter()</span><br><span class="line">字节流 ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line">(2)使用输出流将数据输出到客户端浏览器</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">(1)实现：</span><br><span class="line">&#x2F;* &#x2F;&#x2F;方式一：访问&#x2F;reresponseDemo1 会自动跳转到responseDemo2</span><br><span class="line">&#x2F;&#x2F;1.设置响应行的状态码为302</span><br><span class="line">response.setStatus(302);</span><br><span class="line">&#x2F;&#x2F;2.设置响应头location</span><br><span class="line">response.setHeader(&quot;location&quot;,&quot;&#x2F;day15&#x2F;responseDemo2&quot;);  &#x2F;&#x2F;虚拟路径+资源路径*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式二：</span><br><span class="line">response.sendRedirect(&quot;&#x2F;day15&#x2F;responseDemo2&quot;); &#x2F;&#x2F;可以是任意的url</span><br><span class="line"></span><br><span class="line">(2)特点：转发vs重定向</span><br><span class="line">转发：forward</span><br><span class="line">1.转发地址栏路径不变</span><br><span class="line">2.只能访问当前服务器路径下的资源</span><br><span class="line">3.转发是一次请求，可以使用request对象共享数据</span><br><span class="line"></span><br><span class="line">重定向：redirect</span><br><span class="line">1.地址栏发生变化</span><br><span class="line">2.可以访问其他服务器的资源</span><br><span class="line">3.重定向是两次请求，不再能使用request对象共享数据，两次req&#x2F;resp是不同的</span><br><span class="line"></span><br><span class="line">(3)路径写法</span><br><span class="line">1.相对路径：以.开头 .&#x2F;index.html</span><br><span class="line">确定当前资源和目标资源之间的位置关系</span><br><span class="line">例1 .&#x2F; 当前目录</span><br><span class="line">当前：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;location.html</span><br><span class="line">目标：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">路径为 .&#x2F;responseDemo1  可以省略为responseDemo1</span><br><span class="line">例2 ..&#x2F; 后退一级目录</span><br><span class="line">当前：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;htmls&#x2F;location.html</span><br><span class="line">目标：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">路径为 ..&#x2F;responseDemo1</span><br><span class="line"></span><br><span class="line">2.绝对路径： 以&#x2F;开头</span><br><span class="line">通过绝对路径可以确定唯一资源 如http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo1</span><br><span class="line">可以省略协议，ip，端口&#x2F;day15&#x2F;responseDemo1</span><br><span class="line"></span><br><span class="line">3.使用规则：根据使用的对象决定是否加虚拟目录</span><br><span class="line">给客户端浏览器使用：需要加虚拟目录，如重定向，&lt;a&gt; &lt;form&gt;</span><br><span class="line">response.sendRedirect(&quot;&#x2F;day15&#x2F;responseDemo2&quot;);</span><br><span class="line">给服务器使用：不需要加虚拟目录，如转发时,就不要写虚拟目录</span><br><span class="line">request.getRequestDispatcher(&quot;&#x2F;xxxServlet&quot;).forward(request,response);</span><br><span class="line"></span><br><span class="line">4.动态获取虚拟目录</span><br><span class="line">String request.getContextPath()</span><br><span class="line">response.sendRedirect(contextPath+&quot;资源名称&quot;),更改虚拟目录不需要大量调整代码</span><br><span class="line">客户端的虚拟目录也可以动态获取：jsp</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*设置编码格式 防止乱码问题</span><br><span class="line">方式一：</span><br><span class="line">&#x2F;&#x2F;在获取流之前，设置流的默认编码（ISO-8859-1）为需要的编码格式</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">&#x2F;&#x2F;告诉浏览器，服务器发送的消息编码格式，建议浏览器使用该编码解码</span><br><span class="line">response.setHeader(&quot;content-type&quot;,&quot;text&#x2F;html;charset&#x3D;utf-8&quot; );  &#x2F;&#x2F;text是html的根本的格式*&#x2F;</span><br><span class="line">&#x2F;&#x2F;方式二</span><br><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.获取字符输出流</span><br><span class="line">PrintWriter pw &#x3D; response.getWriter();  &#x2F;&#x2F;不需要关流，response一次响应结束后自动回销毁，自己做了关闭流的操作</span><br><span class="line">&#x2F;&#x2F;2.输出数据</span><br><span class="line">&#x2F;&#x2F; pw.write(&quot;hello response&quot;);</span><br><span class="line">&#x2F;&#x2F; pw.write(&quot;&lt;h1&gt;hello response&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">pw.write(&quot;你好啊 响应&quot;);</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">&#x2F;&#x2F;1.获取字节输出流</span><br><span class="line">ServletOutputStream sos &#x3D; response.getOutputStream();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.输出数据</span><br><span class="line">sos.write(&quot;hello 你好&quot;.getBytes(&quot;utf-8&quot;));  &#x2F;&#x2F;Chrome默认的字符集是随系统的GBK</span><br></pre></td></tr></table></figure><ol start="4"><li><h5 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">本质是图片 防止恶意的表单注册</span><br><span class="line"></span><br><span class="line">Servlet代码</span><br><span class="line">int width &#x3D; 100;</span><br><span class="line">        int height &#x3D; 50;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.创建一个对象，验证码图片的对象</span><br><span class="line">        BufferedImage image &#x3D; new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        &#x2F;&#x2F;2.生成验证码图片</span><br><span class="line">        &#x2F;&#x2F;2.1 填充背景色</span><br><span class="line">        Graphics graphics &#x3D; image.getGraphics(); &#x2F;&#x2F;画笔对象</span><br><span class="line">        graphics.setColor(Color.pink);  &#x2F;&#x2F;设置颜色</span><br><span class="line">        graphics.fillRect(0,0,width,height);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.2 画边框</span><br><span class="line">        graphics.setColor(Color.BLUE);</span><br><span class="line">        graphics.drawRect(0,0,width-1,height-1);   &#x2F;&#x2F;0,0是左上角的坐标,边框有一个px</span><br><span class="line">        String str &#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2.3 写验证码</span><br><span class="line">        for (int i &#x3D; 1; i &lt;5 ; i++) &#123;</span><br><span class="line">            int index &#x3D; random.nextInt(str.length());  &#x2F;&#x2F;随机角标</span><br><span class="line">            char ch &#x3D; str.charAt(index);</span><br><span class="line">            graphics.drawString(ch+&quot;&quot;,width&#x2F;5*i,height&#x2F;2);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.4 画干扰线</span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        for (int i &#x3D; 0; i &lt;5 ; i++) &#123;</span><br><span class="line">            int x1 &#x3D; random.nextInt(width);</span><br><span class="line">            int x2 &#x3D; random.nextInt(width);</span><br><span class="line">            int y1 &#x3D; random.nextInt(height);</span><br><span class="line">            int y2 &#x3D; random.nextInt(width);</span><br><span class="line">            graphics.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;3.输出到页面</span><br><span class="line">        ImageIO.write(image,&quot;jpg&quot;,response.getOutputStream());</span><br><span class="line">        &#x2F;&#x2F;从内存中输出的图片，那这里还有response吗？</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">HTML页面 </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img id&#x3D;&quot;checkCode&quot; src&#x3D;&quot;&#x2F;day15&#x2F;checkCodeServlet&quot;&#x2F;&gt;</span><br><span class="line">    &lt;a id&#x3D;&quot;change&quot; href&#x3D;&quot;&quot;&gt;看不清，换一张&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       &#x2F;* 1.给超链接和图片绑定单击事件</span><br><span class="line">        2.重新设置图片的src属性*&#x2F;</span><br><span class="line">        window.onload &#x3D; function()&#123;</span><br><span class="line">           var img &#x3D; document.getElementById(&quot;checkCode&quot;);</span><br><span class="line">           img.onclick &#x3D; function()&#123;</span><br><span class="line">               &#x2F;&#x2F;加时间戳,解决缓存问题，每次都传一个不重复的参数</span><br><span class="line">               var date &#x3D; new Date().getTime();</span><br><span class="line">               img.src&#x3D;&quot;&#x2F;day15&#x2F;checkCodeServlet?&quot;+date;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><p>需求：</p><ol><li>页面显示超链接</li><li>点击超链接弹出下载提示框</li><li>完成图片文件下载</li></ol><p>超链接指向的资源，如果可以被浏览器解析，则直接展示，不能解析则下载。使用响应头的content-dispostion:attachment;filename=xxx</p><p>步骤：</p><ol><li><p>定义页面，超链接指向一个servlet，传递资源的名称filename</p></li><li><p>定义servlet，获取filename，使用字节输入流加载文件进内存</p></li><li><p>设置响应头 content-dispostion:attachment;filename=xxx</p></li><li><p>将数据写出到response输出流</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">HTML页面</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#x2F;day15&#x2F;downloadServlet?filename&#x3D;img1.jpg&quot;&gt;image1&lt;&#x2F;a&gt;  加虚拟路径图片格式</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;downloadServlet&quot;)</span><br><span class="line">public class DownloadServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String filename &#x3D; request.getParameter(&quot;filename&quot;);</span><br><span class="line">        ServletContext servletContext &#x3D; this.getServletContext();</span><br><span class="line">        &#x2F;&#x2F;获取内容类型，设置返回内容类型</span><br><span class="line">        String mimeType &#x3D; servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(&quot;content-type&quot;,mimeType);</span><br><span class="line">        &#x2F;&#x2F;获取真实路径</span><br><span class="line">        String realPath &#x3D; servletContext.getRealPath(&quot;img&quot;+filename);  &#x2F;&#x2F;这里不要加&#x2F;web &#x2F;指的就是web，WEB-INF特殊</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(new File(realPath)); &#x2F;&#x2F;不要加引号</span><br><span class="line">        response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename&#x3D;&quot;+filename);</span><br><span class="line">        ServletOutputStream os &#x3D; response.getOutputStream();</span><br><span class="line">        byte[] buffer &#x3D; new byte[1024*8];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len&#x3D;fis.read(buffer))!&#x3D;-1)&#123;</span><br><span class="line">           os.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下载文件名中文乱码</p><p>获取客户端的浏览器版本信息</p><p>根据不同版本信息，去设置编码方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;解决中文文件名问题：在设置响应头之前设置编码方式</span><br><span class="line">        &#x2F;&#x2F;获取请求头的ua</span><br><span class="line">        String agent &#x3D; request.getHeader(&quot;user-agent&quot;);</span><br><span class="line">        &#x2F;&#x2F;使用工具类方法编码文件名</span><br><span class="line">        filename &#x3D; DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">         response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename&#x3D;&quot;+filename);</span><br></pre></td></tr></table></figure><p>可以实现局域网内文件传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.把需要传输的文件放入img文件夹</span><br><span class="line">2.在download.html 修改filename</span><br><span class="line">3.启动服务器</span><br><span class="line">4.从手机端，或者另一台电脑访问192.168.2.116&#x2F;day15&#x2F;down.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Tomcat、Servlet与HTTP协议
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何确立一种深信不疑</title>
    <link href="https://paranoiddemon.github.io/blog/posts/how-to-believe.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/how-to-believe.html</id>
    <published>2020-06-30T16:24:46.000Z</published>
    <updated>2020-07-06T06:19:27.059Z</updated>
    
    <content type="html"><![CDATA[<p>一、<br>Fortran语言之父John Backus 在获得图灵奖的时候讲了这么一段话，描述冯诺依曼瓶颈</p><blockquote><p>Surely there must be a less primitive way of making big changes in the store than by pushing vast numbers of words back and forth through the von Neumann bottleneck. Not only is this tube a literal bottleneck for the data traffic of a problem, but, more importantly, it is an intellectual bottleneck that has kept us tied to word-at-a-time thinking instead of encouraging us to think in terms of the larger conceptual units of the task at hand. Thus programming is basically planning and detailing the enormous traffic of words through the von Neumann bottleneck, and much of that traffic concerns not significant data itself, but where to find it.</p></blockquote><p>“intellectual bottleneck “这个词精确而微妙。genetic bottleneck，intellectual bottleneck，哪个更致命？</p><p>二、</p><p>最近在知乎读到一个问题：<a href="https://www.zhihu.com/question/264893261/answer/286954136" target="_blank" rel="noopener">为什么矩形面积等于长乘宽?</a> 那么多显而易见的问题，并不是那么得显而易见。</p><p>回答里甚至有人说，这是小学生都懂的东西。从某种程度上来说，我们都可以算是他口中的小学生。对于某些问题不应该去深究，这是做正常人的要义。这是我们一直受到的教育，「服从」是我们教育里很糟糕的一点，渗透在社会的每一个角落，讨厌至极。</p><p>三、</p><p>我发现，当进入一种生活模式后，人就会陷入一种时间的惯性，生活坍缩进一个没有维度的空间，很难去怀疑那些如真理的日常的正当性。很多人对生活道路的深信不疑就来自于这样一种未经考量的惯性。</p><p>现在才渐渐意识到用一些时间去审视过去是有帮助的。没有白走的路，也没有不付出代价的选择。至少还不算太晚明白。用行动去实践意义，而不是空想。</p><p>四、</p><p>Why not thinking in terms of the bigger picture?</p>]]></content>
    
    <summary type="html">
    
      Why not thinking in terms of the bigger picture?
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Thoughts" scheme="https://paranoiddemon.github.io/blog/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Java-IO流</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-io-stream.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-io-stream.html</id>
    <published>2020-06-29T12:24:46.000Z</published>
    <updated>2020-07-06T00:52:28.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/30/PDpnxHKwYrtWINu.png" alt="IO流体系"></p><h1 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、File类的使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.File类的对象代表一个文件或者一个文件目录</span></span><br><span class="line"><span class="comment">2.声明在java.io包下</span></span><br><span class="line"><span class="comment">3.涉及文件或者文件目录的创建、删除、重命名、修改时间、文件大小等方法</span></span><br><span class="line"><span class="comment">并未涉及到写入或者读取文件目录，要实现该功能就需要IO流来完成</span></span><br><span class="line"><span class="comment">4.file类的对象常作为参数传到流的构造器中，作为流的写入或者读写的终点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、如何创建File实例</span></span><br><span class="line"><span class="comment">三个构造器都有可能使用：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">相对路径：相较于某个路径下，指明的路径</span></span><br><span class="line"><span class="comment">绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意</span></span><br><span class="line"><span class="comment">在windows和dos 路径分隔符使用“\”表示 转义要写两个</span></span><br><span class="line"><span class="comment">unix和url使用“/”表示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、常用方法</span></span><br><span class="line"><span class="comment"> public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment"> public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment"> public String getName() ：获取名称</span></span><br><span class="line"><span class="comment"> public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment"> public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment"> public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment"> public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">  public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">  public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">  public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">  public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">  public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">  public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">  public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目 路径下。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">File类的删除功能</span></span><br><span class="line"><span class="comment"> public boolean delete()：删除文件或者文件夹 删除注意事项：</span></span><br><span class="line"><span class="comment">Java中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器1：直接写路径</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);  <span class="comment">//相对于当前Module所在的文件路径</span></span><br><span class="line">        File file2  = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior\\day09\\hello.txt"</span>); <span class="comment">//两个\是为了转译</span></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);  <span class="comment">//现在还只是内存层面的一个对象，未涉及到删改，所以没有文件也不会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2: 上一级路径 + 当前的文件目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior\\day09"</span>,<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3：对象名+文件名 File对象可以是文件目录</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3, <span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File (<span class="string">"d:\\io\\hi.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">// public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">// public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">// public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">// public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">// public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line">        System.out.println(file1.getPath());  <span class="comment">//hello.txt</span></span><br><span class="line">        System.out.println(file1.getAbsolutePath());  <span class="comment">//D:\IDEA_workspace\JavaSenior\day09\hello.txt</span></span><br><span class="line">        System.out.println(file1.getName());   <span class="comment">//hello.txt</span></span><br><span class="line">        System.out.println(file1.getParent());  <span class="comment">//null  此时文件还不存在</span></span><br><span class="line">        System.out.println(file1.length());    <span class="comment">//0  --&gt; 11</span></span><br><span class="line">        System.out.println(file1.lastModified());   <span class="comment">//0  --&gt;  1593391633017  毫秒数</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date(file1.lastModified());</span><br><span class="line">        System.out.println(date);    <span class="comment">//Mon Jun 29 08:47:13 CST 2020</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getPath());  <span class="comment">//d:\io\hi.txt</span></span><br><span class="line">        System.out.println(file2.getAbsolutePath());  <span class="comment">//d:\io\hi.txt</span></span><br><span class="line">        System.out.println(file2.getName());   <span class="comment">//hi.txt</span></span><br><span class="line">        System.out.println(file2.getParent());  <span class="comment">//d:\io</span></span><br><span class="line">        System.out.println(file2.length());    <span class="comment">//0</span></span><br><span class="line">        System.out.println(file2.lastModified());   <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//适用于文件目录</span></span><br><span class="line"><span class="comment">// public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">// public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\IDEA_workspace\\JavaSenior"</span>); <span class="comment">//打印该目录所有文件和目录，要求目录必须存在</span></span><br><span class="line">        String[] list = file3.list();</span><br><span class="line">        <span class="keyword">for</span>(String t: list)&#123;</span><br><span class="line">            System.out.println(t);     <span class="comment">//只列出名字</span></span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = file3.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f:files)&#123;</span><br><span class="line">            System.out.println(f);   <span class="comment">//D:\IDEA_workspace\JavaSenior\day01,以绝对路径的方式输出的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">// file1 renameTo(file2)，要返回true，需要file1在硬盘中是存在的，file2不存在，不能进行覆盖操作，而且一旦true，file1在硬盘中不再存在；</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);    <span class="comment">//首先要file要存在</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\hi.txt"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file2.renameTo(file1);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io"</span>);</span><br><span class="line"><span class="comment">// public boolean isDirectory()：判断是不是文件目录</span></span><br><span class="line"><span class="comment">// public boolean isFile() ：判断是不是文件</span></span><br><span class="line"><span class="comment">// public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">// public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">// public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">// public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());<span class="comment">//一般先判断是否存在</span></span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hi.txt"</span>);</span><br><span class="line"><span class="comment">//public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">//public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">//public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public boolean delete()：删除文件或者文件夹 删除注意事项：</span></span><br><span class="line"><span class="comment">// Java中的删除不走回收站。 要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件的创建</span></span><br><span class="line">        <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io3"</span>);  <span class="comment">//目录存在，上层目录不存在。就都不创建</span></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file.mkdir();</span><br><span class="line">        <span class="keyword">if</span> (mkdir == <span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io4"</span>);  <span class="comment">//如果上层目录不存在，就可以一并创建</span></span><br><span class="line">            <span class="keyword">boolean</span> mkdirs = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span> (mkdirs == <span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建失败1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、节点流"><a href="#二、节点流" class="headerlink" title="二、节点流"></a>二、节点流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IO流</span></span><br><span class="line"><span class="comment">1.概念</span></span><br><span class="line"><span class="comment">数据的输入输出的方式以流stream的方式进行</span></span><br><span class="line"><span class="comment">Java中定义了各种stream类，可以获取不同的种类并通过标准的方式输入输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.分类：</span></span><br><span class="line"><span class="comment">按照数据单位不同</span></span><br><span class="line"><span class="comment">字节流 8bit 图片 视频</span></span><br><span class="line"><span class="comment">字符流 16bit 文本  char 2byte</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">流向不同</span></span><br><span class="line"><span class="comment">输入流</span></span><br><span class="line"><span class="comment">输出流</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">按角色不同</span></span><br><span class="line"><span class="comment">节点流：直接作用于文件上的</span></span><br><span class="line"><span class="comment">处理流：在已有的流的基础上在加一层  比如：加快流的传输速度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.体系结构</span></span><br><span class="line"><span class="comment">抽象基类</span></span><br><span class="line"><span class="comment">字节流：InputStream OutputStream</span></span><br><span class="line"><span class="comment">字符流：Reader Writer</span></span><br><span class="line"><span class="comment">涉及40多个流都是基于以上四个抽象基类</span></span><br><span class="line"><span class="comment">                    字节流                 字节流           字符流           字符流</span></span><br><span class="line"><span class="comment">抽象基类：       InputStream          OutputStream          Reader           Writer</span></span><br><span class="line"><span class="comment">节点流（文件流）: FileInputStream      FileOutputStream      FileReader      FileWriter</span></span><br><span class="line"><span class="comment">缓冲流（处理流）：BufferedInputStream  BufferedOutputStream  BufferedReader  BufferedWriter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将文件读到程序，并输出到控制台</span></span><br><span class="line"><span class="comment">    1.reader()方法</span></span><br><span class="line"><span class="comment">    2.异常的处理，为了保证流资源一定可以关闭，要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3读入的文件一定要存在，否则会报FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>  </span>&#123;   <span class="comment">//在单元测试的相对路径是相较于当前module的，main方法默认是在Project文件夹下</span></span><br><span class="line">        <span class="comment">//1.先实例化File对象 指明要操作的文件</span></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//返回读入的一个字符，如果到达文件末尾，返回-1</span></span><br><span class="line"><span class="comment">//        int data = fr.read();    //以int存的char相当于是ASCII码</span></span><br><span class="line"><span class="comment">//        while (data!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);   //读入的是int，然后在转为char</span></span><br><span class="line"><span class="comment">//            data = fr.read();                  //每次只读一个，不是-1就输出</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//语法上的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr!=<span class="keyword">null</span>)   <span class="comment">//可能在实例化之前就出现异常，因此就要判断是不是为null，再执行finally内部的语句</span></span><br><span class="line">                fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.流的关闭操作,涉及物理上的连接，JVM不能自动垃圾回收，需要手动关闭， 不然可能会导致内存泄漏</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//对read()操作升级，使用read的重载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.File类实例化</span></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuffer= <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];    <span class="comment">//其实是用同一个数组反复去装剩下的元素</span></span><br><span class="line">            <span class="keyword">int</span> len;     <span class="comment">//读进去的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len=fr.read(cbuffer))!=-<span class="number">1</span>) &#123;    <span class="comment">//int read(char[])返回值是每次读入的字符的个数,到文件末尾返回-1</span></span><br><span class="line">                <span class="comment">//方法一：遍历char[]</span></span><br><span class="line"><span class="comment">//                for (int i = 0; i &lt;len ; i++) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuffer[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//错误写法：还是会把char[]里的没有被覆盖部分输出</span></span><br><span class="line"><span class="comment">//                String str  = new String(cbuffer);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuffer,<span class="number">0</span>,len);   <span class="comment">//string里的方法，把char[]的一部分转为String</span></span><br><span class="line">                System.out.print(str); <span class="comment">//不要用换行打印</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fr!=<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/*写出文件</span></span><br><span class="line"><span class="comment">    1.输出操作:如果File不存在，就会自动创建此文件</span></span><br><span class="line"><span class="comment">    2.File对应的文件已经存在了</span></span><br><span class="line"><span class="comment">        构造器：FileWriter(file,false) /FileWriter(file) ,覆盖源文件</span></span><br><span class="line"><span class="comment">               FileWriter(file,true)  不会覆盖源文件，而是在源文件append</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.提供File类的对象，指明写出的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.提供FileWriter的对象，用于数据写出</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.写出的操作</span></span><br><span class="line">        fw.write(<span class="string">"i have a dream\n"</span>);  <span class="comment">//覆盖文件</span></span><br><span class="line">        fw.write(<span class="string">"i have an apple"</span>);</span><br><span class="line">        <span class="comment">//4.关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用字符流复制文本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf  = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    fw.write(cbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用字节流复制图片</span></span><br><span class="line">    <span class="comment">/*使用字节流，且以数组来读取，也可以复制文档中的英文和数字，但是汉字就不行了，因为中文用三个字符去表示</span></span><br><span class="line"><span class="comment">    因为ASCII码和UTF-8底层的英文字母和数字还是用一个byte存储的，但是如果一个个byte去读中文也是可以的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    对于文本文件：.txt .java .c .cpp  使用字符流处理</span></span><br><span class="line"><span class="comment">    对于非文本文件： .jpg .mp4 .doc .ppt  是有字节流处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"70pomn1.jpg"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] bbuf  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(bbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fw.write(bbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//一个个byte读.复制用字节流也可以，但是在内存中读会乱码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            File file2 = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line"><span class="comment">//            byte[] bbuf  = new byte[5];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while ((len = fr.read(bbuf))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                fw.write(bbuf,0,len);  //每次写出len个字符</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fw.write(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"duplicate success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FileInputStream fr = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File对象，指明读入和写出的文件</span></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图像、视频等字节流的文件</span></span><br><span class="line">            File srcfile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destfile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.创建流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileInputStream(srcfile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileOutputStream(destfile);</span><br><span class="line">            <span class="comment">//3.数据的读写操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] bbuf  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(bbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                fw.write(bbuf,<span class="number">0</span>,len);  <span class="comment">//每次写出len个字符</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();      <span class="comment">//如果写在里面，就可能出现fr.close异常的时候，fw.close执行不了，因此要拿出来并列写</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//复制视频所需要的时间 70MB</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        String srcPath = <span class="string">"C:\\Users\\demon\\Desktop\\01.avi"</span>;</span><br><span class="line">        String destPath = <span class="string">"C:\\Users\\demon\\Desktop\\02.avi"</span>;</span><br><span class="line">        copyFile(srcPath,destPath);</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"duplicate cost mills:"</span>+(e-s)); <span class="comment">//769ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、缓冲流"><a href="#三、缓冲流" class="headerlink" title="三、缓冲流"></a>三、缓冲流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.缓冲流的使用</span></span><br><span class="line"><span class="comment">                    字节流                 字节流           字符流             字符流</span></span><br><span class="line"><span class="comment">抽象基类：        InputStream          OutputStream          Reader             Writer</span></span><br><span class="line"><span class="comment">节点流（文件流）: FileInputStream      FileOutputStream      FileReader        FileWriter</span></span><br><span class="line"><span class="comment">缓冲流（处理流）：BufferedInputStream  BufferedOutputStream  BufferedReader     BufferedWriter</span></span><br><span class="line"><span class="comment">对应的方法参数：  read(byte[] buffer)  writer(byte[] buffer) read(char[] cbuf)  writer(char[] cbuf)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.缓冲流的作用：提高读写的速度，开发中缓冲流使用得比较多</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么可以提高读写的速度：缓冲区</span></span><br><span class="line"><span class="comment">提供了8192byte（8kB)的缓存空间，读满之后一次性的写出  BufferedRead 是8192个char，16kB</span></span><br><span class="line"><span class="comment">通过flush()去刷新缓冲区</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.处理流：套接在已有流的基础上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">"70pomn1.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.1 节点流</span></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 缓冲流 处理流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制：内容的读写</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;  <span class="comment">//read里的数组不要溜掉了</span></span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.流资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明：在关闭外层流的时候会自动关闭内层流，因此可以省略</span></span><br><span class="line"><span class="comment">//        fileInputStream.close();</span></span><br><span class="line"><span class="comment">//        fileOutputStream.close();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis!=<span class="keyword">null</span>)</span><br><span class="line">                    bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)</span><br><span class="line">                    bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String src,String dest)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(src);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(dest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.1 节点流</span></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 缓冲流 处理流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制：内容的读写</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer))!=-<span class="number">1</span>)&#123;  <span class="comment">//read里的数组不要溜掉了</span></span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.流资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明：在关闭外层流的时候会自动关闭内层流，因此可以省略</span></span><br><span class="line"><span class="comment">//        fileInputStream.close();</span></span><br><span class="line"><span class="comment">//        fileOutputStream.close();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis!=<span class="keyword">null</span>)</span><br><span class="line">                    bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)</span><br><span class="line">                    bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> s = System.currentTimeMillis();</span><br><span class="line">        String src = <span class="string">"C:\\Users\\demon\\Desktop\\01.avi"</span>;</span><br><span class="line">        String desc = <span class="string">"C:\\Users\\demon\\Desktop\\02.avi"</span>;</span><br><span class="line">        copyFileWithBuffered(src,desc);</span><br><span class="line">        <span class="keyword">long</span> e = System.currentTimeMillis();</span><br><span class="line">        System.out.println(e-s);  <span class="comment">//192</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>)));<span class="comment">//默认是false，就会覆盖源文件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf))!=-1)&#123;   //不要漏了判断不等于-1</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：使用String和readline</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span> ((data=br.readLine())!= <span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(data+<span class="string">"\n"</span>);  <span class="comment">//不包含换行符</span></span><br><span class="line">                <span class="comment">//bw.newLine();  提供换行操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="keyword">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bw != <span class="keyword">null</span>)</span><br><span class="line">            bw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、转换流"><a href="#四、转换流" class="headerlink" title="四、转换流"></a>四、转换流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理流之二:转换流的使用</span></span><br><span class="line"><span class="comment">1.属于字符流</span></span><br><span class="line"><span class="comment">InputStreamReader：将一个字节的输入流 转换为字符的输入流    解码</span></span><br><span class="line"><span class="comment">OutputStreamWriter： 将一个字符的输出流 转换为字节的输出流  编码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.作用：提供字节流和字符流之间的转换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.字符集</span></span><br><span class="line"><span class="comment">常见的编码表</span></span><br><span class="line"><span class="comment"> ASCII：美国标准信息交换码。  用一个字节的7位可以表示。被其他字符集兼容</span></span><br><span class="line"><span class="comment"> ISO8859-1：拉丁码表。欧洲码表  用一个字节的8位表示。</span></span><br><span class="line"><span class="comment"> GB2312：中国的中文编码表。最多两个字节编码所有字符</span></span><br><span class="line"><span class="comment"> GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</span></span><br><span class="line"><span class="comment">    如果是两个byte表示的字符，最高位是1，表示的是一个byte的字符就是0</span></span><br><span class="line"><span class="comment"> Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的 字符码。所有的文字都用两个字节来表示。</span></span><br><span class="line"><span class="comment">    首位要用来表示是1byte还是2byte，所以只有2的15次方的空间 32768 不够世界上的所有字符使用，所以没有推广</span></span><br><span class="line"><span class="comment"> UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</span></span><br><span class="line"><span class="comment">    随着互联网的出现，没8bit传输数据就是utf-8 16bit就是utf-16</span></span><br><span class="line"><span class="comment">        1byte 0xxxxxxx</span></span><br><span class="line"><span class="comment">        2byte 110xxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">        3byte 1110xxxx 10xxxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">        4byte 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span><br><span class="line"><span class="comment">    1-4byte的分别对应原unicode中的一部分符号范围</span></span><br><span class="line"><span class="comment">    中文在utf-8中是三个byte</span></span><br><span class="line"><span class="comment">ANSI编码，通常指的是平台的默认编码，英文操作系统是ISO-8859-1,中文系统是GBK</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//实现字节的输入到字符的转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"hello1.txt"</span>);</span><br><span class="line">       <span class="comment">// InputStreamReader isr = new InputStreamReader(fis); //使用系统默认的字符集UTF-8</span></span><br><span class="line">        <span class="comment">//直接在参数中指定字符集，根据hello.txt文件当初保存时使用的字符集</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"GBK"</span>);  <span class="comment">//如果文件用的是utf-8编码，就会输出乱码</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf))!= -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                System.out.print(cbuf[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//InputStreamReader和OutputStreamWriter的综合使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"utf-8"</span>);   <span class="comment">//默认是utf-8</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">"gbk"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(osw!= <span class="keyword">null</span>)</span><br><span class="line">            osw.close();</span><br><span class="line">        <span class="keyword">if</span>(isr!= <span class="keyword">null</span>)</span><br><span class="line">            isr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、对象流"><a href="#五、对象流" class="headerlink" title="五、对象流"></a>五、对象流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理流之六：对象流</span></span><br><span class="line"><span class="comment">ObjectInputStream</span></span><br><span class="line"><span class="comment">ObjectOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">序列化：把内存中的Java对象保存到磁盘中或通过网络传输出去 通过ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">反序列化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、对象的序列化机制</span></span><br><span class="line"><span class="comment">1.把Java对象转换成平台无关的二进制流，从而允许把这种二进制流永久地保存在磁盘上，或者通过网络将</span></span><br><span class="line"><span class="comment">这种二进制流传输到另一个网络节点。</span></span><br><span class="line"><span class="comment">当其他程序获取了这种二进制流，可以从中恢复为对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Java对象的可序列化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Person需要满足可序列化的:</span></span><br><span class="line"><span class="comment">1.实现Serializable:没有需要实现的抽象方法，称为标识接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.提供一个全局常量 serialVersionUID</span></span><br><span class="line"><span class="comment">2.1 serialVersionUID用来表明类的不同版本间的兼容性。</span></span><br><span class="line"><span class="comment">简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。</span></span><br><span class="line"><span class="comment">2.2 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。</span></span><br><span class="line"><span class="comment"> 若类的实例变量（非静态变量）做了修改，serialVersionUID 可能发生变化。故建议， 显式声明。</span></span><br><span class="line"><span class="comment">2.3 Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，</span></span><br><span class="line"><span class="comment">JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，</span></span><br><span class="line"><span class="comment">如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.除了当前person类需要实现Serializable,所有属性的也必须是可序列化的。基本数据类型默认是可序列化的</span></span><br><span class="line"><span class="comment">String也实现了Serializable，自定义类要实现Serializable,并且提供一个serialVersionUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.不能序列化static和transient修饰的成员变量,属性在序列化的时候就没有值，都是默认初始化值</span></span><br><span class="line"><span class="comment">Person&#123;name='null', age=0, id=0&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">把内存的对象转换成一种特殊格式的字符串 json   字符串自身是可以序列化的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStream</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"object.dat"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> String(<span class="string">"what is the problem with you?"</span>));</span><br><span class="line">            oos.flush();  <span class="comment">//刷新操作</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">"tom"</span>,<span class="number">20</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (oos!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//反序列化，把磁盘文件或者网络传输的对象还原为内存中的一个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"object.dat"</span>)));</span><br><span class="line">            Object o = ois.readObject();</span><br><span class="line">            String str = (String)o;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            Object person = ois.readObject();</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(ois!=<span class="keyword">null</span>)</span><br><span class="line">                ois.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Person需要满足可序列化的:</span></span><br><span class="line"><span class="comment">1.实现Serializable:没有需要实现的抽象方法，称为标识接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.提供一个全局常量 serialVersionUID</span></span><br><span class="line"><span class="comment">2.1 serialVersionUID用来表明类的不同版本间的兼容性。</span></span><br><span class="line"><span class="comment">简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。</span></span><br><span class="line"><span class="comment">2.2 如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。</span></span><br><span class="line"><span class="comment"> 若类的实例变量（非静态变量）做了修改，serialVersionUID 可能发生变化。故建议， 显式声明。</span></span><br><span class="line"><span class="comment">2.3 Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，</span></span><br><span class="line"><span class="comment">JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，</span></span><br><span class="line"><span class="comment">如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.除了当前person类需要实现Serializable,所有属性的也必须是可序列化的。基本数据类型默认是可序列化的</span></span><br><span class="line"><span class="comment">String也实现了Serializable，自定义类要实现Serializable,并且提供一个serialVersionUID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.不能序列化static和transient修饰的成员变量,属性在序列化的时候就没有值，都是默认初始化值</span></span><br><span class="line"><span class="comment">Person&#123;name='null', age=0, id=0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1231231313L</span>; <span class="comment">//用来识别所在类的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", id="</span> + id +<span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、其他流"><a href="#六、其他流" class="headerlink" title="六、其他流"></a>六、其他流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其他流的使用</span></span><br><span class="line"><span class="comment">1.标准的输入输出流</span></span><br><span class="line"><span class="comment">system.in</span></span><br><span class="line"><span class="comment">system.out</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.打印流(都是输出流）</span></span><br><span class="line"><span class="comment">PrintStream    system.out返回的就是PrintStream的实例 println()就是该类的方法</span></span><br><span class="line"><span class="comment">可以通过setOut把数据从控制台打印到指定的文件中</span></span><br><span class="line"><span class="comment">System.setOut(PrintStream)  PrintSteam(FileOutputStream) 从而打印到文件中</span></span><br><span class="line"><span class="comment">PrintWriter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提供了一系列重载的print()和println()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.数据流</span></span><br><span class="line"><span class="comment">操作基本数据类型和String的</span></span><br><span class="line"><span class="comment">DataInputStream</span></span><br><span class="line"><span class="comment">DataOutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">将数据持久化，用于读取和写入基本数据类型和字符串</span></span><br><span class="line"><span class="comment">有一系列方法。每次写入就要flush() 刷新把数据存在文件中</span></span><br><span class="line"><span class="comment">可以永久化和读取，读取数据得按写入的顺序读</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInOut</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    标准的输入输出流</span></span><br><span class="line"><span class="comment">    System.in   默认从键盘输入</span></span><br><span class="line"><span class="comment">    System.out  默认从控制台输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    System类的 setIn(InputStream in) setOut(PrintStream out)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    练习：把读取到的整行字符串转换成大写输出，e exit才退出</span></span><br><span class="line"><span class="comment">    方法一：使用Scanner实现</span></span><br><span class="line"><span class="comment">    方法二：使用System.in实现  --&gt;转换流--&gt; bufferReader的readline()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in); <span class="comment">//除了可以读取file 也可以直接读取键盘输入</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"e"</span>.equalsIgnoreCase(data)||<span class="string">"exit"</span>.equalsIgnoreCase(data))&#123; <span class="comment">//data写在参数里可以更好地避免空指针</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String upper = data.toUpperCase();</span><br><span class="line">                System.out.println(upper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、RandomAccessFile"><a href="#七、RandomAccessFile" class="headerlink" title="七、RandomAccessFile"></a>七、RandomAccessFile</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   RandomAccessFile的使用</span></span><br><span class="line"><span class="comment">   在java.io包下，但直接继承于Object，并且实现了DataInput DataOutput这两个接口，意味着这个类既可以读也可以写</span></span><br><span class="line"><span class="comment">   既是输入流又是输出流</span></span><br><span class="line"><span class="comment">   构造器 RandomAccessFile(File mode）RandomAccessFile(String mode）</span></span><br><span class="line"><span class="comment">   mode</span></span><br><span class="line"><span class="comment">   r:只读</span></span><br><span class="line"><span class="comment">   rw：读写</span></span><br><span class="line"><span class="comment">   rwd 同步文件内容</span></span><br><span class="line"><span class="comment">   rws 同步文件内容和元数据更新</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   //作为输出流时，写出到的文件如果不存在，就自动创建；如果文件已经存在，就会默认从头对原有文件内容进行覆盖</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   可以一定操作实现插入数据的操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   seek() 断点续传 开多个线程，每个线程执行，在下载的时候创建一个临时文件记录不同的线程的指针的位置，就可以实现断点续传</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;<span class="comment">//千万不要把类名写成和已经有的类一样的</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"70pomn4.jpg"</span>),<span class="string">"rw"</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"70pomn.jpg"</span>),<span class="string">"r"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = raf2.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                raf1.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(raf1!=<span class="keyword">null</span>)</span><br><span class="line">            raf1.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(raf2!=<span class="keyword">null</span>)</span><br><span class="line">            raf2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//作为输出流时，写出到的文件如果不存在，就自动创建；如果文件已经存在，就会默认从头对原有文件内容进行覆盖</span></span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"helloworld.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        raf.seek(<span class="number">3</span>);<span class="comment">//把指针调到角标为3的位置，即从第四位开始覆盖，也可以实现append</span></span><br><span class="line">        raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line">       <span class="comment">// raf.writeChars("xyz");</span></span><br><span class="line">        raf.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用RandomAccessFile实现插入的效果</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"helloworld.txt"</span>), <span class="string">"rw"</span>);</span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>)<span class="keyword">new</span> File(<span class="string">"helloworld.txt"</span>).length());</span><br><span class="line">        <span class="keyword">while</span>((len = raf.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)); <span class="comment">//把byte数组放进一个StringBuilder</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        raf.seek(<span class="number">3</span>);</span><br><span class="line">        raf.write(<span class="string">"xyz"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把StringBuild再写入</span></span><br><span class="line">        raf.write(sb.toString().getBytes());</span><br><span class="line">        raf.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考：将StringBuilder替换为ByteArrayInputStream</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习3:获取文本上字符出现的次数,把数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.遍历文本每一个字符</span></span><br><span class="line"><span class="comment"> * 2.字符出现的次数存在Map中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span></span><br><span class="line"><span class="comment"> * map.put('a',18);</span></span><br><span class="line"><span class="comment"> * map.put('你',2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.把map中的数据写入文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 3:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    说明：如果使用单元测试，文件相对路径为当前module</span></span><br><span class="line"><span class="comment">          如果使用main()测试，文件相对路径为当前工程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="keyword">char</span> ch = (<span class="keyword">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"wordcount.txt"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">                        bw.write(<span class="string">"空格="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\t'</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">"tab键="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\r'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"回车="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\n'</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">"换行="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">//遍历目录中的文件 ，计算空间、删除指定文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建同目录的文件</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\hello.txt"</span>);</span><br><span class="line">        String parent = file1.getParent();</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(file1.getParent(),<span class="string">"haha.txt"</span>);</span><br><span class="line">        file2.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\io"</span>);</span><br><span class="line">        String[] list = file1.list();</span><br><span class="line">        <span class="keyword">for</span>(String fileName: list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (fileName.length()&gt;<span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileName.substring(fileName.length() - <span class="number">4</span>, fileName.length()).equals(<span class="string">".jpg"</span>)) &#123;</span><br><span class="line">                    System.out.println(fileName);</span><br><span class="line">                    <span class="comment">//可以调用String的endsWith()</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"d:\\io"</span>);</span><br><span class="line">        FileExer fileExer = <span class="keyword">new</span> FileExer();</span><br><span class="line">        <span class="keyword">long</span> space = fileExer.getDir(file);</span><br><span class="line">        System.out.println(<span class="string">"space usage:"</span>+space+<span class="string">"byte"</span>);</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1"</span>,<span class="string">"io4"</span>);</span><br><span class="line"><span class="comment">//        file1.listFiles();</span></span><br><span class="line">        fileExer.deleteDir(file1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDir</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> space = <span class="number">0</span>;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f:files)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f.isDirectory())&#123;</span><br><span class="line">                getDir(f);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">long</span> length = f.length();</span><br><span class="line">                space += length;</span><br><span class="line">                System.out.println(f);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> space;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">deleteDir</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;  <span class="comment">//先删子目录</span></span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f:files)&#123;</span><br><span class="line">                deleteDir(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        file.delete();  <span class="comment">//然后删自己 ，即可能是文件也可能是文件夹</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"70pomn.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"70pomneEncrypt.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对字节进行修改</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                    buffer[i] =(<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!= <span class="keyword">null</span>)</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片的加密</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"70pomneEncrypt.jpg"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"70pomneDecrypt.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对字节进行修改</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;len ; i++) &#123;</span><br><span class="line">                    buffer[i] =(<span class="keyword">byte</span>) (buffer[i] ^ <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!= <span class="keyword">null</span>)</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">                fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：IO流
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-集合</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-collection.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-collection.html</id>
    <published>2020-06-27T16:24:46.000Z</published>
    <updated>2020-07-01T16:10:47.560Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/30/sNBg92cYCWdZSua.png" alt="集合框架"></p><h1 id="一、Collection"><a href="#一、Collection" class="headerlink" title="一、Collection"></a>一、Collection</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、集合框架的概述</span></span><br><span class="line"><span class="comment">1.集合、数组都是对多个数据进行存储操作的结构，简称Java容器</span></span><br><span class="line"><span class="comment">   存储：都是内存层面的，不涉及到持久化的存储（.txt .jpg 数据库中）</span></span><br><span class="line"><span class="comment">2.1 数组在储存多个数据方面的特点：</span></span><br><span class="line"><span class="comment">    - 一旦初始化以后，其长度就确定了。 //不能改</span></span><br><span class="line"><span class="comment">    - 一定定义好数组，其元素的类型也就确定了。只能操作指定类型的数据。  //其实是好处，数据类型严格</span></span><br><span class="line"><span class="comment">       但是可以使用多态性，放子类对象</span></span><br><span class="line"><span class="comment">2.2 数组在存储数据的缺点：</span></span><br><span class="line"><span class="comment">    - 一旦初始化，其长度就不可修改，如果需要扩容就较难处理</span></span><br><span class="line"><span class="comment">    - 数组中提供的方法非常有限，多余添加、删除、插入数据等操作，非常不便且效率不高。</span></span><br><span class="line"><span class="comment">    - 获取数组中实际元素的个数的需求，数组没有现成的属性和方法和使用</span></span><br><span class="line"><span class="comment">    - 数组存储的数据特点： 有序、可重复。对于无序和不可重复的数据的需求，无法满足</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、集合框架</span></span><br><span class="line"><span class="comment">    |---Collection接口  单列集合，用来储存一个一个的对象</span></span><br><span class="line"><span class="comment">        |---List接口   有序的可重复的数据       --&gt;动态数组</span></span><br><span class="line"><span class="comment">            |---ArrayList Linkedlist Vector</span></span><br><span class="line"><span class="comment">        |---Set接口    无序的不可重复的数据</span></span><br><span class="line"><span class="comment">            |---HashSet LinkedHashSet TreeSet</span></span><br><span class="line"><span class="comment">    |---Map接口        双列数据，使用一对一对（键值对）的数据  一个key不能对应多个value，但是一个value可以有多个key指向</span></span><br><span class="line"><span class="comment">            |---HashMap LinkedHashMap TreeMap HashTable Properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合分为Collection 和 Map（映射）</span></span><br><span class="line"><span class="comment">Collection ：单列数据  实线是继承，虚线是实现关系</span></span><br><span class="line"><span class="comment">    - list接口：有序可重复</span></span><br><span class="line"><span class="comment">    - set接口：无序  不可重复</span></span><br><span class="line"><span class="comment">Map： 双列数据  保存具有映射关系的 “key-value对” 的集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、Collection接口中的方法</span></span><br><span class="line"><span class="comment">抽象方法</span></span><br><span class="line"><span class="comment">向Collection接口的实现类的对象中添加对象obj时，需要重写equals()  contains()，remove()才能使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e)   添加元素到集合中</span></span><br><span class="line">        coll.add(<span class="string">"aa"</span>);</span><br><span class="line">        coll.add(<span class="string">"bb"</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);  <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size()     获取添加的元素的个数</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll()   将参数集合中的元素，添加到调用该方法的集合中</span></span><br><span class="line">        ArrayList coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">34</span>);</span><br><span class="line">        coll1.add(<span class="number">67</span>);</span><br><span class="line">        coll1.addAll(coll);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll1.size());</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty 判断size是否为0</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()  清空元素，但不是null</span></span><br><span class="line">        coll1.clear();</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//contains()  是否包含某个对象</span></span><br><span class="line">        System.out.println(coll.contains(<span class="number">123</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">"tom"</span>)));<span class="comment">//true,这里相当于是调用String类中的equals方法</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">"tom"</span>)));</span><br><span class="line">        <span class="comment">// 如果要判断内容，要在类中重写equals()  false--&gt;true,需要调用多此，把contains参数的对象</span></span><br><span class="line">        <span class="comment">// 调用equals()和集合中的每个对象去比较，集合中的元素作为equals的参数，直到找到为止</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsAll(Collection coll1)  判断coll1的元素是否全部在调用该方法的集合中</span></span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove() 删除 有返回值，删除成功返回true ；指定的元素不存在 就返回false</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.remove(<span class="number">123</span>));   <span class="comment">//也需要重写equals()先判断是否有元素才能删除</span></span><br><span class="line">        System.out.println(coll);  <span class="comment">//直接sout对象名 相当于调用ArrayList的toString()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//removeAll(Collection coll1)  删除和coll1重合的部分的元素  交集部分  得到的是差集</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(<span class="number">23</span>);</span><br><span class="line"><span class="comment">//      coll.removeAll(coll1);</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//coll.retainAll(Collection coll1)   求交集部分，然后把交集给了coll</span></span><br><span class="line">        coll.retainAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//equals()   判断当前集合和形参集合的元素是不是相同（是否考虑顺序要考虑集合的实例</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll1.add(LocalDateTime.now());  <span class="comment">//LocalDatetime是瞬时的。所以是两个不同的对象，不同于Date对象</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line">        System.out.println(coll.equals(coll1));  <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//如果调换add元素的顺序就会变成false 因为Arraylist是有序的 可重复的</span></span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);   <span class="comment">//就把相同的元素全部删完，即使出现了两边也是</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">        <span class="comment">//hashCode() 返回当前集合对象的hashcode</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        System.out.println(coll.hashCode());  <span class="comment">//根据元素计算出来的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//toArray()  把集合转换为数组</span></span><br><span class="line">        Object[] o = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;o.length ; i++) &#123;</span><br><span class="line">            System.out.println(o[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展： 数组也能转为集合中的list 调用 Arrays.asList();静态方法</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; list1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">        System.out.println(list1);   <span class="comment">//[[I@1fc2b765]  把整个int[] 当成一个元素了</span></span><br><span class="line"></span><br><span class="line">        List list2 = Arrays.asList( <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(list2);     <span class="comment">// [3, 5]</span></span><br><span class="line">        List&lt;Integer&gt; list3 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        System.out.println(list3);     <span class="comment">//[1, 2, 3]   使用int型的时候要注意</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator():返回Iterator接口的实例，用于遍历集合元素，后面讲</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">//        return Objects.hash(age, name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新的遍历方式"><a href="#新的遍历方式" class="headerlink" title="新的遍历方式"></a>新的遍历方式</h2><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">foreach循环 after jdk5.0  增强for循环</span></span><br><span class="line"><span class="comment">用于遍历，从集合中取第一个元素赋值给obj，再打印obj，其实内部是个迭代器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeachTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for( 集合中元素的类型 局部变量：集合对象）</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj:coll)&#123;  <span class="comment">//其实内部是个迭代器</span></span><br><span class="line">            System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;   <span class="comment">//形参的对象类型不同于集合，数组的类型的是确定的</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"mm"</span>,<span class="string">"mm"</span>,<span class="string">"mm"</span>&#125;;</span><br><span class="line">        <span class="comment">//普通for循环赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="string">"gg"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);   <span class="comment">//"gg"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for循环赋值</span></span><br><span class="line">        <span class="keyword">for</span> (String str :arr) &#123;</span><br><span class="line">            str = <span class="string">"mm"</span>;   <span class="comment">//将数组元素的地址值赋值给形参，改变的是形参，除了for循环，形参出栈，不改变原数组的元素</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);   <span class="comment">//"gg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">迭代器Iterator</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合元素的遍历，使用Iterator接口    容器：集合、数组</span></span><br><span class="line"><span class="comment">Collection接口继承了Iterator接口，所以只能用来遍历Collection，不能遍历Map</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，</span></span><br><span class="line"><span class="comment"> 那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了 Iterator接口的对象。</span></span><br><span class="line"><span class="comment"> - Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</span></span><br><span class="line"><span class="comment"> - 集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合 的第一个元素之前。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 执行原理：</span></span><br><span class="line"><span class="comment"> 指针 hasNext() 返回true 调用next()放回元素 指针下移</span></span><br><span class="line"><span class="comment"> 如果没有元素了，还调用next()会报异常 NoSuchElementException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 方法</span></span><br><span class="line"><span class="comment"> hasNext()</span></span><br><span class="line"><span class="comment"> next()</span></span><br><span class="line"><span class="comment"> remove()  删除集合中的元素，不同于集合中的remove() 是Iterator的方法</span></span><br><span class="line"><span class="comment">  如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法， 再调用remove都会报IllegalStateException。</span></span><br><span class="line"><span class="comment"> 迭代器的remove()一定要跟在next()后面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       coll.add(<span class="number">123</span>);</span><br><span class="line">       coll.add(<span class="number">123</span>);</span><br><span class="line">       coll.add(<span class="number">456</span>);</span><br><span class="line">       coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">       coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">       coll.add(LocalDateTime.now());</span><br><span class="line">       Iterator iterator = coll.iterator();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//删除集合中的指定元素</span></span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           Object obj = iterator.next();</span><br><span class="line">           <span class="keyword">if</span>(coll.contains(<span class="number">123</span>))&#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//重新new一个iterator 遍历删除后集合</span></span><br><span class="line">        Iterator iterator1 = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="number">29</span>, <span class="string">"tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line">        coll.add(LocalDateTime.now());</span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        System.out.println(iterator.hasNext());</span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt;coll.size() ; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 使用迭代器去遍历集合元素  一般写法</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一： 每次调用next() 指针会下移，会跳着输出</span></span><br><span class="line"><span class="comment">//        Iterator iterator1 = coll.iterator();</span></span><br><span class="line"><span class="comment">//        while ((iterator.next())!=null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        错误方式二： 每次调用iterator()都会生成一个新的对象，默认游标都会在第一个元素之前。所以会不停输出第一个元素</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、List"><a href="#二、List" class="headerlink" title="二、List"></a>二、List</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collection子接口之一： List接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一、List接口基本情况</span></span><br><span class="line"><span class="comment">通常用来替代数组,不用考虑角标越界</span></span><br><span class="line"><span class="comment">元素有序，且可重复，集合中每个元素都有其对应的顺序的索引，可以根据序号来存取容器中的元素</span></span><br><span class="line"><span class="comment">List接口的实现类常用的有：ArrayList LinkedList Vector</span></span><br><span class="line"><span class="comment">添加元素所在类要重写equals()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、List接口的实现类</span></span><br><span class="line"><span class="comment">|---Collection接口  单列集合，用来储存一个一个的对象</span></span><br><span class="line"><span class="comment">        |---List接口 since v1.2 有序的可重复的数据       --&gt;动态数组，替换原有的数组</span></span><br><span class="line"><span class="comment">            |---ArrayList   主要实现类   v1.2  线程不安全的，效率高，底层使用Object[]存储，数组插入要后面的要前移一位</span></span><br><span class="line"><span class="comment">            |---Linkedlist              v1.2  底层使用双向链表（通过双向地址连接）存储 对于频繁的插入、删除操作，效率比ArrayList高</span></span><br><span class="line"><span class="comment">            |---Vector      古老实现类   v1.0  线程安全的，效率低   底层使用Object[]存储 vector扩容为2倍，默认创建长度为10的数组</span></span><br><span class="line"><span class="comment">        char[]的StringBuffer（线程安全）和StringBuilder（线程不安全）也是一种容器</span></span><br><span class="line"><span class="comment">比较ArrayList Linkedlist Vector 三者的异同</span></span><br><span class="line"><span class="comment">相同：都实现了List接口 ，存储数据的特点相同（可重复、有序）</span></span><br><span class="line"><span class="comment">不同：上述点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、ArrayList源码分析</span></span><br><span class="line"><span class="comment">  1. ArrayList源码分析： jdk7.0情况下</span></span><br><span class="line"><span class="comment">    ArrayList list = new ArrayList();   //默认空参构造器，底层创建了长度是10的Object[] elementData = new Object[10];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    当添加的元素使得容量不足时，就自动进行扩容  类似于StringBuilder</span></span><br><span class="line"><span class="comment">    int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);  //扩容为原来的1.5倍，右移是除以2</span></span><br><span class="line"><span class="comment">    if (newCapacity - minCapacity &lt; 0)                   //扩容还不够，就用这个minCapacity</span></span><br><span class="line"><span class="comment">        newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)                //超过整型的情况 2的32次方</span></span><br><span class="line"><span class="comment">        newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">   // minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"><span class="comment">    elementData = Arrays.copyOf(elementData, newCapacity);   //把原来的数组的元素copy过来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    结论：在开发中如果确定容量，使用带参数的构造器  ArrayList list = new ArrayList(int capacity)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2.ArrayList jdk8.0</span></span><br><span class="line"><span class="comment">   在创建的数组的时候，初始化时候是 创建了个空的数组&#123;&#125;  //节省内存空间</span></span><br><span class="line"><span class="comment">   在add()的时候才创建长度为10的Object[],并将数据添加到elementData的位置上，后续的添加和扩容操作和JDK7.0一致</span></span><br><span class="line"><span class="comment">   3.小结：7.0中的ArrayList对象创建  类似单例模式的饿汉式，8.0类似懒汉式，节省了内存空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、Linkedlist源码分析</span></span><br><span class="line"><span class="comment">顺序表和链表是数据结构中最基本的单位</span></span><br><span class="line"><span class="comment">顺序表：适合查找 末尾添加。不用维护键值对，可以通过索引查找</span></span><br><span class="line"><span class="comment">Node类型的first和last 属性，默认值为null.</span></span><br><span class="line"><span class="comment">list.add(123)// 将123封装到Node，创建Node对象</span></span><br><span class="line"><span class="comment">内部类：Node  体现了Linkedlist双向链表的特征，不涉及扩容</span></span><br><span class="line"><span class="comment"> private static class Node&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">        E item;</span></span><br><span class="line"><span class="comment">        Node&lt;E&gt; next;</span></span><br><span class="line"><span class="comment">        Node&lt;E&gt; prev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.item = element;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">            this.prev = prev;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、List接口中的常用方法（Collection没有）</span></span><br><span class="line"><span class="comment">void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line"><span class="comment">boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="comment">Object get(int index):获取指定index位置的元素</span></span><br><span class="line"><span class="comment">int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="comment">int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="comment">Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="comment">Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line"><span class="comment">List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：常用方法</span></span><br><span class="line"><span class="comment">增 add()</span></span><br><span class="line"><span class="comment">删 Object remove(int index)</span></span><br><span class="line"><span class="comment">改 Object set(int index, Object ele)</span></span><br><span class="line"><span class="comment">查 Object get(int index)</span></span><br><span class="line"><span class="comment">插 add(int index, Object ele)</span></span><br><span class="line"><span class="comment">长度  size()</span></span><br><span class="line"><span class="comment">遍历: Iterator  foreach for</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"aa"</span>);</span><br><span class="line">        list.add(<span class="string">"bb"</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式一：iterator</span></span><br><span class="line">        Iterator iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式二：foreach</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj:list)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历  方式三：for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;list.size() ; i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"aa"</span>);</span><br><span class="line">        list.add(<span class="string">"bb"</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"tom"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void add(int index,Object ele):在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="number">343</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        List integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        list.addAll(<span class="number">1</span>, integers);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.addAll(integers);</span><br><span class="line">        System.out.println(list);   <span class="comment">//把integers作为一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(int index):获取指定index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//indexOf(Object obj):返回obj在集合中首次出现的位置,如果不存在返回-1</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">"aa"</span>));</span><br><span class="line">        <span class="comment">//lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">"aa"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(int index):移除指定index位置的元素，并返回此元素，对Collection里的remove的重载，这里是按索引删除</span></span><br><span class="line">        Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line">        list.set(<span class="number">0</span>, <span class="string">"gg"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex 位置的子集合</span></span><br><span class="line">        List subList = list.subList(<span class="number">0</span>, <span class="number">4</span>);   <span class="comment">//左闭右开</span></span><br><span class="line">        System.out.println(subList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Set"><a href="#三、Set" class="headerlink" title="三、Set"></a>三、Set</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collection子接口之二：Set接口</span></span><br><span class="line"><span class="comment">一、框架</span></span><br><span class="line"><span class="comment">|---Collection接口  单列集合，用来储存一个一个的对象   开发中用Map和List比较多，Set偏少</span></span><br><span class="line"><span class="comment">        |---Set接口    无序的，不可重复的数据</span></span><br><span class="line"><span class="comment">            |---HashSet   作为Set接口的主要实现类，线程不安全的，可以存null值，可以add(null)</span></span><br><span class="line"><span class="comment">                |---LinkedHashSet 是HashSet的子类 遍历是按照添加的顺序输出(但还是无序的）</span></span><br><span class="line"><span class="comment">            |---TreeSet 使用红黑树储存，应用了Comparable和Comparator接口。可以按照添加对象的指定属性进行排序</span></span><br><span class="line"><span class="comment">三个实现类：HashSet LinkedHashSet TreeSet</span></span><br><span class="line"><span class="comment">Set接口没有额外定义新的方法，所以使用的都是Collection中定义过的方法</span></span><br><span class="line"><span class="comment">要求：向Set中添加数据，其所在的类一定要重写equals() hashCode() 以实现对象相等规则，</span></span><br><span class="line"><span class="comment">      重写的equals()和 hashCode() 尽可能保持一致性 --&gt; 相等的对象必须具有相等的散列码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、无序、不可重复</span></span><br><span class="line"><span class="comment">Set存储无序不可重复的数据(以HashSet为例）</span></span><br><span class="line"><span class="comment">1.无序性：不等于随机性，每次遍历都是输出相同的结果，不是按照索引的顺序添加元素，而是根据添加元素的Hash值来加入数组</span></span><br><span class="line"><span class="comment">2.不可重复性:保证添加的元素按照equals判断时，不能返回true。即相同的元素只能添加一个。</span></span><br><span class="line"><span class="comment">可以过滤重复数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、添加元素的过程：以HashSet为例</span></span><br><span class="line"><span class="comment">实际上是new了个HashMap</span></span><br><span class="line"><span class="comment">底层是一个数组+链表的结构，初始容量为16，如果使用率超过0.75 即16*0.75=12   16位就会扩容为原来的两倍32 64 128...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要添加元素a，调用a所在类的HashCode(),计算元素a hash值，此哈希值通过散列函数，得出a在底层数组中的存放位置（即索引位置），</span></span><br><span class="line"><span class="comment">    判断此位置上是否已经有元素：</span></span><br><span class="line"><span class="comment">    如果此位置没有其他元素，则此元素添加成功   ---&gt;情况1</span></span><br><span class="line"><span class="comment">    如果此位置已经有其他元素b，或者以链表形式存储的多个元素（数组的位置一样，但hash值不一定一样）</span></span><br><span class="line"><span class="comment">        比较a,b的hash值：</span></span><br><span class="line"><span class="comment">        如果hash值不一样，则添加成功，         ---&gt;情况2</span></span><br><span class="line"><span class="comment">        如果两个元素的hash值一样，就调用元素a所在类的equals(b)，  //equals()和hashCode()方法必须一致</span></span><br><span class="line"><span class="comment">                    返回值是true则添加失败</span></span><br><span class="line"><span class="comment">                    返回值是false则添加成功，仍然以链表存放  ---&gt;情况3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       对于添加成功的情况2和情况3，元素a与已经存在的于指定索引位置的数据以链表的形式储存</span></span><br><span class="line"><span class="comment">        JDK7.0： 元素a放到数组中，指向原来的元素</span></span><br><span class="line"><span class="comment">        JDK8.0： 原来的元素放在数组，元素a放在链表的最下面</span></span><br><span class="line"><span class="comment">        7上8下</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//为什么如果要添加的元素所在的位置没有元素就添加成功了？</span></span><br><span class="line"><span class="comment">如果是调用Object类的hashcode，生成的是一个随机数，</span></span><br><span class="line"><span class="comment">就会导致两个user对象的hashcode肯定不一样，算出了的索引位置也不同，所以都没有调用equals方法。</span></span><br><span class="line"><span class="comment">我的理解是，通过类重写的hashcode算出来的更能反映是不是内容相同的对象</span></span><br><span class="line"><span class="comment">String重写的hashcode() 能搞保证两个相同的字符串的哈希值是相同的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">name.hashCode()*31+age</span></span><br><span class="line"><span class="comment">31:质数、较大、5bits溢出概率小 ，i*31可以用 （i&lt;&lt;5）-1来计算</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、LinkedHashSet: 是HashSet的子类，底层用了双向链表，相当于在原有的HashSet的基础上，每个数据还维护了两个引用，</span></span><br><span class="line"><span class="comment">    // 记录此数据前后的数据，一个双向链表的结构，记录了添加顺序的先后，对于频繁的遍历操作，效率更加高一些</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、TreeSet</span></span><br><span class="line"><span class="comment">    TreeSet是用来排序，需要有相同的属性。所以向TreeSet中添加的对象必须是相同类的</span></span><br><span class="line"><span class="comment">    TreeSet的添加的元素所在类还需要重写compareTo()</span></span><br><span class="line"><span class="comment">    两种排序方式 自然排序和定制排序  比较器</span></span><br><span class="line"><span class="comment">    TreeSet是按照添加元素所在类的compareTo()来做为不可重复的标准的</span></span><br><span class="line"><span class="comment">    自然排序中比较两个对象的是否相同的标准为compareTo()，只要返回0，就认为是相同的，不是equals()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">"BB"</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">12</span>));</span><br><span class="line">        <span class="comment">//两个user，因为在user类中没有重写equals类，不可重复就是调用了equals()实现的</span></span><br><span class="line">        <span class="comment">//没有调用equals()，如果没在类中重写HashCode，只有重写了HashCode才调用equals</span></span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());  <span class="comment">//遍历的时候和添加的顺序不同，</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedHashSet: 是HashSet的子类，底层用了双向链表，相当于在原有的HashSet的基础上，每个数据还维护了两个引用，</span></span><br><span class="line">    <span class="comment">// 记录此数据前后的数据，一个双向链表的结构，记录了添加顺序的先后，对于频繁的遍历操作，效率更加高一些</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashSet set1 = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set1.add(<span class="string">"aaa"</span>);</span><br><span class="line">        set1.add(<span class="string">"bbb"</span>);</span><br><span class="line">        set1.add(<span class="number">123</span>);</span><br><span class="line">        set1.add(<span class="string">"BB"</span>);</span><br><span class="line">        set1.add(<span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">"tom"</span>));</span><br><span class="line">        set1.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator1 = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator1.next());  <span class="comment">//遍历的时候和添加的顺序相同，</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    TreeSet是用来排序，需要有相同的属性。所以向TreeSet中添加的对象必须是相同类的</span></span><br><span class="line"><span class="comment">//    两种排序方式 自然排序和定制排序  比较器</span></span><br><span class="line"><span class="comment">//    TreeSet是按照添加元素所在类的CompareTo()来做为不可重复的标准的</span></span><br><span class="line"><span class="comment">//    自然排序中比较两个对象的是否相同的标准为CompareTo()，只要返回0，就认为是相同的，不是equals()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        TreeSet set = new TreeSet();</span></span><br><span class="line"><span class="comment">//        set.add(1312);</span></span><br><span class="line"><span class="comment">//        set.add(432);</span></span><br><span class="line"><span class="comment">//        set.add(4324);</span></span><br><span class="line"><span class="comment">//        set.add(-231);</span></span><br><span class="line"><span class="comment">//        set.add(-31);</span></span><br><span class="line"><span class="comment">//        Iterator iterator = set.iterator();</span></span><br><span class="line"><span class="comment">//        while (iterator.hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());   //遍历时是按照从小到大的顺序排序的</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">33</span>));  <span class="comment">//如果只写了一级排序，只能添加一个</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jacz"</span>, <span class="number">29</span>));  <span class="comment">//大写的排前面</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"uit"</span>, <span class="number">10</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());   <span class="comment">//遍历时是按照从小到大的顺序排序的</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> Comparator() &#123;   <span class="comment">//匿名实现类，创建一个对象，传入TreeSet的构造器</span></span><br><span class="line">            <span class="comment">//按照年龄从小到大的排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">                    User u1 = (User) o1;</span><br><span class="line">                    User u2 = (User) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.age, u2.age);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据不一致"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"tom"</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">23</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">33</span>));  <span class="comment">//如果只写了一级排序，只能添加一个</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jacz"</span>, <span class="number">29</span>));  <span class="comment">//大写的排前面</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"uit"</span>, <span class="number">10</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"oiur"</span>, <span class="number">40</span>)); <span class="comment">//comparator只有一级排序，所以后面的元素就会被舍弃</span></span><br><span class="line">        <span class="comment">//set.add(123);  //"输入数据不一致"</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从小到大，年龄从小到大</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User u = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare =  <span class="keyword">this</span>.name.compareTo(((User) o).name); <span class="comment">//从大到小就加个负号</span></span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age, u.age);  <span class="comment">//integer的compare() 默认也是从小到大的</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Map"><a href="#四、Map" class="headerlink" title="四、Map"></a>四、Map</h1><h2 id="HashMap-amp-LindedHashMap"><a href="#HashMap-amp-LindedHashMap" class="headerlink" title="HashMap &amp; LindedHashMap"></a>HashMap &amp; LindedHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、Map接口的结构</span></span><br><span class="line"><span class="comment">|---Map接口 since1.2  双列数据，使用一对一对（键值对）的数据  一个key不能对应多个value，但是一个value可以有多个key指向</span></span><br><span class="line"><span class="comment">            |---HashMap            作为主要的实现类 since1.2 线程不安全的，效率高，可以储存的null的key和value</span></span><br><span class="line"><span class="comment">                |---LinkedHashMap   since1.4 保证遍历Map元素时，可以按添加顺序遍历，在原基础上添加了一对引用指向前后元素，</span></span><br><span class="line"><span class="comment">                                    对于频繁的遍历操作，效率要比HashMap更高</span></span><br><span class="line"><span class="comment">            |---HashTable          作为古老的实现类 since1.0 线程安全的，效率低，不能存储null的key和value</span></span><br><span class="line"><span class="comment">                |---Properties      常用来处理配置文件。key和value都是String类型的</span></span><br><span class="line"><span class="comment">            |---SortedMap接口</span></span><br><span class="line"><span class="comment">                |---TreeMap        since1.2 按照添加的key-value对进行排序，实现排序排序，按照key来自然排序或者定制排序</span></span><br><span class="line"><span class="comment">                                    底层使用的是红黑树</span></span><br><span class="line"><span class="comment">            HashMap底层： 数组+链表       jdk7.0</span></span><br><span class="line"><span class="comment">                         数组+链表+红黑树 jdk8.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">问题：</span></span><br><span class="line"><span class="comment">1.HashMap的底层实现原理</span></span><br><span class="line"><span class="comment">2.HashMap和HashTable的区别</span></span><br><span class="line"><span class="comment">3.ConcurrentHashMap 与 HashMap的区别  分段锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、Map结构的理解 以HashMap为例</span></span><br><span class="line"><span class="comment">Key是无序、不可重复的（KeySet,使用Set存储）  --&gt;key所在的类要重写equals() hashCode()</span></span><br><span class="line"><span class="comment">Value可以重复，无序的（Collection储存）    --&gt;values所在的类要重写equals()</span></span><br><span class="line"><span class="comment">往Map里放的实际上是一个个的Entry，把key-value对作为两个属性装入Entry（无序不可重复），用set来储存</span></span><br><span class="line"><span class="comment">对比数学中的函数，x类似于key；f(x)类似于value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、HashMap的底层实现原理  以JDk7.0为例</span></span><br><span class="line"><span class="comment">  HashMap map = new HashMap()</span></span><br><span class="line"><span class="comment">  在实例化后，底层创建了长度为16的一位数组Entry[] table;</span></span><br><span class="line"><span class="comment">  ...可能已经执行过多次put了...</span></span><br><span class="line"><span class="comment">  map.put(key1,value1);</span></span><br><span class="line"><span class="comment">  首先，调用key1所在类的hashCode计算key1哈希值，此哈希值经过某种算法后，得到在table中的存放位置</span></span><br><span class="line"><span class="comment">  如果此位置上的数据为空，此时的key1-value1(entry1)添加成功      ----情况1</span></span><br><span class="line"><span class="comment">  如过此位置上的数据不为空，意味着此位置上存在一个或多个数据（以链表存在），比较key1和已经存在的一个</span></span><br><span class="line"><span class="comment">  或多个的数据的哈希值：</span></span><br><span class="line"><span class="comment">        如果key1的哈希值与已经存在的数据都不相同，此时key1-value1添加成功      ----情况2</span></span><br><span class="line"><span class="comment">        如果key1的哈希值与已经存在的某一个数据（key2-value2）的哈希值相同，继续比较：调用key1所在类的equals(key2)</span></span><br><span class="line"><span class="comment">            如果反正false，此时key1-value1添加成功               ----情况1</span></span><br><span class="line"><span class="comment">            如果返回true,使用value1替换value2，如果key</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      情况2和情况3：key1-value1以链表的方式存储</span></span><br><span class="line"><span class="comment">      在不断的添加过程中，会涉及到扩容问题。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      jdk8相较于jdk7在底层实现的不同</span></span><br><span class="line"><span class="comment">      1.new HashMap(): 底层没有创建一个长度为16的数组</span></span><br><span class="line"><span class="comment">      2.jdk8底层的数据是：Node[]  而非entry[]</span></span><br><span class="line"><span class="comment">      3.首次使用put()才会创建</span></span><br><span class="line"><span class="comment">      4.jdk8变成了数组+链表+红黑树，新增了红黑树的结构</span></span><br><span class="line"><span class="comment">        当数组的某一个索引位置上的元素以链表形式存在的数据个数&gt;8,且当前数组的长度&gt;64时，MIN_TREEIFY_CAPACITY=64，如果</span></span><br><span class="line"><span class="comment">        数组长度不大于64，就不改红黑树，而是直接去扩容。</span></span><br><span class="line"><span class="comment">        此索引位置上的所有数据改为使用红黑树存储。 查找的时候遍历链表没有遍历红黑树的效率高</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    在创建hashMap的时候去指定长度，会创建一个最接近且大于该数的2的n次方的容量的数组</span></span><br><span class="line"><span class="comment">    loadFactor 负载因子，0.75  兼顾数组的利用率和更少的链表结构</span></span><br><span class="line"><span class="comment">    threshold  = capacity*loadFactor</span></span><br><span class="line"><span class="comment">    DEFAULT_INITIAL_CAPACITY = 16</span></span><br><span class="line"><span class="comment">    DEFAULT_LOAD_FACTOR = 0.75</span></span><br><span class="line"><span class="comment">    TREEIFY_THRESHOLD = 8</span></span><br><span class="line"><span class="comment">    MIN_TREEIFY_CAPACITY=64</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    因为存在哈希碰撞，虽然数组的位置只有12位，但是可能元素已经不止12个了，而且可能数组永远也放不满，为了减少链表结构的存在</span></span><br><span class="line"><span class="comment">    就要早一点进行扩容的操作。</span></span><br><span class="line"><span class="comment">    扩容的条件（大于threshold且，要添加元素的索引位置非空）</span></span><br><span class="line"><span class="comment">    如果索引位置一样，先看是否是null，不是null先比hash值，hash值和链表中都不一样，就添加（在数组或者链表里）。</span></span><br><span class="line"><span class="comment">    如果hash值一样先判断key是不是==或者equals，如果hash值且key都相同，就把旧的value给覆盖了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    hashCode()再作为hash()的参数</span></span><br><span class="line"><span class="comment">    单向链表 只有next，如果索引位置原来null，next就指向null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    JDK8.0的源码实现的区别</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、LinkedHashMap的底层实现原理</span></span><br><span class="line"><span class="comment">是HashMap的子类，用了HashMap的put()，但是重写了newNode(),LinkedHashMap的内部类Entry在继承父类的Node类时，</span></span><br><span class="line"><span class="comment">又多了一个before after的属性，去记录添加时的前后元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">源码：</span></span><br><span class="line"><span class="comment">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment">        Entry&lt;K,V&gt; before, after;                        //记录添加的元素的前后的元素</span></span><br><span class="line"><span class="comment">        Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            super(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashSet其实就是通过new HashMap() 实现的，set的元素就相当于map里的key，所有的key都指向一个value是一个Object对象，没有实际意义。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">五、Map中定义的方法</span></span><br><span class="line"><span class="comment">添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">增   put</span></span><br><span class="line"><span class="comment">删   remove</span></span><br><span class="line"><span class="comment">改  put</span></span><br><span class="line"><span class="comment">查  get</span></span><br><span class="line"><span class="comment">长度  size</span></span><br><span class="line"><span class="comment">遍历  keySet  values entrySet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  元素的增删改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Object put()  put成功返回null，put重复的key 返回的是key旧的value 相当于map.get(key)</span></span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">123</span>);  <span class="comment">//开发中key和value的类型一般是确定的</span></span><br><span class="line">        map.put(<span class="string">"bb"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(map.put(<span class="string">"gg"</span>,<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">1543</span>);</span><br><span class="line">        System.out.println(map);  <span class="comment">//key相同的时候执行的是修改操作</span></span><br><span class="line"></span><br><span class="line">        HashMap map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"gg"</span>, <span class="number">234</span>);</span><br><span class="line">        map1.put(<span class="string">"bb"</span>, <span class="number">434</span>);</span><br><span class="line">        map1.put(<span class="string">"xx"</span>, <span class="number">134</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void putAll()</span></span><br><span class="line">        <span class="comment">//没有key就添加，有就修改</span></span><br><span class="line">        map.putAll(map1);     <span class="comment">//也是替换</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove(key)   //返回移除的key对应的value,不存在就放回null</span></span><br><span class="line">        Object gg = map.remove(<span class="string">"gg"</span>);</span><br><span class="line">        System.out.println(gg);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void clear()</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map.size());     <span class="comment">//0  不是null</span></span><br><span class="line">        System.out.println(map);            <span class="comment">//&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  元素的查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aa"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"bb"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">124</span>);</span><br><span class="line">        map.put(<span class="string">"dd"</span>,<span class="number">553</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(Object key)：获取指定key对应的value,不存在返回null</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"aa"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">"aa"</span>));  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="number">123</span>)); <span class="comment">//只找一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：返回map中key-value对的个数</span></span><br><span class="line">        map.size();</span><br><span class="line">        <span class="comment">// boolean isEmpty()：判断当前map是否为空,判断的是size是不是为0</span></span><br><span class="line">        map.isEmpty();</span><br><span class="line">        <span class="comment">//boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line">        <span class="comment">//得是两个map 且内容都一样 才是true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//元视图操作的方法： 用来遍历的方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"aaqwe"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"zz"</span>,<span class="number">4143124</span>);</span><br><span class="line">        map.put(<span class="string">"gg"</span>,<span class="number">124</span>);</span><br><span class="line">        map.put(<span class="string">"dd"</span>,<span class="number">553</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">     <span class="comment">// Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Collection values()：返回所有value构成的Collection集合，是和key的遍历的顺序是一样的</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        Iterator iterator1 = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line">        Set set1 = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        Iterator iterator2 = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext())&#123;</span><br><span class="line">            Object obj = iterator2.next();  <span class="comment">//都是entry对象</span></span><br><span class="line">            Map.Entry entry = (Map.Entry)obj;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">"---"</span>+entry.getValue());  <span class="comment">//可以调用entry的方法</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator iterator5 = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator5.hasNext())&#123;</span><br><span class="line">            Object next = iterator5.next();</span><br><span class="line">            System.out.println(next+<span class="string">"==="</span>+map.get(next));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：</span></span><br><span class="line">        Iterator iterator3 = set.iterator();</span><br><span class="line">        Iterator iterator4 = values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()&amp;&amp;iterator4.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator3.next()+<span class="string">"@@@@"</span>+iterator4.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> Hashtable();</span><br><span class="line">       <span class="comment">// map1.put(null, 123);  //java.lang.NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeMap</span></span><br><span class="line"><span class="comment">//向TreeMap 添加key-value时，key要有同一个类的对象创建</span></span><br><span class="line"><span class="comment">//因为要根据key来排序  自然排序、定制排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap treeMap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"dat"</span>, <span class="number">34</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"ewq"</span>, <span class="number">42</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"jerrt"</span>, <span class="number">42</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"azure"</span>, <span class="number">88</span>);</span><br><span class="line">        treeMap.put(u1, <span class="number">100</span>);</span><br><span class="line">        treeMap.put(u2, <span class="number">56</span>);</span><br><span class="line">        treeMap.put(u3, <span class="number">89</span>);</span><br><span class="line">        treeMap.put(u4, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="comment">//只能根据key的属性去排序，不能用value排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator comparator = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">if</span>(u1.age != u2.age)&#123;</span><br><span class="line">                        <span class="keyword">return</span> Integer.compare(u1.age, u2.age);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> -u1.name.compareTo(u2.name);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"类型错误"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeMap treeMap = <span class="keyword">new</span> TreeMap(comparator);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"dat"</span>, <span class="number">34</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"ewq"</span>, <span class="number">42</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"jerrt"</span>, <span class="number">42</span>);</span><br><span class="line">        User u5 = <span class="keyword">new</span> User(<span class="string">"hash"</span>, <span class="number">42</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"azure"</span>, <span class="number">88</span>);</span><br><span class="line">        treeMap.put(u1, <span class="number">100</span>);</span><br><span class="line">        treeMap.put(u2, <span class="number">56</span>);</span><br><span class="line">        treeMap.put(u3, <span class="number">89</span>);</span><br><span class="line">        treeMap.put(u4, <span class="number">30</span>);</span><br><span class="line">        treeMap.put(u5, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        Set set = treeMap.entrySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"equals"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从小到大，年龄从小到大</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User u = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare =  <span class="keyword">this</span>.name.compareTo(((User) o).name); <span class="comment">//从大到小就加个负号</span></span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age, u.age);  <span class="comment">//integer的compare() 默认也是从小到大的</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Properties:HashTable的子类</span></span><br><span class="line"><span class="comment">处理配置文件，key value都是string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">        pros.load(fis);  <span class="comment">//加载流对应的文件</span></span><br><span class="line">        String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name+password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Collections工具类"><a href="#五、Collections工具类" class="headerlink" title="五、Collections工具类"></a>五、Collections工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Collections工具类</span></span><br><span class="line"><span class="comment">可以操作List Set Map的实现类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">问题：Collection和Collections的区别</span></span><br><span class="line"><span class="comment">一个是接口，一个是工具类。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Colletions</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作， 还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">排序操作：（均为static方法）</span></span><br><span class="line"><span class="comment">reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line"><span class="comment">shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line"><span class="comment">sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"><span class="comment">swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">查找、替换</span></span><br><span class="line"><span class="comment">Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object min(Collection)</span></span><br><span class="line"><span class="comment">Object min(Collection，Comparator)</span></span><br><span class="line"><span class="comment">int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="comment">void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"><span class="comment">boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">线程安全</span></span><br><span class="line"><span class="comment">synchronizedXxx()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//排序操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">47</span>);</span><br><span class="line">    list.add(-<span class="number">13</span>);</span><br><span class="line">    list.add(<span class="number">54</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">    Collections.sort(list);   <span class="comment">//按照Integer的compare()排序</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//void swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line">    Collections.swap(list, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">47</span>);</span><br><span class="line">    list.add(<span class="number">123</span>);</span><br><span class="line">    list.add(<span class="number">54</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line">    list.add(<span class="number">231</span>);</span><br><span class="line"><span class="comment">//    查找、替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素，排序中最右边的就是最大的 要求是同一个类的元素</span></span><br><span class="line">    Comparable max = Collections.max(list);</span><br><span class="line">    System.out.println(max);</span><br><span class="line"><span class="comment">//    Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">//    Object min(Collection)</span></span><br><span class="line"><span class="comment">//    Object min(Collection，Comparator)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">    <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">231</span>);</span><br><span class="line">    System.out.println(frequency);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制</span></span><br><span class="line"><span class="comment">//    void copy(List dest,List src)：将src中的内容复制到dest中  src是source，dest是新的list</span></span><br><span class="line">    <span class="comment">//正确写法</span></span><br><span class="line">    List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);  <span class="comment">//数组转成list</span></span><br><span class="line">    Collections.copy(dest, list);</span><br><span class="line">    System.out.println(dest);</span><br><span class="line"><span class="comment">//    Collections.copy(list1, list);  //要求dest.size()和source.size()要相同 这种写法会报异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; list1 = Collections.synchronizedList(list);  <span class="comment">//返回的list就是线程安全的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：集合
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-多线程</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-multithread.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-multithread.html</id>
    <published>2020-06-25T12:24:46.000Z</published>
    <updated>2020-06-30T01:07:39.710Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/25/aVB97SkPCuYIWpy.png" alt="多线程"></p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多线程</span></span><br><span class="line"><span class="comment">1.程序、进程、线程</span></span><br><span class="line"><span class="comment">程序program是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">进程process程序的一次执行过程，正在运行的一个程序，作为资源分配的单位。有产生存在和消亡的过程-生命周期，</span></span><br><span class="line"><span class="comment">系统在运行时会为每个进程分配不同的内存区域。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">线程thread  进程进一步细化为线程，程序内部的一条执行路径。作为调度和执行的单位，每个线程拥有独立的运行栈</span></span><br><span class="line"><span class="comment">和程序计数器pc，但是共享堆和方法区。进程间的通信更加简便高效。所以就有线程安全的问题。</span></span><br><span class="line"><span class="comment">一个java至少有三个线程  main()主线程 gc()垃圾回收线程 异常处理线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">单核和多核CPU  服务器都是多核的</span></span><br><span class="line"><span class="comment">并行和并发 多个CPU同时执行多个任务/一个CPU(时间片)同时执行多个任务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多线程的优点</span></span><br><span class="line"><span class="comment">场景：需要同时执行两个或多个任务</span></span><br><span class="line"><span class="comment">程序需要实现一些需要等待的任务。如用户输入 文件读写操作 网络操作 搜索</span></span><br><span class="line"><span class="comment">需要一些后台运行的程序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">守护线程/用户线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-lifecycle"><a href="#thread-lifecycle" class="headerlink" title="thread lifecycle"></a>thread lifecycle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的生命周期</span></span><br><span class="line"><span class="comment">新建: new了对象</span></span><br><span class="line"><span class="comment">就绪：调用start()  等待cpu分配资源</span></span><br><span class="line"><span class="comment">运行：cpu切换线程，又会失去执行权，或者调用yield(),不同于阻塞</span></span><br><span class="line"><span class="comment">阻塞：join()  sleep(long millis) 等待同步锁 wait() suspend()(deprecated,会导致死锁)</span></span><br><span class="line"><span class="comment">     sleep()时间到，join()的线程结束，获取同步锁，notify() notifyAll() resume()(搭配suspend,deprecated）  回到就    绪，再等待CPU分配执行权</span></span><br><span class="line"><span class="comment">死亡：执行完run()   stop()  出现error/exception且没处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-scheduling-amp-priority"><a href="#thread-scheduling-amp-priority" class="headerlink" title="thread scheduling &amp;priority"></a>thread scheduling &amp;priority</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的调度</span></span><br><span class="line"><span class="comment">同优先级线程组成先进先出队列，使用时间片策略</span></span><br><span class="line"><span class="comment">高优先级的，使用优先调度的抢占式策略</span></span><br><span class="line"><span class="comment">但只是从概率上来说，高优先级的线程会被先执行，并不意味着一定先执行高优先级的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">优先级等级</span></span><br><span class="line"><span class="comment">可以设置10档</span></span><br><span class="line"><span class="comment">MAX_PRIORITY:10</span></span><br><span class="line"><span class="comment">MIN_PRIORITY:1</span></span><br><span class="line"><span class="comment">NORM_PRIORITY:5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">涉及的方法：获取和设置</span></span><br><span class="line"><span class="comment">getPriority()</span></span><br><span class="line"><span class="comment">setPriority(int newPriority)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadScheduling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread3 t = <span class="keyword">new</span> MyThread3();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">                Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName()+<span class="string">":"</span>+i);</span><br><span class="line">                setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thread类常见方法"><a href="#Thread类常见方法" class="headerlink" title="Thread类常见方法"></a>Thread类常见方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread类的常用方法</span></span><br><span class="line"><span class="comment">1.start()：启动当前线程 调用当前线程的run()</span></span><br><span class="line"><span class="comment">2.run()：通常需要重写此方法，在创建的线程中需要执行的代码</span></span><br><span class="line"><span class="comment">3.currentThread()：静态方法 返回当前代码执行的线程</span></span><br><span class="line"><span class="comment">4.getName(): 获取当前线程的名字</span></span><br><span class="line"><span class="comment">5.setName(): 设置当前线程的名字  构造器，通过currentThread()或者new对象调用setName()</span></span><br><span class="line"><span class="comment">6.yield(): 释放当前CPU的执行权，但是也可能被CPU继续分配  线程让步</span></span><br><span class="line"><span class="comment">7.join(): 在线程A中调用另外一个线程的join(),线程A进入阻塞状态。等另一个线程执行完了，线程A结束阻塞，再执行A线程</span></span><br><span class="line"><span class="comment">8.stop()：强制结束线程生命期 不推荐使用   //deprecated</span></span><br><span class="line"><span class="comment">9.sleep(long millis): 阻塞millis毫秒  静态方法，可以直接调用。让当前线程睡眠指定的millis毫秒</span></span><br><span class="line"><span class="comment">10.isAlive(): 判断线程是否存活</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread1 t1 = <span class="keyword">new</span> MyThread1(<span class="string">"进程一"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"main线程"</span>);   <span class="comment">//静态方法 currentThread返回当前的Thread</span></span><br><span class="line">        System.out.println(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        System.out.println(t1.getName());</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t1.isAlive());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if(i == 20)&#123;</span></span><br><span class="line"><span class="comment">//                this.yield(); //释放内存的执行权</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(isAlive());</span><br><span class="line">        <span class="comment">//Thread.currentThread().setName("线程1");//可以设置线程的名字</span></span><br><span class="line">        <span class="comment">// System.out.println(Thread.currentThread().getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(String name)</span></span>&#123;  <span class="comment">//通过构造器来给thread命名</span></span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="二、创建多线程"><a href="#二、创建多线程" class="headerlink" title="二、创建多线程"></a>二、创建多线程</h2><h3 id="BEFOR-JDK5-0"><a href="#BEFOR-JDK5-0" class="headerlink" title="BEFOR JDK5.0"></a>BEFOR JDK5.0</h3><h4 id="1-extends-Thread"><a href="#1-extends-Thread" class="headerlink" title="1. extends Thread"></a>1. extends Thread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.landfill.java;</span><br><span class="line">&#x2F;*</span><br><span class="line">多线程的创建</span><br><span class="line">方式一：继承于Thread类</span><br><span class="line">1.创建一个继承于Thread类的子类</span><br><span class="line">2.重写Thread类的run() 将此线程执行的操作声明在run()中</span><br><span class="line">3.创建子类的对象</span><br><span class="line">4.通过此对象调用start()</span><br><span class="line">&#x2F;&#x2F;注意：</span><br><span class="line">start启动了线程并且去调用run(),不能使用对象直接调用run()</span><br><span class="line">不能再start()来创建一个线程，需要重新创建一个对象。</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ThreadTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyThread t1 &#x3D; new MyThread(); &#x2F;&#x2F;3.创建子类的对象</span><br><span class="line">        t1.start();         &#x2F;&#x2F;4.通过此对象调用start()  作用：①启动当前线程，②调用当前线程的run方法</span><br><span class="line">       &#x2F;&#x2F; t1.run(); 无法启动线程，仍然是在主线程的中进行的。</span><br><span class="line">       &#x2F;&#x2F;以下操作仍然是在main线程执行的</span><br><span class="line">        for(int i &#x3D; 0;i&lt;100;i++)&#123;</span><br><span class="line">            if(i%2!&#x3D;0)&#123;</span><br><span class="line">                System.out.println(&quot;hello------------------------------&quot;);</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;通过再 new一个线程的对象来调用start</span><br><span class="line">        MyThread t2 &#x3D; new MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class MyThread  extends Thread&#123; &#x2F;&#x2F;1.创建一个继承于Thread类的子类</span><br><span class="line">    @Override               &#x2F;&#x2F;2.重写Thread类的run() 将此线程执行的操作声明在run()中</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i &#x3D; 0;i&lt;100;i++)&#123;</span><br><span class="line">            if(i%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-implements-Runnable"><a href="#2-implements-Runnable" class="headerlink" title="2. implements Runnable"></a>2. implements Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread的创建方式二：实现runnable接口</span></span><br><span class="line"><span class="comment">1.创建Runnable接口的实现类</span></span><br><span class="line"><span class="comment">2.实现类去实现抽象方法 run();</span></span><br><span class="line"><span class="comment">3.创建实现类的对象</span></span><br><span class="line"><span class="comment">4.将此对象作为参数传到Thread类的构造器，创建Thread类的对象</span></span><br><span class="line"><span class="comment">5.Thread类 调用start()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">两种方法都得使用Thread类的start()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较两种方式：  继承Thread类 vs 实现Runnable</span></span><br><span class="line"><span class="comment">1.继承Thread类，存在单继承的限制，如果已经有其他声明的父类，则不能使用了</span></span><br><span class="line"><span class="comment">2.实现Runnable 可以只创建一个对象，把共享数据封装到实现类里，多个线程共享数据,还可以实现多个接口，没有单继承的限制</span></span><br><span class="line"><span class="comment">所以开发中一般优先用实现Runnable接口,而且从源码可以看到 Thread类实际上就是实现了Runnable接口,何必多绕一步？</span></span><br><span class="line"><span class="comment">两种方式都要重写run() 将线程要执行的代码放入方法体。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread4 target = <span class="keyword">new</span> MyThread4();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">//调用当前线程的run()--&gt;调用了Runnable类型的target的run(),其中target就是传入的参数，</span></span><br><span class="line">        <span class="comment">// 所以也就是调用了实现类重写的run()</span></span><br><span class="line">        <span class="comment">//new Thread(t4).start()</span></span><br><span class="line">        <span class="comment">//再启动一个线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target);<span class="comment">//可以共用同一个实现类的对象，反正run()是一样的</span></span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);<span class="comment">//不能直接getName了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sad"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>difference between extends Thread&amp;implements Runnable</strong></p><h3 id="AFTER-JDK5-0"><a href="#AFTER-JDK5-0" class="headerlink" title="AFTER JDK5.0"></a>AFTER JDK5.0</h3><h4 id="3-implements-Callable"><a href="#3-implements-Callable" class="headerlink" title="3. implements Callable"></a>3. implements Callable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建线程的方式三：实现Callable接口   ARTER JKD5.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Callable接口创建线程比Runnable更强</span></span><br><span class="line"><span class="comment">可以有返回值</span></span><br><span class="line"><span class="comment">可以抛出异常，可以被外面的操作捕获，获取异常的信息</span></span><br><span class="line"><span class="comment">支持泛型的返回值</span></span><br><span class="line"><span class="comment">需要借助FutureTask类，比如获取返回结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">//1.实现Callable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，写入此线程要执行的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">101</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line"></span><br><span class="line">                sum+= i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable实现类的对象</span></span><br><span class="line">        NumThread t = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将Callable实现类的对象作为参数传入，创建 FutureTask对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(t);</span><br><span class="line">        <span class="comment">//5.将FutureTask对象传入，创建Thread对象，调用Start方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();   <span class="comment">//FutureTask类同时实现了Callable和Runnable，</span></span><br><span class="line">        <span class="comment">// 这里new Thread要求的返回值的形参是Runnable类型的，所以用FutureTask</span></span><br><span class="line">        <span class="comment">//6.如果需要返回值，通过FutureTask调用get()获得 实现的call()返回的对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()返回值。如果不需要返回值</span></span><br><span class="line">            <span class="comment">//可以不写下面的方法</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为"</span>+sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="4-Thread-Pool"><a href="#4-Thread-Pool" class="headerlink" title="4. Thread Pool"></a>4. Thread Pool</h4><p>​            ExecutorSercice API相关功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建线程的方式四：线程池  AFTER JDK5.0</span></span><br><span class="line"><span class="comment">开发中都是用线程池，手动的造线程效率差，和后面的数据库连接池是一个道理,很多时候是用框架实现的，不一定是手写的</span></span><br><span class="line"><span class="comment">1.问题：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</span></span><br><span class="line"><span class="comment">2.思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。</span></span><br><span class="line"><span class="comment">3.好处：</span></span><br><span class="line"><span class="comment">    3.1 提高响应的速度：减少了创建线程的时间</span></span><br><span class="line"><span class="comment">    3.2 降低资源的消耗：重复利用线程池中线程  不需要每次都创建</span></span><br><span class="line"><span class="comment">    3.3 便于线程的管理</span></span><br><span class="line"><span class="comment">        - corePoolSize:核心池的大小</span></span><br><span class="line"><span class="comment">        - maximumPoolSize：最大线程数</span></span><br><span class="line"><span class="comment">        - keepAliveTime:线程没有任务时最多保持多长时间后会终止</span></span><br><span class="line"><span class="comment">创建多线程有几种方式：四种 继承Thread  实现Runnable 实现Callable  创建线程池。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number1Thread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">                sum +=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建指定数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ExecutorService是接口，Executors是该接口的工具类，工厂类</span></span><br><span class="line">        ThreadPoolExecutor service1  = (ThreadPoolExecutor) service;  <span class="comment">//返回的实际是ThreadPoolExecutor的对象，可以向下转型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line">        System.out.println(service.getClass());</span><br><span class="line">        service1.setCorePoolSize(<span class="number">12</span>);<span class="comment">//就可以调用相关的方法去设置线程池的属性，管理线程</span></span><br><span class="line">       <span class="comment">// service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.传入相应的对象，执行指定线程的操作</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());   <span class="comment">//适合用Runnable</span></span><br><span class="line"><span class="comment">//        Number1Thread number1Thread = new Number1Thread();</span></span><br><span class="line"><span class="comment">//        FutureTask futureTask = new FutureTask(number1Thread);  // FutureTask来获取返回值</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Object sum = futureTask.get();</span></span><br><span class="line"><span class="comment">//            System.out.println("总和为"+sum);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ExecutionException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        service.submit(number1Thread);  //适合用Callable，</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、线程安全"><a href="#三、线程安全" class="headerlink" title="三、线程安全"></a>三、线程安全</h2><h3 id="sychronized"><a href="#sychronized" class="headerlink" title="sychronized"></a>sychronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的同步</span></span><br><span class="line"><span class="comment">1.线程安全问题：重票和错票</span></span><br><span class="line"><span class="comment">2.出现原因：当某个线程操作车票的过程中，尚未完成操作，其他线程就进来了，也操作车票</span></span><br><span class="line"><span class="comment">3.解决方法：当一个线程A操作共享数据时，其他线程不能参与进来，知道线程A操作完，其他线程才可以进来，即使线程A出现阻塞也不能改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.在Java中，通过同步机制来解决线程安全问题</span></span><br><span class="line"><span class="comment">    方式一：同步代码块</span></span><br><span class="line"><span class="comment">    synchronized(同步监视器)&#123;</span></span><br><span class="line"><span class="comment">        //需要被同步的代码</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     说明: 1.操作共享数据的代码，即为需要被同步的代码   --&gt;不能包含过多也不能过少，就变成单线程了</span></span><br><span class="line"><span class="comment">           2.共享数据 多个线程共同操作的变量</span></span><br><span class="line"><span class="comment">           3.同步监视器：锁 任何一个类的对象都可以充当锁，随便new一个object //为什么？</span></span><br><span class="line"><span class="comment">                要求：多个线程必须要共用同一把锁。都是同一个对象</span></span><br><span class="line"><span class="comment">                补充：实现Runnable接口创建的多线程中可以考虑使用this充当锁</span></span><br><span class="line"><span class="comment">                      在继承Thread创建多线程的方式中，慎用this，可以考虑使用当前类充当同步锁 类名.class</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    方式二：同步方法</span></span><br><span class="line"><span class="comment">        如果操作共享数据的代码完整地声明在一个方法中，将方法声明为同步的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        关于同步方法的总结</span></span><br><span class="line"><span class="comment">        同步方法仍然涉及到同步监视器，只是不需要声明</span></span><br><span class="line"><span class="comment">        - 非静态的同步方法，同步监视器是this</span></span><br><span class="line"><span class="comment">        - 静态的同步方法，同步监视器是static</span></span><br><span class="line"><span class="comment">5.同步的方式：线程安全问题解决了；但操作同步代码时，只能有一个线程参与，其他线程等待，相当于是一个单线程的过程，效率低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSynchronized</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-sychronized-block"><a href="#1-sychronized-block" class="headerlink" title="1. sychronized block"></a>1. sychronized block</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"><span class="comment">//synchronize的使用 ：同步代码块  synchronize(同步监视器）&#123;重复执行的方法&#125;</span></span><br><span class="line"><span class="comment">//创建线程的方式之二：实现Runnable接口 卖票</span></span><br><span class="line"><span class="comment">//区别于继承Thread类，只用new一个实现类的对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowRunnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">100</span>; <span class="comment">//此时可以不用static，声明在实现类里的属性。因为只有一个对象，作为参数传递给了三个线程，所以还是只有一个属性,可以放在实现类里</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        window1 w1 = <span class="keyword">new</span> window1();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">   <span class="comment">//不用写三个类，同一个类new三个线程</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w1);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"线程3"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (WindowRunnable.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//this是唯一的对象，只有用于实现Runnable接口的方法</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    WindowRunnable.total--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":剩余"</span> + WindowRunnable.total + <span class="string">"张票"</span> + <span class="string">" 你的票号为："</span> +</span><br><span class="line">                            (WindowRunnable.total + <span class="number">1</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-sychronized-method"><a href="#2-sychronized-method" class="headerlink" title="2 .sychronized method"></a>2 .sychronized method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用同步方法解决实现Runnable接口的线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowImpleMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3= <span class="keyword">new</span> Thread(w);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"线程3"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(WindowTest.TOTAL_TICKETS&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            show();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;  <span class="comment">//同步监视器是this</span></span><br><span class="line">        <span class="keyword">if</span> (WindowTest.TOTAL_TICKETS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            WindowTest.TOTAL_TICKETS--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" left:"</span> + WindowTest.TOTAL_TICKETS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread类继承创建的线程 使用同步方法解决线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowExtMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        windows2 w1 = <span class="keyword">new</span> windows2();</span><br><span class="line">        windows2 w2 = <span class="keyword">new</span> windows2();</span><br><span class="line">        windows2 w3 = <span class="keyword">new</span> windows2();</span><br><span class="line">        w3.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">windows2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// private static  void show()&#123;  //锁的问题，同步监视器有三个了</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;   <span class="comment">//this是当前的类</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);  <span class="comment">//父类的静态方法，可以直接调用</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticket--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" left:"</span> + ticket);</span><br><span class="line">            <span class="comment">//静态方法内部不用直接调用动态方法，需通过 对象.方法 的方式来调用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例模式懒汉式改写成线程安全的"><a href="#单例模式懒汉式改写成线程安全的" class="headerlink" title="单例模式懒汉式改写成线程安全的"></a>单例模式懒汉式改写成线程安全的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用同步机制将单例模式中的懒汉式改写为线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank bank = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Bank <span class="title">getBank</span><span class="params">()</span></span>&#123;  <span class="comment">//可能几个线程来同时调用，就会存在线程安全问题,静态同步方法的锁是类本身</span></span><br><span class="line">        <span class="comment">//方式一：同步代码块，效率差，每次都会进去判断，和直接用同步方法一样，效率低</span></span><br><span class="line"><span class="comment">//        synchronized(Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if (bank == null) &#123;</span></span><br><span class="line"><span class="comment">//                bank = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return bank;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(bank == <span class="keyword">null</span>)&#123;     <span class="comment">//后面的大部分线程就不进去了  效率更高</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (bank == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bank = <span class="keyword">new</span> Bank();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> bank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock-AFTER-JDK5-0"><a href="#ReentrantLock-AFTER-JDK5-0" class="headerlink" title="ReentrantLock(AFTER JDK5.0)"></a>ReentrantLock(AFTER JDK5.0)</h3><h4 id="3-lock-unlock"><a href="#3-lock-unlock" class="headerlink" title="3. lock/unlock"></a>3. lock/unlock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决线程安全问题的方式三：Lock锁   --AFTER JDK5.0</span></span><br><span class="line"><span class="comment">synchronized 和 lock的异同？</span></span><br><span class="line"><span class="comment">相同：都可以解决线程安全的问题</span></span><br><span class="line"><span class="comment">不同：synchronized 等执行完代码块或者同步方法，再自动释放同步监视器</span></span><br><span class="line"><span class="comment">      lock需要手动的启动同步，手动的结束同步 unlock</span></span><br><span class="line"><span class="comment">ReentrantLock是Lock接口的实现类，扩展性更好，更多子类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">建议优先度：lock  同步代码块（已经进入方法体） 同步方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化reentrantlock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);   <span class="comment">//fair 先进先出</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               lock.lock();         <span class="comment">//使用try-catch结构，加锁</span></span><br><span class="line">               <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">                   System.out.println(Thread.currentThread().getName()+<span class="string">"票号为："</span>+tickets);</span><br><span class="line">                   tickets--;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();       <span class="comment">//解锁</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        difference between ReentrantLock&amp;sychronized</p><h3 id="线程同步问题DeadLock"><a href="#线程同步问题DeadLock" class="headerlink" title="线程同步问题DeadLock"></a>线程同步问题DeadLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程的死锁问题</span></span><br><span class="line"><span class="comment">定义：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成的线程的死锁</span></span><br><span class="line"><span class="comment">出现死锁后不会出现异常，不会提示，只是所有线程都处于阻塞状态，无法继续，使用时要避免死锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决方法</span></span><br><span class="line"><span class="comment">1.专门的算法、原则</span></span><br><span class="line"><span class="comment">2.尽量减少使用同步资源</span></span><br><span class="line"><span class="comment">3.避免嵌套同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">"a"</span>);</span><br><span class="line">                    s2.append(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                        s1.append(<span class="string">"b"</span>);</span><br><span class="line">                        s2.append(<span class="string">"2"</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">"c"</span>);</span><br><span class="line">                    s2.append(<span class="string">"3"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                        s1.append(<span class="string">"d"</span>);</span><br><span class="line">                        s2.append(<span class="string">"4"</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123;  <span class="comment">//锁 A类的对象 a</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了A实例的foo方法"</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用B实例的last方法"</span>); <span class="comment">// ③</span></span><br><span class="line">b.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;    <span class="comment">//同步监视器 a</span></span><br><span class="line">System.out.println(<span class="string">"进入了A类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;  <span class="comment">//同步监视器 b</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了B实例的bar方法"</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用A实例的last方法"</span>); <span class="comment">// ④</span></span><br><span class="line">a.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;   <span class="comment">//同步监视器 对象b</span></span><br><span class="line">System.out.println(<span class="string">"进入了B类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"><span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">a.foo(b);</span><br><span class="line">System.out.println(<span class="string">"进入了主线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"副线程"</span>);</span><br><span class="line"><span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">b.bar(a);</span><br><span class="line">System.out.println(<span class="string">"进入了副线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock1 dl = <span class="keyword">new</span> DeadLock1();</span><br><span class="line"><span class="keyword">new</span> Thread(dl).start();</span><br><span class="line">dl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h2 id="四、线程通信"><a href="#四、线程通信" class="headerlink" title="四、线程通信"></a>四、线程通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程通信</span></span><br><span class="line"><span class="comment">两个线程交替打印1-100。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">涉及的三个方法</span></span><br><span class="line"><span class="comment">wait(): 一旦执行此方法，线程阻塞，释放同步监视器</span></span><br><span class="line"><span class="comment">notifyAll()：一旦执行此方法，唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment">notify();只唤醒一个线程，如果有多个wait的线程，就唤醒优先级高的线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.使用前提：只能在同步方法和同步代码块中的调用，使用ReentrantLock以另外的方式通信</span></span><br><span class="line"><span class="comment">2.三个方法的调用者必须是同步方法和同步代码块中的同步监视器，否则会报错</span></span><br><span class="line"><span class="comment">//java.lang.IllegalMonitorStateException，this和同步监视器不一样的话会报错</span></span><br><span class="line"><span class="comment">在类中调用方法的时候，非静态方法，省略了“this，” 静态方法省略了 “类.”</span></span><br><span class="line"><span class="comment">3.因为任何一个类的对象都可以充当同步监视器，所以任何一个对象都得有这三个方法，所以这三个方法时定义在java.lang.Object类中的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.比较：sleep()和wait()的异同</span></span><br><span class="line"><span class="comment">  相同：当前线程都会进入阻塞状态</span></span><br><span class="line"><span class="comment">  不同：在都用在同步代码块和同步方法中的时候，sleep()不会释放锁，wait()会释放锁</span></span><br><span class="line"><span class="comment">         sleep()声明在Thread且是静态的，wait()声明在Object类</span></span><br><span class="line"><span class="comment">         sleep()可以在任何需要的场景下调用，wait()必须使用在同步代码块和同步方法中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notifyAll();   <span class="comment">//notifyAll()唤醒所有线程，按优先级</span></span><br><span class="line">                <span class="comment">//java.lang.IllegalMonitorStateException</span></span><br><span class="line">                <span class="keyword">if</span>(num&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">10</span>);    <span class="comment">//不释放锁，不同于wait</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+num);</span><br><span class="line">                    num++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();                          <span class="comment">//使得调用该方法的线程进入阻塞状态，一旦执行wait() 会释放锁</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadComumnication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number num = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(num);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(num);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="producer-consumer-problem"><a href="#producer-consumer-problem" class="headerlink" title="producer-consumer problem"></a>producer-consumer problem</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landfill.java3;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">线程通信的应用： Producer-Consumer problem(Bounded-buffer problem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：生产者线程  消费者线程</span></span><br><span class="line"><span class="comment">共享数据：clerk</span></span><br><span class="line"><span class="comment">解决线程安全问题：同步机制</span></span><br><span class="line"><span class="comment">涉及线程的通信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//成产</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">procudeProcuct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">20</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":生产产品"</span>+num);</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProcuct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":消费产品"</span>+num);</span><br><span class="line">            num--;</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":开始成产产品"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            clerk.procudeProcuct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">":开始消费产品"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            clerk.consumeProcuct();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk c = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(c);</span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(c);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(p1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(c1);</span><br><span class="line">        t1.setName(<span class="string">"生产者"</span>);</span><br><span class="line">        t2.setName(<span class="string">"消费者"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：多线程
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑Hexo博客迁移</title>
    <link href="https://paranoiddemon.github.io/blog/posts/HexoSync.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/HexoSync.html</id>
    <published>2020-06-20T16:22:46.000Z</published>
    <updated>2020-07-05T14:24:08.560Z</updated>
    
    <content type="html"><![CDATA[<p><strong>上传电脑中博客的源文件</strong></p><p>1.生成的静态网页(.deploy_git)放在master分支在paranoiddeon.github.io 新建hexo分支存放博客源文件(除.deploy_git外的文件)，在该仓库的setting&gt;branch&gt;default branch设为hexo。在本地任意目录打开git bash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>2.在克隆到本地的paranoiddeon.github.io中，把除了.git 文件夹外的所有文件都删掉。把之前博客文件夹中除了.deploy_git的文件全部复制到paranoiddeon.github.io中，删除theme文件夹中可能存在的.git 文件夹，避免嵌套上传失败。之后把博客的源文件上传到hexo分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>3.因为之前博客使用的主题是从第三方仓库clone的，在执行git add .的时候出现了”fatal: in unpopulated submodule maupassuant” 错误，导致主题文件夹没有被上传，所以需要删除再重新add该目录，在theme目录中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf --cached maupassuant  &#x2F;&#x2F;删除文件夹</span><br><span class="line">git add maupassuant</span><br></pre></td></tr></table></figure><p><strong>在新电脑(Windows)重新搭建环境</strong></p><p>1.<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载安装Git</a></p><p>2.设置git全局邮箱和用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><p>3.设置ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? </span><br><span class="line">#输入yes 生成后填到github 在提示的文件目录复制id_rsa.pub 添加到github（settings&gt;SSH keys)</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>4.<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装nodejs</a><br>5.安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>6.在新电脑clone博客源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>7.安装hexo-deployer-git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd paranoiddeon.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">&#x2F;&#x2F;用于将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，</span><br><span class="line">&#x2F;&#x2F;并且完全覆盖该分支下的已有内容。</span><br></pre></td></tr></table></figure><p>8.生成部署博客网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果在多台电脑上同步博客，写完上传到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .  &#x2F;&#x2F;所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)</span><br><span class="line">git commit –m &quot;xxxx&quot; &#x2F;&#x2F;将暂存区里的改动给提交到本地的版本库。</span><br><span class="line">git push  &#x2F;&#x2F;将本地版本库的分支推送到远程服务器上对应的分支</span><br></pre></td></tr></table></figure><p>在另一台电脑pull</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull&#x2F;&#x2F;取回远程主机某个分支的更新，再与本地的指定分支合并</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      hexo博客迁移
    
    </summary>
    
    
      <category term="其他" scheme="https://paranoiddemon.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="blog" scheme="https://paranoiddemon.github.io/blog/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>GOG连接PSN超时解决方法</title>
    <link href="https://paranoiddemon.github.io/blog/posts/psn-gog-connection.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/psn-gog-connection.html</id>
    <published>2020-06-17T09:24:46.000Z</published>
    <updated>2020-06-30T01:08:53.585Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关闭两步验证，获取 “sso cookie”</strong></p><p>turn off 2-step verification first<br>log in to PSN (store.playstation.com) through your browser<br>after the login open this link: <a href="https://ca.account.sony.com/api/v1/ssocookie" target="_blank" rel="noopener">https://ca.account.sony.com/api/v1/ssocookie</a><br>Copy content of “npsso”</p><p><strong>修改代码，本地验证</strong><br>open windows explorer and enter the following into the address bar at the top and press enter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%LocalAppData%\GOG.com\Galaxy\plugins\installed\</span><br></pre></td></tr></table></figure><p>open the psn_{random number} folder and edit the plugin.py file with your favourite text editor<br>go to line 64 and change it from:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = stored_credentials.get(<span class="string">"npsso"</span>) <span class="keyword">if</span> stored_credentials <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = <span class="string">"Copied value of npsso"</span></span><br></pre></td></tr></table></figure><p>(“copied value of npsso” should be a 64 character long text consisting of numbers, lower case letters and upper case letters)   (the quotation marks “ “ are important!)<br>In addition to totally REPLACING the line 64, delete lines 65 and 66<br>the line 64 has to start after 8 blank SPACES (do not use tabs)</p><p><strong>重启gog再连接</strong><br>restart GOG Galaxy<br>try connecting with PSN again </p>]]></content>
    
    <summary type="html">
    
      Playstation connection timed out问题解决，领取PC版巫师3
    
    </summary>
    
    
      <category term="其他" scheme="https://paranoiddemon.github.io/blog/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-面向对象</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-oop.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-oop.html</id>
    <published>2020-06-16T16:24:46.000Z</published>
    <updated>2020-06-30T01:12:02.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-面向对象"><a href="#4-面向对象" class="headerlink" title="4. 面向对象"></a>4. 面向对象</h2><h3 id="4-1-面向对象编程"><a href="#4-1-面向对象编程" class="headerlink" title="4.1 面向对象编程"></a>4.1 面向对象编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Object Oriented Programing vs Procedure Oriented Programing</span><br><span class="line"> <span class="number">1</span>.Java类及类的成员：属性，方法，构造器；代码块，内部类</span><br><span class="line"> <span class="number">2</span>.面向对象的三大特征：封装性、继承性、多态性（抽象性）</span><br><span class="line"> <span class="number">3</span>.其他关键字:<span class="keyword">this</span> <span class="keyword">super</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">package</span> <span class="title">import</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> <span class="title">POP</span>与<span class="title">OOP</span></span></span><br><span class="line"><span class="class"> 面向过程：强调功能行为，以函数为最小单位，考虑怎么做</span></span><br><span class="line"><span class="class"> 面向对象：强调具备功能的对象，以类/对象为最小单位，考虑谁来做</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> 人</span>&#123;  </span><br><span class="line">     打开冰箱&#123;</span><br><span class="line">     冰箱.打开()</span><br><span class="line">     &#125;</span><br><span class="line">     抬起(大象)&#123;</span><br><span class="line">     大象.进入(冰箱);</span><br><span class="line">     &#125;</span><br><span class="line">     关闭(冰箱)&#123;</span><br><span class="line">     冰箱.闭合();</span><br><span class="line">  &#125;</span><br><span class="line">---------------------------     </span><br><span class="line"> 冰箱&#123;</span><br><span class="line"> 打开()&#123;&#125;</span><br><span class="line"> 闭合()&#123;&#125;</span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line">---------------------------</span><br><span class="line"> 大象&#123;</span><br><span class="line"> 进入(冰箱)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> 类：抽象</span><br><span class="line"> 实例化为对象</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">4.2</span> Java语言的基本元素：类和对象</span><br><span class="line">类：对一类实物的描述，抽象的、概念上的定义</span><br><span class="line">对象：实际存在的该类实物的每个个体，实例instance</span><br><span class="line"></span><br><span class="line">面向对象程序设计的重点是类的设计，其实就是类的成员的设计</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="4-2-类和对象"><a href="#4-2-类和对象" class="headerlink" title="4.2 类和对象"></a>4.2 类和对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、设计类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 创建类的对象的类的实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">二、类和对象的的使用（面向对象思想落地的实现）</span></span><br><span class="line"><span class="comment"> 1.创建类，设计类的成员；最花时间</span></span><br><span class="line"><span class="comment"> 2.创建类的对象</span></span><br><span class="line"><span class="comment"> 3.通过“对象.属性” “对象.方法”调用对的结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、创建了一个类的多个对象，每个对象都拥有一套类的属性。（非static的）</span></span><br><span class="line"><span class="comment">修改一个对象的属性a，不影响其他对象的属性a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、对象的内存解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建person类的对象</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的结构：属性和方法</span></span><br><span class="line"><span class="comment">//调用属性：“对象.属性”</span></span><br><span class="line">p1.name = <span class="string">"TOM"</span>;</span><br><span class="line">System.out.println(p1.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法：“对象.方法”</span></span><br><span class="line">p1.eat();</span><br><span class="line">p1.sleep();</span><br><span class="line">p1.talk(<span class="string">"Chinese"</span>);</span><br><span class="line"></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//每一个对象都有一套属性</span></span><br><span class="line">System.out.println(p2.isMale);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Person p3 = p1;</span><br><span class="line">System.out.println(p3.name); <span class="comment">//TOM</span></span><br><span class="line">p3.age = <span class="number">10</span>;</span><br><span class="line">System.out.println(p1.age);<span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">Person p4 = <span class="keyword">new</span> Person();</span><br><span class="line">p4.isMale=<span class="keyword">true</span>;</span><br><span class="line">p4 = p3;   <span class="comment">//把p3的所有属性都给了p4</span></span><br><span class="line">System.out.println(p3.isMale);<span class="comment">//false</span></span><br><span class="line">System.out.println(p4.isMale);  <span class="comment">//false</span></span><br><span class="line">System.out.println(p4.name);    <span class="comment">//TOM</span></span><br><span class="line">System.out.println(p4.age);     <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 属性 = 成员变量 = field = 域 、字段</span></span><br><span class="line"><span class="comment">方法 = 成员方法 = 函数 = method  行为</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">( String language)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"speak "</span>+ language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line"><span class="comment">//内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//persontest类 调用person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.age = <span class="number">20</span>;</span><br><span class="line">p1.sex = <span class="number">0</span>;</span><br><span class="line">p1.name = <span class="string">"Alice"</span>;</span><br><span class="line"></span><br><span class="line">p1.study();</span><br><span class="line">p1.showAge();</span><br><span class="line">System.out.println(p1.addAge(<span class="number">2</span>));</span><br><span class="line">System.out.println(p1.age);<span class="comment">//22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sex:1 male</span></span><br><span class="line"><span class="comment"> * sex:0 female</span></span><br><span class="line"><span class="comment"> * 文档注释要写在上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"studying"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"age:"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">age+=i;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/17/MyqA1rlhC8VWzBt.jpg" alt="JVM内存结构"></p><p>Heap 堆： 存放对象实例、数组 （new的）</p><p>Stack 栈：虚拟机栈，存放局部变量（方法中的变量都是局部变量），各种基本数据类型，对象引用（reference类型，不同于对象本身，村的是对象在堆中的首地址），方法执行完自动释放</p><p>Method Area 方法区：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码</p><h3 id="4-3-类中属性的使用"><a href="#4-3-类中属性的使用" class="headerlink" title="4.3 类中属性的使用"></a>4.3 类中属性的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中属性的使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">属性（成员变量）vs 局部变量</span></span><br><span class="line"><span class="comment">- 相同点：</span></span><br><span class="line"><span class="comment">1.定义变量的格式：数据类型 变量名=变量值；</span></span><br><span class="line"><span class="comment">2.先声明后使用</span></span><br><span class="line"><span class="comment">3.变量都有其对应的作用域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 不同点：</span></span><br><span class="line"><span class="comment">1.在类中声明的位置不同</span></span><br><span class="line"><span class="comment">属性：直接定义在类的一对&#123;&#125;内</span></span><br><span class="line"><span class="comment">局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</span></span><br><span class="line"><span class="comment">2.关于权限修饰符的不同</span></span><br><span class="line"><span class="comment">属性：可以在声明属性是，指明其权限、使用权限修饰符</span></span><br><span class="line"><span class="comment">常用的权限修饰符：private public protected 却省  ---&gt;封装性</span></span><br><span class="line"><span class="comment">目前，暂时使用缺省</span></span><br><span class="line"><span class="comment">局部变量：不可以使用</span></span><br><span class="line"><span class="comment">3.默认初始化值的情况</span></span><br><span class="line"><span class="comment">属性：类的属性，根据其类型，都有默认初始化值</span></span><br><span class="line"><span class="comment">整形（byte short int long） 0</span></span><br><span class="line"><span class="comment">浮点型（float double）0.0</span></span><br><span class="line"><span class="comment">字符型（char）0 'u0000'</span></span><br><span class="line"><span class="comment">布尔型（boolean）false</span></span><br><span class="line"><span class="comment">引用数据类型（String、类、数组、接口）null</span></span><br><span class="line"><span class="comment">局部变量：没有初始化值，需要显式赋值</span></span><br><span class="line"><span class="comment">特别地：形参在调用时赋值</span></span><br><span class="line"><span class="comment">4.在内存中加载的位置不同</span></span><br><span class="line"><span class="comment">属性：加载到堆 （非static）</span></span><br><span class="line"><span class="comment">局部变量：加载到栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//属性（成员变量）</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;<span class="comment">//language:方法形参</span></span><br><span class="line">System.out.println(<span class="string">"speak "</span>+language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">String food = <span class="string">"egg"</span>; <span class="comment">//局部变量</span></span><br><span class="line">System.out.println(<span class="string">"eat"</span>+food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-类中方法的使用"><a href="#4-4-类中方法的使用" class="headerlink" title="4.4 类中方法的使用"></a>4.4 类中方法的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  方法：描述类应该具有的功能</span></span><br><span class="line"><span class="comment">  比如：Math类 sqrt() random()</span></span><br><span class="line"><span class="comment">       Scanner nextXxx()</span></span><br><span class="line"><span class="comment">       Arrays sort() binarySearch() toString() equals();</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  1.例子</span></span><br><span class="line"><span class="comment">  public void eat() &#123;&#125; //没有形参</span></span><br><span class="line"><span class="comment">  public void sleep(int hour) &#123;&#125;  //void 没有返回值</span></span><br><span class="line"><span class="comment">  public String getName() &#123;&#125; //返回值类型</span></span><br><span class="line"><span class="comment">  public String getNation(String nation) &#123;&#125; //有形参</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  2.方法的声明</span></span><br><span class="line"><span class="comment">  权限修饰符  返回值类型 方法名 形参列表()&#123;</span></span><br><span class="line"><span class="comment">  方法体</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  注意：static final abstrct 来修饰方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  3.说明</span></span><br><span class="line"><span class="comment">  3.1 权限修饰符 private public 缺省 protected  --&gt;封装性</span></span><br><span class="line"><span class="comment">  3.2 返回值类型 有返回值vs没有返回值</span></span><br><span class="line"><span class="comment">  - 如果方法有返回值，必须在方法声明时指定返回值的类型,方法中使用return关键字，返回指定类型常量或者变量</span></span><br><span class="line"><span class="comment">  - 没有返回值，使用void来表示，通常没有返回值的方法不适用return，但是要使用的话，只能return;表示结束</span></span><br><span class="line"><span class="comment">    return后不可声明执行语句</span></span><br><span class="line"><span class="comment">  - 该不该有返回值：</span></span><br><span class="line"><span class="comment">      题目要求、凭经验</span></span><br><span class="line"><span class="comment">  3.3 方法名：标识符，遵循规范 xxxYyy 见名知意</span></span><br><span class="line"><span class="comment">  3.4 形参列表 可以声明0 1 多个</span></span><br><span class="line"><span class="comment">           格式：数据类型1  形参1，数据类型2  形参2...</span></span><br><span class="line"><span class="comment">           该不该定义形参</span></span><br><span class="line"><span class="comment">  3.5 方法体</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  4.return关键字的使用：</span></span><br><span class="line"><span class="comment">  4.1.使用在方法体中</span></span><br><span class="line"><span class="comment">  4.2.作用：结束方法；有返回值的方法，使用return 数据 返回方法所要的数据</span></span><br><span class="line"><span class="comment">  4.3.return后不可以声明执行语句</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  5.方法的使用中，可以调用当前类的属性、方法</span></span><br><span class="line"><span class="comment">  特殊的：方法A中调用方法A 递归方法</span></span><br><span class="line"><span class="comment">  随意递归会导致：StackOverFlow 栈溢出</span></span><br><span class="line"><span class="comment">  方法中不能定义方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  //开发中一般一个源文件只写一个class</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer cust1 = <span class="keyword">new</span> Customer();</span><br><span class="line">cust1.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep for "</span>+hour+<span class="string">" hours"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">String info = <span class="string">"come from "</span> +nation;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">students</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String major;</span><br><span class="line">String interests;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String info = name + age + major + interests;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用面向对象的方法；设计类circle计算圆的面积</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Circle areaCal = <span class="keyword">new</span> Circle();</span><br><span class="line">areaCal.radius = <span class="number">2.1</span>;</span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double c1 = areaCal.circleArea();</span></span><br><span class="line"><span class="comment">//System.out.println(c1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line">areaCal.circleArea();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double radius;</span></span><br><span class="line"><span class="comment">//public double circleArea() &#123;</span></span><br><span class="line"><span class="comment">//double area = radius*radius*Math.PI ;</span></span><br><span class="line"><span class="comment">//return area;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">circleArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI ;</span><br><span class="line">System.out.println(<span class="string">"area is "</span>+ area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误情况:半径作为属性定义更好，而不是放在形参里</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">circleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = r*r*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：设计类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.1 编写程序，声明一个method方法，在方法中打印一个10*8 的*型矩形， 在main方法中调用该方法。</span></span><br><span class="line"><span class="comment">3.2 修改上一个程序，在method方法中，除打印一个10*8的*型矩形外，再 计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法， 接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment">3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个 m*n的*型矩形，并计算该矩形的面积， 将其作为方法返回值。在main方法 中调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exer3Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Print star = <span class="keyword">new</span> Print();</span><br><span class="line">star.length = <span class="number">10</span>;</span><br><span class="line">star.width = <span class="number">8</span>;</span><br><span class="line">star.recPrt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> area = star.recArea();</span><br><span class="line">System.out.println(<span class="string">"面积为："</span>+area);</span><br><span class="line"></span><br><span class="line">star.recPrtArea(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> area1=star.recPrtArea(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(area1);</span><br><span class="line">System.out.println(star.recArea());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recPrt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;width;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;length;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recArea</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> area = length*width;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recPrtArea</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> area = m*n;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：对象数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 4. 对象数组题目： 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩 score(int)。 </span></span><br><span class="line"><span class="comment"> 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。 </span></span><br><span class="line"><span class="comment"> 问题一：打印出3年级(state值为3）的学生信息。 </span></span><br><span class="line"><span class="comment"> 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">提示： 1) 生成随机数：Math.random()，返回值类型double;  </span></span><br><span class="line"><span class="comment">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期 对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Arrays a = new Arrays();</span></span><br><span class="line"></span><br><span class="line">Students[] stus = <span class="keyword">new</span> Students[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line">&#125;   <span class="comment">//遍历学生信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"><span class="keyword">if</span>(stus[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">System.out.print(stus[i].number+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].state+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].score+<span class="string">" "</span>+<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2改进：将功能封装到方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对对象数组问题的改进，将操作数组的功能封装到方法中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Students1[] stus = <span class="keyword">new</span> Students1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students1();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">ExerTest5 test = <span class="keyword">new</span> ExerTest5();  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在outline中可以看出，ExerTest5这个类中有main方法、print方法、searchState方法、</span></span><br><span class="line"><span class="comment">sort方法，如果要在main中调用其他方法，要在main中new一个ExerTest5的对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//遍历所有学生信息</span></span><br><span class="line">test.print(stus);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"></span><br><span class="line">test.searchState(stus, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">test.sort(stus);</span><br><span class="line">test.print(stus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  遍历Students1[]数组的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 查找Students1数组中指定年级的学生信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> landfill </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stus 要查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 要查找的年级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchState</span><span class="params">(Students1[] stus,<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[i].state == state) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:给Students1数组排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students1 temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students1</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事万物皆对象</p><p>匿名对象</p><h3 id="4-5-方法的拓展"><a href="#4-5-方法的拓展" class="headerlink" title="4.5 方法的拓展"></a>4.5 方法的拓展</h3><h4 id="4-5-1-重载"><a href="#4-5-1-重载" class="headerlink" title="4.5.1 重载"></a>4.5.1 重载</h4><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.编写程序，定义三个重载方法并调用。方法名为mOL。 </span></span><br><span class="line"><span class="comment">三个方法分别接收一个int参数、两个int参数、一个字符串参数。</span></span><br><span class="line"><span class="comment">分别 执行平方运算并输出结果，相乘并输出结果，输出字符串信息。 </span></span><br><span class="line"><span class="comment">在主类的main ()方法中分别用参数区别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.定义三个重载方法max()，</span></span><br><span class="line"><span class="comment">第一个方法求两个int值中的最大值，</span></span><br><span class="line"><span class="comment">第二个方 法求两个double值中的最大值，</span></span><br><span class="line"><span class="comment">第三个方法求三个double值中的最大值， 并分别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OverloadExer test = <span class="keyword">new</span> OverloadExer();</span><br><span class="line">test.mOL(<span class="number">5</span>);</span><br><span class="line">test.mOL(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">test.mOL(<span class="string">"OK"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">2</span>, <span class="number">8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>,<span class="number">9.3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.三个方法构成的重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(i*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">System.out.println(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.三个方法构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a&gt;b&amp;a&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&gt;a&amp;b&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-2-可变个数的形参"><a href="#4-5-2-可变个数的形参" class="headerlink" title="4.5.2 可变个数的形参"></a>4.5.2 可变个数的形参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">二、可变个数形参的方法</span><br><span class="line"> JDK5<span class="number">.0</span> variable number of arguments,允许直接定义能和多个实参相匹配的形参</span><br><span class="line"> <span class="number">1</span>.jdk5<span class="number">.0</span>新增的内容</span><br><span class="line"> <span class="number">2</span>.具体使用：</span><br><span class="line"> <span class="number">2.1</span>格式：类型...变量名</span><br><span class="line"> <span class="number">2.2</span>当调用可变个数形参的方法时，可以传入任意个数的参数</span><br><span class="line"> <span class="number">2.3</span>可变个数形参方法和本类中方法名相同，形参不同的方法构成重载</span><br><span class="line"><span class="number">2.4</span>可变个数形参方法和本类中方法名相同，形参类型相同的数组之间不构成重载，不能够共存</span><br><span class="line"> <span class="number">2.5</span>可变个数形参在方法的形参中，必须声明在末尾；</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b,String...strs)</span> <span class="comment">//编译器无法分清传入数据的类型</span></span></span><br><span class="line"><span class="function"> 2.6只能声明一个可变个数的形参，因为必须放在最后面</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class VarargsTest </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">VarargsTest test = <span class="keyword">new</span> VarargsTest();</span><br><span class="line"><span class="comment">//test.show("aa");</span></span><br><span class="line">test.show(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line"><span class="comment">//test.show();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sho"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以取0 1 2 ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String... strs)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line"><span class="comment">//实际上是个数组,也可以遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strs.length;i++) &#123;</span><br><span class="line">System.out.println(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和上面的定义是没有区别的，不能共存，jdk5.0之后</span></span><br><span class="line"><span class="comment">//public void show(Stirng[] strs) &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-3-值传递机制"><a href="#4-5-3-值传递机制" class="headerlink" title="4.5.3 值传递机制"></a>4.5.3 值传递机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">三、方法参数的值传递机制</span><br><span class="line"> <span class="number">1</span>.定义： 方法，必须由其所在类或对象调用才有意义，若方法含有函数：</span><br><span class="line"> 形参：方法声明时的参数 定义方法时（）内的参数</span><br><span class="line"> 实参：方法调用时，实际传给形参的数据参数值 </span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>.值传递机制</span><br><span class="line"> 参数传递方式：值传递</span><br><span class="line"> 即将实际参数值的副本传入方法内，而参数本身不受影响。</span><br><span class="line"> 形参是基本数据类型：将实参基本数据类型变量的数据值传递给形参</span><br><span class="line"> 形参是引用数据类型：把地址值传递给形参</span><br><span class="line"> </span><br><span class="line"> 关于变量的赋值；</span><br><span class="line">  基本数据类型：赋值得到的是保存的数据值</span><br><span class="line">  引用数据类型：赋值得到的是地址值</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsTest</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> ArgsTest test = <span class="keyword">new</span> ArgsTest();</span><br><span class="line"> Data data = <span class="keyword">new</span> Data();</span><br><span class="line"> data.m = <span class="number">10</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"> <span class="comment">//调用方法交换m n </span></span><br><span class="line"> <span class="comment">//复制 了一份地址到方法中，但是实参和形参指向堆中同样的对象，所以能实现交换</span></span><br><span class="line"> test.swap(data);</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//基本数据类型</span></span><br><span class="line"> <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = m;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span> ;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="comment">//int temp = m;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = temp;</span></span><br><span class="line"><span class="comment">//System.out.println(m+" " +n);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用swap方法,因为是基本数据类型不能交换</span></span><br><span class="line"><span class="comment">//test.swap(10,20);</span></span><br><span class="line">System.out.println(m+ <span class="string">" "</span> +n); </span><br><span class="line"><span class="comment">//没有交换，因为基本数据类型传递进入形参，在swap方法中交换后，就结束了，main方法中的数据没变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用数据类型   o2得到的是o1的地址值，指向堆中的同一个对象</span></span><br><span class="line">Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">o1.orderId = <span class="number">1001</span>;</span><br><span class="line">Order o2 = o1;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line">o2.orderId = <span class="number">2002</span>;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//交换两个变量值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(Data data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = data.m;</span><br><span class="line">data.m = data.n;</span><br><span class="line">data.n = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">ValueTransferTest test = <span class="keyword">new</span> ValueTransferTest();</span><br><span class="line">test.change(s1);<span class="comment">//还是hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String比较特别，本质上是一个char[]</span></span><br><span class="line"><span class="comment">//String 是存在常量池值中的，数组是不能随意更改的，所以 s在常量池中重新</span></span><br><span class="line"><span class="comment">//new一个char[] hi;然后s得到新的地址值，所以s1的地址值和指向的对象未改变</span></span><br><span class="line">System.out.println(s1); <span class="comment">//hello</span></span><br><span class="line"><span class="comment">//System.out.println(test.change(s1));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s = <span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArgsExer test = <span class="keyword">new</span> ArgsExer();</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//test.method(a,b);</span></span><br><span class="line"><span class="comment">//需要在方法被调用之后，仅打印出a= 100，b=20.写出method 不改变原题</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+b+<span class="string">" b="</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印流,取代原来的打印</span></span><br><span class="line"><span class="comment">//system.exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 值传递练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PassObject p = <span class="keyword">new</span> PassObject();</span><br><span class="line">Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">p.printAreas(c, <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"now radius is: "</span>+c.radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//circle类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求面积</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findAreas</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassObject</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAreas</span><span class="params">(Circle c,<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"radius\t\tArea"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//可以这样写，就可以在循环外使用 </span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;=time;i++) &#123;</span><br><span class="line"><span class="comment">//圆的半径</span></span><br><span class="line">c.radius = i;</span><br><span class="line"><span class="keyword">double</span> area = c.findAreas();</span><br><span class="line">System.out.println(c.radius+<span class="string">"\t\t"</span>+area);</span><br><span class="line">&#125;</span><br><span class="line">c.radius = i ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-递归方法"><a href="#4-5-4-递归方法" class="headerlink" title="4.5.4 递归方法"></a>4.5.4 递归方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 四、递归方法 recursion（了解）</span></span><br><span class="line"><span class="comment"> 1.递归方法：一个方法体内调用自身</span></span><br><span class="line"><span class="comment"> 2.一种隐式的循环，重复调用某段代码，但无需循环控制</span></span><br><span class="line"><span class="comment"> 递归一定要向一直方向递归，否则就成为无穷递归，会进入死循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算1-100之间自然数的和</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">System.out.println(getFactorial(<span class="number">10</span>));</span><br><span class="line">System.out.println(func(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第n个数</span></span><br><span class="line">System.out.println(fibo(n));</span><br><span class="line"><span class="comment">//打印整个斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">System.out.print(fibo(i)+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二 递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n +getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//终止的情况</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n *getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例3：数列f(0)=1,f(1)=4 f(n+2)=2f(n+1)+f(n)</span></span><br><span class="line"><span class="comment">//n&gt;0整数 求f（10）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*func(n-<span class="number">1</span>)+func(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例4：斐波那契数列 求n个值，打印数列</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13 21... 前两项的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1 1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(fibo(n-1)+fibo(n-2));</span></span><br><span class="line"><span class="keyword">return</span> fibo(n-<span class="number">1</span>)+fibo(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例5  汉诺塔问题</span></span><br><span class="line"><span class="comment">//例6  快排</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RecursionTest test = <span class="keyword">new</span> RecursionTest();</span><br><span class="line">test.binomial();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="comment">//递归调用的次数 相当于二叉树的前序遍历 从前往后</span></span><br><span class="line"><span class="comment">/*最后几项输出结果</span></span><br><span class="line"><span class="comment">count:282 k:-1</span></span><br><span class="line"><span class="comment">count:283 k:2</span></span><br><span class="line"><span class="comment">count:284 k:1</span></span><br><span class="line"><span class="comment">count:285 k:0</span></span><br><span class="line"><span class="comment">count:286 k:-1</span></span><br><span class="line"><span class="comment">count:287 k:0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">recursion(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">count ++;</span><br><span class="line">System.out.println(<span class="string">"count:"</span>+count+<span class="string">" k:"</span>+k);</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recursion(k-<span class="number">1</span>)+recursion(k-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h3 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a>三大特征</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h4 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h4><h3 id="Object类和包装类"><a href="#Object类和包装类" class="headerlink" title="Object类和包装类"></a>Object类和包装类</h3><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="BEFORE-JDK-7-0"><a href="#BEFORE-JDK-7-0" class="headerlink" title="BEFORE JDK 7.0"></a>BEFORE JDK 7.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 接口的使用</span></span><br><span class="line"><span class="comment"> 1.接口使用interface来定义，类是一种功能，一个类可以实现多个接口</span></span><br><span class="line"><span class="comment"> 2.java中，接口和类是并列的结构</span></span><br><span class="line"><span class="comment"> 3.如何定义接口：定义接口的成员</span></span><br><span class="line"><span class="comment"> 3.1 JDK 7及以前:只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment"> 全局常量：public static final的  但是书写时可以省略</span></span><br><span class="line"><span class="comment"> public abstract</span></span><br><span class="line"><span class="comment"> 3.2 JDK 8:除了全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.接口中是不能定义构造器的，意味着接口不可以实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在java开发中，接口通过让类去实现（implements)的方式使用</span></span><br><span class="line"><span class="comment"> 如果实现类覆盖了接口中所有的抽象方法，则此实现类就可以实例化</span></span><br><span class="line"><span class="comment"> 如果实现类没有全部覆盖接口中的所有方法，则此实现类就还是抽象类  重写--&gt;实现</span></span><br><span class="line"><span class="comment"> 6.java类可以实现多个接口，弥补了类的单继承性的局限</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 7.格式 class Bullet extends Object implements Attackable,Flyable&#123;&#125;  先继承后实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 8.接口和接口之间可以多继承。   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 9.接口的使用也体现了多态性  抽象类与接口的区别  都不可以实例化，如果接口或者抽象类做形参，就要使用实现类</span></span><br><span class="line"><span class="comment"> 10、接口的本质是一种规范   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Flyable.MIN_SPEED);</span><br><span class="line">Plane p = <span class="keyword">new</span> Plane();</span><br><span class="line">p.fly();</span><br><span class="line">p.stop();</span><br><span class="line">Bullet b = <span class="keyword">new</span> Bullet();</span><br><span class="line">b.attack();</span><br><span class="line">b.fly();</span><br><span class="line">b.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;</span><br><span class="line"><span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>; <span class="comment">//前面可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;<span class="comment">//省略了public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could stop"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kite</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;  <span class="comment">//只实现了一个还是抽象类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Attackable</span>,<span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"kill"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"stop"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span> <span class="keyword">extends</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AFTER-JDK-8-0"><a href="#AFTER-JDK-8-0" class="headerlink" title="AFTER JDK 8.0"></a>AFTER JDK 8.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfaceAFTER;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> AFTER JDK8.0 除了定义全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> 1.静态方法，通过interface.method调用</span></span><br><span class="line"><span class="comment"> 2.默认方法，通过实现类的对象调用，</span></span><br><span class="line"><span class="comment"> 默认方法还可以在实现类中重写，通过实现类调用的是重写后的方法</span></span><br><span class="line"><span class="comment"> 3.如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，</span></span><br><span class="line"><span class="comment"> 在没有重写此方法的情况下，默认调用的是父类中同名同参数的方法  --&gt;类优先原则</span></span><br><span class="line"><span class="comment"> 如果重写了就调用子类自己重写后的方法。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.如果实现类实现的多个接口中有同名同参数的默认方法，在继承的父类中没有该同名同参数的方法，也并且没有重写。</span></span><br><span class="line"><span class="comment"> 直接调用。编译不通过，不知道该调用哪个方法   --&gt;接口冲突，因此需要在实现类中重写此方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在实现类中重写了方法后调用 接口中的默认方法使用  接口名.super.默认方法名</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 6.实现类写进了接口中的默认方法，一般不怎么重写</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompareA</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;   <span class="comment">//静态方法，通过interface.method调用</span></span><br><span class="line">System.out.println(<span class="string">"compareA:BEIJING"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  <span class="comment">//默认方法 可以省略public</span></span><br><span class="line">System.out.println(<span class="string">"compareA:SHANGHAI"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类的成员之五：内部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 1.允许将一个类A声明在另一个类B中，则类A为内部类，类B称为外部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 2.分类：</span></span><br><span class="line"><span class="comment"> 成员内部类： 和其他构成平行的声明在类内   静态的和非静态的</span></span><br><span class="line"><span class="comment"> 局部内部类：方法内 代码块内 构造器内</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 3.成员内部类</span></span><br><span class="line"><span class="comment"> 一方面，作为外部类的成员：</span></span><br><span class="line"><span class="comment"> &gt; 可以调用外部类的结构</span></span><br><span class="line"><span class="comment"> &gt; 内部类可以被static修饰  分为静态非静态的内部类</span></span><br><span class="line"><span class="comment"> &gt; private default protected public    类本身只有两种权限修饰符  public 和 default</span></span><br><span class="line"><span class="comment"> 另一方面，作为一个类：</span></span><br><span class="line"><span class="comment"> &gt; 可以定义属性 方法 构造器 代码块 再定义内部类</span></span><br><span class="line"><span class="comment"> &gt; 可以被final修饰，表示不能被继承</span></span><br><span class="line"><span class="comment"> &gt; 可以被abstract修饰，表示不能被实例化</span></span><br><span class="line"><span class="comment"> 4.</span></span><br><span class="line"><span class="comment"> 4.1 如何实例化成员您外部类的对象</span></span><br><span class="line"><span class="comment"> 4.2 如何在成员内部类中区分调用外部类的结构</span></span><br><span class="line"><span class="comment"> 4.3 局部内部类如何在开发中使用   见InnerClassTest1.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建非静态成员内部类的实例化，先要把外部类实例化</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Brain b = p.<span class="keyword">new</span> Brain(); <span class="comment">//在外部的类的实例中去new一个内部类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员内部类的实例化</span></span><br><span class="line">Person.Heart h = <span class="keyword">new</span> Person.Heart();  <span class="comment">//如果是静态的内部类，可以通过这样调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员内部类 非静态的</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Brain</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Brain</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"BRAIN"</span>);</span><br><span class="line">Person.<span class="keyword">this</span>.eat();   <span class="comment">//可以在内部类的方法体中   调用外部类的方法,省略了Person.this.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(name);   <span class="comment">//调用形参传入的name</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);   <span class="comment">//调用的该方法所在类的name</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);  <span class="comment">//调用的是外部类的而name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员内部类 静态的</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Heart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Heart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部内部类：方法中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：构造区中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：代码块中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中局部内部类很少会声明在构造器和代码块中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即使是在方法中也很少见局部内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个实现了Comparable接口的类：局部内部类  非匿名实现类的匿名对象</span></span><br><span class="line"><span class="comment">//class MyComparable implements Comparable&#123;</span></span><br><span class="line"><span class="comment">//@Override  //对接口的抽象方法进行重写</span></span><br><span class="line"><span class="comment">//public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return new MyComparable();     //return一个实现类，这个内部类只在该方法内使用</span></span><br><span class="line"><span class="comment">//方式二  :return一个 匿名实现类的匿名对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础：面向对象  没整理完
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java-数组</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-array.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-array.html</id>
    <published>2020-06-16T03:24:46.000Z</published>
    <updated>2020-06-30T01:11:19.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>/*<br>数组的概念</p><ol><li><p>array，多个相同数据类型的数据按一定顺序排列集合，并使用一个名字命名，<br>并通过编号的方式对这些数据进行统一管理</p></li><li><p>相关概念<br>数组名<br>下表、角标、索引<br>元素<br>数组的长度 ，元素个数</p></li><li><p>1）数据是有序排列的 *<br>2）数组是引用数据类型变量，数组的元素既可以是基本数据类型，也可以是引用数据类型。<br>3）创建数据是在内存中开辟了一块连续的空间，数组名引用的是该空间的首地址<br>4）数组的长度一旦确定不能修改</p></li><li><p>分类：<br>维数：一维，二维数组…<br>按照元素：基本数据类型元素的数组，引用数据类型元素的数组</p></li><li><p>一维数组的使用<br>*一维数组的声明和初始化<br>*如何调用数组的制定位置的元素<br>*如何获取数组的长度<br>*如何遍历数组<br>*数组元素的默认初始化值<br>*数组的内存解析</p></li></ol><p>*/</p><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h2><ol><li>一维数组的声明和初始化</li><li>如何调用数组的制定位置的元素</li><li>如何获取数组的长度</li><li>如何遍历数组</li><li>数组元素的默认初始化值</li><li>数组的内存解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.一维数组的声明和初始化</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] ids;</span><br><span class="line"><span class="comment">//1.1静态初始化:数组的初始化和数组元素的赋值操作同时进行 </span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//1.2动态初始化：数组的初始化和数组元素的赋值操作分开进行，只写长度</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：数组一旦初始化完成，其长度就确定了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如何调用数组制定位置的元素：通过索引的方式调用</span></span><br><span class="line"><span class="comment">//数组的索引从0开始，到数组的长度-1结束</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"apple"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"banana"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"cat"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"dog"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"egg"</span>; <span class="comment">//charAt(0),和数据库sql交互一般从1开始</span></span><br><span class="line"><span class="comment">//names[5] = "fish";  超出数组长度无法运行 ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.如何获取数组的长度：</span></span><br><span class="line"><span class="comment">//length</span></span><br><span class="line">System.out.println(names.length);<span class="comment">//5</span></span><br><span class="line">System.out.println(ids.length);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.如何遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">System.out.println(names[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.数组元素的默认初始化值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 数组元素是整型 0</span></span><br><span class="line"><span class="comment"> * 浮点型 0.0</span></span><br><span class="line"><span class="comment"> * char型：0 （ASCII码）'\u0000',而非'0'</span></span><br><span class="line"><span class="comment"> * boolean: false(二进制的0） </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 引用数据类型</span></span><br><span class="line"><span class="comment"> * Array作为元素的默认数据类型也是null</span></span><br><span class="line"><span class="comment"> * String: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr1.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"-----"</span>+arr1[i]+<span class="string">"-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr1[<span class="number">0</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"ok"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(arr3[<span class="number">0</span>]==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.数组的内存解析<sup>1</sup><br>         /*简化结构<br>         栈 stack线性关系：局部变量，在方法中定义的变量都是局部变量<br>         队 heap：new出来的结构 对象、数组<br>         方法区 method area，包括常量池，静态域<br>         */</p><p>注1：<a href="https://www.youtube.com/watch?v=ZFiYxdWKft8&list=PLTsrYYJ5DyAnRKvHbZ7LslqC_wQ1iOQsF&index=3&t=0s" target="_blank" rel="noopener">JVM内存模型解析</a></p><h2 id="练习：学生成绩"><a href="#练习：学生成绩" class="headerlink" title="练习：学生成绩"></a>练习：学生成绩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"input amounts of students"</span>);</span><br><span class="line"><span class="keyword">int</span> amounts = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> score[] = <span class="keyword">new</span> <span class="keyword">int</span>[amounts];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"input score of students"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;amounts;i++) &#123;</span><br><span class="line">score[i] = scan.nextInt();</span><br><span class="line"><span class="keyword">if</span>(score[i]&gt;=max)&#123;</span><br><span class="line">max = score[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"the highest score is "</span>+max);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;amounts;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">10</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"A"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">20</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"B"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score[i]&gt;=(max-<span class="number">30</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"C"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"student "</span>+i+<span class="string">" level:"</span>+<span class="string">"D"</span>+<span class="string">" "</span>+score[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>多维数组(以二维为主）<br>理解一维数组array1又作为另一一维数组array2的元素而存在。<br>其实从数组底层的运行机制来看，没有多维数组。<br>array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</p><h2 id="2-二维数组的使用"><a href="#2-二维数组的使用" class="headerlink" title="2. 二维数组的使用"></a>2. 二维数组的使用</h2><ol><li>二维数组的声明和初始化</li><li>如何调用数组的制定位置的元素</li><li>如何获取数组的长度</li><li>如何遍历数组</li><li>数组元素的默认初始化值</li><li>数组的内存解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多维数组的使用(以二维为主）</span></span><br><span class="line"><span class="comment">1.理解一维数组array1又作为另一一维数组array2的元素而存在。</span></span><br><span class="line"><span class="comment">其实从数组底层的运行机制来看，没有多维数组。</span></span><br><span class="line"><span class="comment">2.array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.二维数组的使用：</span></span><br><span class="line"><span class="comment">1）声明和初始化 静态和动态</span></span><br><span class="line"><span class="comment">2）赋值和调用</span></span><br><span class="line"><span class="comment">3）长度</span></span><br><span class="line"><span class="comment">4）遍历（索引）</span></span><br><span class="line"><span class="comment">5）默认初始化值</span></span><br><span class="line"><span class="comment">6）内存解析</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.二维数组的声明和初始化</span></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>]; <span class="comment">// 3个地址 指向3个另外的数组</span></span><br><span class="line"><span class="comment">//动态初始化2</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//还没有赋值 外面的数组值是null，还没有指向的数组，所以也没有在堆中预留内部数组的空间</span></span><br><span class="line"><span class="comment">//另外的正确写法（较少用）：</span></span><br><span class="line"><span class="keyword">int</span> arr4[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr5[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> arr6[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr7 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//类型推断</span></span><br><span class="line"><span class="keyword">int</span>[][] arr8 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">String[] arr9 = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>&#125;;</span><br><span class="line"><span class="comment">//但是分行的是不能省略的，只有一行的是可以省略的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如何调用数组制定位置的元素</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//2</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line"><span class="comment">//System.out.println(arr3[1][0]); //报错NullPointerException 空指针</span></span><br><span class="line"></span><br><span class="line">arr3[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>]; </span><br><span class="line"><span class="comment">//在外面数组的索引1位置处，new一个4元素的string数据的空间 </span></span><br><span class="line"><span class="comment">//地址（16进制0x）赋值到索引位置1，等于创建了以个指针</span></span><br><span class="line">System.out.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取长度</span></span><br><span class="line">System.out.println(arr1.length);   <span class="comment">//3   length和内部的数组无关</span></span><br><span class="line">System.out.println(arr1[<span class="number">0</span>].length);<span class="comment">//2   length和内部的数组无关</span></span><br><span class="line">System.out.println(arr1[<span class="number">2</span>].length);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.如何遍历</span></span><br><span class="line"><span class="comment">//嵌套循环</span></span><br><span class="line"><span class="comment">//二维数组：两层for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr1.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr1[i].length;j++) &#123;</span><br><span class="line">System.out.println(arr1[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.二维数组的元素的默认初始化值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 分为：外层数组的元素，内层数组的元素</span></span><br><span class="line"><span class="comment"> 初始化方式1：</span></span><br><span class="line"><span class="comment"> int[][] arr = new int[4][3];</span></span><br><span class="line"><span class="comment"> 外层元素：arr[0],arr[1];</span></span><br><span class="line"><span class="comment"> 内层元素：arr[0][1],arr[2][3];</span></span><br><span class="line"><span class="comment"> 外层元素的初始化值为null </span></span><br><span class="line"><span class="comment"> 内层元素的初始化值与一维相同 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 初始化方式二：</span></span><br><span class="line"><span class="comment"> int[][] arr = new int[4][];</span></span><br><span class="line"><span class="comment"> 外层元素：null</span></span><br><span class="line"><span class="comment"> 内层元素：无法调用，报错 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[][] arr10= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr10[<span class="number">0</span>]);  <span class="comment">//[I@424c0bc4地址值 在arr[0]位置的数组的地址值</span></span><br><span class="line">System.out.println(arr10[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr10);   <span class="comment">//[[I@3c679bde "[["表示二维 "I"表示int @后面是16进制的数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr11 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr11);<span class="comment">//[I@3c679bde</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>[][] arr12= <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr12[<span class="number">0</span>]);  <span class="comment">//[F@8807e25</span></span><br><span class="line">System.out.println(arr12[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0.0</span></span><br><span class="line">System.out.println(arr12); <span class="comment">//[[F@63e31ee</span></span><br><span class="line"></span><br><span class="line">String[][] arr13= <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr13[<span class="number">0</span>]);  <span class="comment">//[Ljava.lang.String;@68fb2c38</span></span><br><span class="line">System.out.println(arr13[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr13); <span class="comment">//[[Ljava.lang.String;@567d299b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>[][] arr14= <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr14[<span class="number">0</span>]);  <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.内存结构<br>        //main方法结束后，变量先进后出，出栈，指针就没有了，回收内存，堆中回收外层，之后内层元素失去指针也没回收。</p><p>方法中变量都是局部变量，局部变量都是在栈中。</p><p>地址是JVM算出来的hash值，不是底层内存真实的地址<br>引用类型的变量，存的不是null就是地址值</p><img src="https://i.loli.net/2020/06/16/N9Xoq3bajlTyvV7.png" alt="二维数组的内存解析" style="zoom:85%;" /><p>数据结构</p><ol><li>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多</li><li>数据的存储结构<ul><li>线性表：一对一关系 顺序表（如：数组）、链表、栈、队列</li><li>树形结构：二叉树 数据库中的B+树</li><li>图形结构（多对多）</li></ul></li></ol><p>算法：</p><ol><li>排序算法</li><li>搜索算法</li></ol><h2 id="练习：打印杨辉三角"><a href="#练习：打印杨辉三角" class="headerlink" title="练习：打印杨辉三角"></a>练习：打印杨辉三角</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用二维数组打印一个10行的杨辉三角</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YangHuiTriangle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr[i]= <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//首末赋值</span></span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;arr[i].length-<span class="number">1</span>;j++) &#123;<span class="comment">//这里用length作为判断条件。</span></span><br><span class="line">arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j]; <span class="comment">//某行等于上行的两个数的相加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(arr.length);i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr[i].length;j++) &#123;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、数组涉及常见算法"><a href="#三、数组涉及常见算法" class="headerlink" title="三、数组涉及常见算法"></a>三、数组涉及常见算法</h1><p>/*<br>数组涉及的常见算法：<br>1.<strong>数组元素的赋值</strong>（杨辉三角、回形数）<br>2.求数值型数组中元素的最大值、最小值、平均数、总和<br>3.数组的赋值、翻转、查找（线性查找、<strong>二分法查找</strong>）<br>4.数组元素的<strong>排序算法</strong>（冒泡算法）<br> */</p><h2 id="1-数组元素赋值"><a href="#1-数组元素赋值" class="headerlink" title="1. 数组元素赋值"></a>1. 数组元素赋值</h2><p>杨辉三角/回形树</p><p>练习：创建一个int[6]数组，要求元素在1-30之间，且是随机赋值，同时要求元素的值各不相同;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//int temp=(int)(Math.random()*30+1);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//while(temp==arr[i]) &#123;</span></span><br><span class="line"><span class="comment">//arr[i] = (int)(Math.random()*30+1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//temp = arr[1];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[i]==arr[j]) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-最大、最小，和、平均"><a href="#2-最大、最小，和、平均" class="headerlink" title="2. 最大、最小，和、平均"></a>2. 最大、最小，和、平均</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmStatistic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr2 =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> avg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr2[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&gt;max) &#123;</span><br><span class="line">max =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&lt;min) &#123;</span><br><span class="line">min =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line">sum += arr2[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.print(arr2[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">avg = sum/(<span class="keyword">double</span>)arr2.length;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(avg);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-赋值、翻转、查找"><a href="#3-赋值、翻转、查找" class="headerlink" title="3. 赋值、翻转、查找"></a>3. 赋值、翻转、查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmAssignment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">array2=array1;   <span class="comment">//堆空间中实际上只有一个数组，array2得到array1的赋值是个地址值</span></span><br><span class="line"><span class="comment">//new一次只有一个数组</span></span><br><span class="line"><span class="comment">//不能称作数组的复制，未在堆中开辟新的内存空间，类似于快捷方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array2[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(array1);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array2);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的复制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReplicate</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array11 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array22 = <span class="keyword">new</span> <span class="keyword">int</span>[array11.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">array22[i]=array11[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">System.out.print(array11[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array22[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(array11);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array22);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的反转</span></span><br><span class="line"><span class="comment">//写法1:多new了一个数组，要两个变量，效率不高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line">String[] array4 = <span class="keyword">new</span> String[array3.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array3.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = array3.length-i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">array4[j]=array3[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array4.length;i++) &#123;</span><br><span class="line">System.out.print(array4[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array5 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line"><span class="comment">//String[] array6 = new String[array5.length];</span></span><br><span class="line"><span class="comment">//for(int i = 0;i&lt;array5.length/2;i++) &#123;</span></span><br><span class="line"><span class="comment">//String temp = array5[i];</span></span><br><span class="line"><span class="comment">//array5[i]=array5[array5.length-i-1];</span></span><br><span class="line"><span class="comment">//array5[array5.length-i-1]=temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方法三：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=array5.length-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">String temp1=array5[j];</span><br><span class="line">array5[j]=array5[i];</span><br><span class="line">array5[i]=temp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array5.length;i++) &#123;</span><br><span class="line">System.out.print(array5[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找（或搜索）</span></span><br><span class="line"><span class="comment">//线性查找：一个个找</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] search = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"CC"</span>,<span class="string">"FF"</span>,<span class="string">"PPP"</span>&#125;;</span><br><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"please input the object you wanna search:"</span>);</span><br><span class="line">String object = scan.next();</span><br><span class="line"><span class="keyword">boolean</span> isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;search.length;i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(object.equals(search[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"the index of object is "</span>+i);</span><br><span class="line">isflag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isflag) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分法查找：</span></span><br><span class="line"><span class="comment">//前提：所有查找的数组必须有序</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">98</span>,-<span class="number">22</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">46</span>,<span class="number">98</span>,<span class="number">210</span>,<span class="number">333</span>,<span class="number">456</span>&#125;;</span><br><span class="line">Scanner scan1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"input:"</span>);</span><br><span class="line"><span class="keyword">int</span> object1 = scan1.nextInt();</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr2.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isflag2= <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end) &#123;</span><br><span class="line"><span class="keyword">int</span> middle = (head+end)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(object1==arr2[middle]) &#123;</span><br><span class="line">System.out.println(<span class="string">"index： "</span>+middle);</span><br><span class="line">isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(object1 &gt; arr2[middle]) &#123;</span><br><span class="line">head = middle+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">end = middle-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isflag2) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//差值法 哈希算法</span></span><br></pre></td></tr></table></figure><h2 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设n个记录的序列为&#123;R1 R2 ... Rn&#125;,其相应的关键字为&#123;K1,K2...Kn&#125;</span></span><br><span class="line"><span class="comment">重新排序&#123;Ri1,Ri2...Rin&#125;,满足&#123;Ki1&lt;=Ki2...&lt;=Kin&#125;,通常排序的目的是为了快速查找</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">衡量优劣： </span></span><br><span class="line"><span class="comment">时间复杂度 </span></span><br><span class="line"><span class="comment">空间复杂度 </span></span><br><span class="line"><span class="comment">稳定性：关键字相等的A,B，排序后先后书序不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">内部排序</span></span><br><span class="line"><span class="comment">外部排序：需要借助内存之外的磁盘储存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">十大内部排序算法：</span></span><br><span class="line"><span class="comment">选择排序：直接选择排序、**堆排序**</span></span><br><span class="line"><span class="comment">**交换排序**：冒泡、快速排序</span></span><br><span class="line"><span class="comment">插入排序：直接插入、折半插入、Shell排序（希尔排序）</span></span><br><span class="line"><span class="comment">**归并排序**</span></span><br><span class="line"><span class="comment">桶式排序（较少）</span></span><br><span class="line"><span class="comment">基数排序（较少）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法的五大特征：</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">有穷性</span></span><br><span class="line"><span class="comment">确定性</span></span><br><span class="line"><span class="comment">可行性</span></span><br><span class="line"><span class="comment">注：非确定性算法：并行算法 概率算法 深度学习</span></span><br><span class="line"><span class="comment">不要求终止的计算描述：过程</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的冒泡排序的实现</span></span><br><span class="line"><span class="comment">//n个元素，n-1趟，比较相邻的两个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>,<span class="number">23</span>,<span class="number">10</span>,-<span class="number">45</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">45</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序：递归  (思想)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序算法的横向对比</span></span><br></pre></td></tr></table></figure><h1 id="四、Arrays-工具类的使用"><a href="#四、Arrays-工具类的使用" class="headerlink" title="四、Arrays 工具类的使用"></a>四、Arrays 工具类的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> java.util.Arrays:操作数组的工具类,定义了很多操作数组的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.boolean equals(int[] a, int[] b):判断两个数组是否相等</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString(int[] a):输出数组信息</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void fill(int[] a, int val):将指定值填充到数组</span></span><br><span class="line">Arrays.fill(arr1, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void sort(int[] a):排序</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 2, 3]</span></span><br><span class="line">System.out.println(arr2.toString());<span class="comment">//注意两者的区别[I@16b4a017</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0].toString());  //int型不能用该方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int binarySearch(int[] a,int key)</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = Arrays.binarySearch(arr3,<span class="number">5</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//返回负数就是未找到</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、数组中的常见异常"><a href="#五、数组中的常见异常" class="headerlink" title="五、数组中的常见异常"></a>五、数组中的常见异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组中的常见异常：</span></span><br><span class="line"><span class="comment">1.数组角标越界异常：ArrayIndexOutOfBoundException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.空指针异常：NullPointerException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//System.out.println(arr[5]);</span></span><br><span class="line"><span class="comment">//System.out.println(arr[-1]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况1：</span></span><br><span class="line"><span class="comment">//    int[]arr1 = null;</span></span><br><span class="line"><span class="comment">//    System.out.println(arr1[0]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0][0]);//空指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况三：</span></span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());<span class="comment">//空指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Java基础:数组
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2020/06</title>
    <link href="https://paranoiddemon.github.io/blog/posts/thoughtsof202006.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/thoughtsof202006.html</id>
    <published>2020-06-14T14:22:46.000Z</published>
    <updated>2020-06-29T04:57:24.089Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>既然可以随时选择死，为什么不换种活法</p><p>2.<br>为什么这样子，我真的不理解</p><p>3.<br>人是如此的易驯服，被他们那套搞一搞，成为一头圈养的家猪，变得丑陋而讨厌，仿佛生下来就在等待屠宰，野猪的精气神儿就完全不一样。</p><p>4.<br>Welcome to the slaughterhouse!</p><p>5.<br>What kind of savages are we？ What kind of country do we live in？</p><p>6.<br>痛苦的药方就在痛苦之中</p><p>7.<br>活着成为猪和死了也不知道哪个更可怕</p><p>8.<br>行动！加速融入生活</p><p>9.<br>哦 眼泪~</p><p>10.<br>眼睛都哭模糊了，浴室，我的伤心地</p><p>11.<br>2020，罗大佑年，多次落泪，就这么飘来飘去，哪里是你的家？</p><p>12.<br>黑暗好像一颗巨石，按在胸口</p><p>13.<br>夏，十五日夜，秘密发丧，埋于后山。</p><p>14.<br>凑活过，一种普世生活哲学，好像一切都能缝补，slogan是「害想咋地？」</p><p>15.<br>舒展眉头<br>过失败而渺小的人生<br>也是一种伟大</p><p>16.<br>平行世界是真实存在的</p>]]></content>
    
    <summary type="html">
    
      胡言乱语inbox，查重率&lt;2%
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-基本语法</title>
    <link href="https://paranoiddemon.github.io/blog/posts/java-basics.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/java-basics.html</id>
    <published>2020-06-13T16:24:46.000Z</published>
    <updated>2020-06-30T01:11:20.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Java语言"><a href="#1-Java语言" class="headerlink" title="1. Java语言"></a>1. Java语言</h1><h2 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h2><p>JavaSE 9.04<br>IDEA 2020.1.2</p><ul><li>JVM Java virtual machine<br>Java的跨平台性<br>Java程序 运行在 JVM，JVM运行在不同的系统中</li><li>JRE(Java runtime environment)<br>包含JVM和运行所需的核心类库</li><li>JDK（Java development kit） 安装<br>程序开发工具包，包含JRE和开发人员使用的工具（编译器等）</li></ul><p>JDK 5.0 8.0 升级较大 1.8就是8.0<br>JavaSE 桌面级（不再用） /JavaEE 企业级 Web开发 /JavaME</p><h2 id="1-2-基础命令行指令"><a href="#1-2-基础命令行指令" class="headerlink" title="1.2 基础命令行指令"></a>1.2 基础命令行指令</h2><p>系统软件(操作系统）<br>应用软件 </p><p>人机交互方式<br>图形化界面 GUI graphical user interface<br>命令行 CLI command line interface<br>algorithms+data structures=programs</p><p>MS-DOS (Microsoft Disk operating system)<br>CMD<br>启动：win R cmd<br>切换盘符： 盘符：<br>进入文件夹 cd 文件夹名<br>进入多级文件夹：cd 文件夹1\文件夹2<br>返回上级 cd..<br>回根路径 cd<br>查看文件夹：dir<br>清屏：cls<br>退出：exit<br>删除：del<br>上下箭头：历史操作命令<br>删除文件夹 ：rd  (remove dir 目录得是空的<br>创建目录：md</p><h2 id="1-3-语言特点"><a href="#1-3-语言特点" class="headerlink" title="1.3 语言特点"></a>1.3 语言特点</h2><p>机器语言<br>汇编语言<br>高级语言 </p><ul><li>面向过程 C Pascal</li><li>面向对象 Java Python Scala<br>C 开发效率差，执行效率高→  Java  →  Python<br>严格的语法，丰富的类库<br>PHP JS解释型语言</li></ul><p>舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载、多重继承等（以接口取代），增加了垃圾回收期功能</p><ul><li>面向对象：<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态</li><li>健壮性</li><li>跨平台性  JVM<br>编写（.java，在记事本就可以）、编译（.class 字节码文件 javac.exe编译器），运行（JVM运行 java.exe解释器）</li></ul><p>垃圾回收：不再使用的内存空间<br>还是存在内存泄漏和内存溢出</p><p>Java web应用开发<br>后台开发：Java  PHP Python Go Node.js</p><p>Android系统结构<br>内核 linux kernel 和硬件交互<br>libraries  C<br>android runtime  C<br>application framework Java<br>applications Java<br><img src="https://i.loli.net/2020/06/13/tgTAWRYlJnyPKvi.jpg" alt="Android系统结构.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;   <span class="comment">//定义一个类的名称，类是Java中所有源代码的基本组织单位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; <span class="comment">//内容是固定写法，代表main方法，代表程序执行的起点</span></span><br><span class="line">        System.out.println(<span class="string">"hello world!"</span>);  <span class="comment">//打印输出语句，（）中即为显示的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">编译后的<span class="class">.<span class="keyword">class</span>不包含注释</span></span><br></pre></td></tr></table></figure><h2 id="1-4-注释及API文档"><a href="#1-4-注释及API文档" class="headerlink" title="1.4 注释及API文档"></a>1.4 注释及API文档</h2><p>单行注释、多行注释<br>文档注释:可以被JDK提供的javadoc工具解析，生成一套以网页文件形式体现的该程序的说明文档<br> /**<br>文档注释<br>@author xxx<br>@version v1.0<br>*/<br>注意：多行注释不可以嵌套使用</p><p>Java API 文档<br>API application programing interface 类库</p><p>注意事项：</p><ol><li><p>java程序编写-编译-运行的过程</p><ul><li>编写，以.java结尾的源文件</li><li>编译，javac file.java 生成字节码文件</li><li>运行   java 类名  运行解释字节码文件</li></ul></li><li><p>在一个java文件中可以声明多个class，但是最多只有一个类声明为public，要求声明为public的类的类名必须与源文件同名。</p></li><li><p>程序的入口是main（）方法，格式固定<br>public static void main(String[] args) { }  //args arguments参数</p></li><li><p>输出语句<br>System.out.println();  输出数据，然后换行<br>System.out.print();</p></li><li><p>每一行执行语句都以分号结束，一行的结束不是分号就是大括号</p></li><li><p>编译的过程：编译以后，会生成一个或多个字节码文件，与源文件中所声明的类的名称相同</p></li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h1><h2 id="2-1-关键字和保留字"><a href="#2-1-关键字和保留字" class="headerlink" title="2.1 关键字和保留字"></a>2.1 关键字和保留字</h2><ul><li>Keywords<br>定义：被java语言赋予了特殊含义，用作专门用途的字符串（单词）<br>特点：所有字母都为小写</li><li>reserved word<br>现有java版本尚未使用，以后版本可能会作为关键字使用如goto，const</li></ul><h2 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h2><p>identifier</p><ol><li><p>自己定义的内容。类名、方法名、变量名、包名、接口名等</p></li><li><p>命名规则：不遵守，编译不通过</p><ul><li>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _ （下划线） </li><li>标识符不能以数字开头。 </li><li>标识符不能是关键字和保留字，但可以包含。 </li><li>严格区分大小写，长度无限制</li><li>不能加空格</li></ul></li><li><p>命名规范： 建议遵守</p><ul><li>类名：首字母大写，后面每个单词首字母大写（大驼峰式）。HelloWorld </li><li>方法名、变量名： 首字母小写，后面每个单词首字母大写（小驼峰式）。 helloWorld</li><li>常量名：多个单词组成时，字母全部大写，下划线连接 例：INTEGER_CACHE</li><li>包名：多单词所有字母小写 xxxyyyzzz</li></ul></li><li><p>取名：见名知义 提高可读性</p></li><li><p>用unicode字符集，支持中文但不要使用</p></li></ol><h2 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h2><ol><li><p>概念：</p><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中的最基本的存储单元。包含类型，变量名，存储的值</li></ul></li><li><p>作用：在内存中保存数据</p><p>注意：</p><ul><li>每个变量必须先声明，后使用</li><li>使用变量名来访问这块区域的数据</li><li>变量的作用域：定义在一对｛｝内</li><li>变量只有在其作用域内才有效 </li><li>同一个作用域内，不能定义重名的变量</li></ul></li><li><p>使用</p><ul><li>格式 数据类型 变量名 = 变量值；</li></ul></li><li><p>变量按数据类型分：</p><ul><li>基本数据类型 <ul><li>整数型 byte（1byte=8bit -128~127） short int（默认）long</li><li>浮点型 float double(双精度，默认) 有些小数也无法精确表示</li><li>字符型 char</li><li>布尔型 boolean</li></ul></li><li>引用数据类型 <ul><li>数组 [ ] array</li><li>类 class   字符串也属于class</li><li>接口 interface<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> myAge = <span class="number">20</span>;  <span class="comment">//默认使用</span></span><br><span class="line">System.out.println(myAge);</span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">323134L</span> ;<span class="comment">//必须以l或L结尾</span></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">127</span> ; <span class="comment">//-127~128 </span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">1.5F</span> ;<span class="comment">//4byte,范围比long还大，以f或F结尾</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.声明一个字符 </span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>; <span class="comment">//2byte,用'',只能有一个字符</span></span><br><span class="line"><span class="comment">//2.转义字符</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'\n'</span> ;  <span class="comment">//换行符</span></span><br><span class="line">c2 = <span class="string">'\t'</span>;</span><br><span class="line">System.out.print(<span class="string">"hello"</span> + c2);</span><br><span class="line">System.out.println(<span class="string">"你好world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.unicode值来表示字符型常量</span></span><br><span class="line"><span class="keyword">char</span> c6 = <span class="string">'\u0043'</span>;</span><br><span class="line">System.out.println(c6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.还可以用ACISS玛</span></span><br><span class="line">        <span class="keyword">char</span> c7 = <span class="number">97</span>  <span class="comment">//输出a  开发中非常少年</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔型 boolean</span></span><br><span class="line"><span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(bb1);</span><br><span class="line"><span class="keyword">boolean</span> isMarried = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">"你就不能参加\"单身\"party了，\n很遗憾"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"哈哈"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int（默认）</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>ﬂoat</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table></li></ul></li></ul></li><li><p>按照声明位置 成员变量vs局部变量</p></li><li><p>基本数据类型之间的运算规则</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型之间的运算规则：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">前提：这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 自动类型提升：</span></span><br><span class="line"><span class="comment">    结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</span></span><br><span class="line"><span class="comment">byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特别的：当byte、char、short三种类型的变量做运算时，结果为int型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 强制类型转换：</span></span><br><span class="line"><span class="comment">使用强转符</span></span><br><span class="line"><span class="comment">可能导致精度损失</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">129</span>;</span><br><span class="line"><span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//byte b2 = b1 + i1;</span></span><br><span class="line"><span class="keyword">int</span> i2 = b1 + i1;</span><br><span class="line"><span class="keyword">long</span> l1 = b1 + i1;</span><br><span class="line">System.out.println(i2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f = b1 + i1;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = s1;</span><br><span class="line">System.out.println(d1);<span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***************特别地*********************</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;<span class="comment">//会转换成a的ASCII码97  </span></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i4 = c1 + i3;</span><br><span class="line">System.out.println(i4);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> cc = (<span class="keyword">char</span>)(<span class="number">2</span>+<span class="string">'A'</span>);  <span class="comment">//输出C ASCII码加两位</span></span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c2  = c1 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c3 = c1 + b2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s3 = b2 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s4 = b1 + b2;//编译不通过</span></span><br><span class="line"><span class="comment">//****************************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">12.9</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)d1;  <span class="comment">//12 强转符，截断，损失精度</span></span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b1); <span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.编码情况</span></span><br><span class="line"><span class="keyword">long</span> <span class="number">1</span> = <span class="number">123123</span>;  </span><br><span class="line">System.out.println(l);<span class="comment">//没有报错，实际是个int型</span></span><br><span class="line"><span class="comment">//long l1 = 121111111111111111111;   超出int范围就编译失败</span></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">121111111111111111111L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="comment">//float f1 = 12.3;   编译失败，相当于把double转为float，一定要加f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.情况2</span></span><br><span class="line"><span class="comment">//整型常量默认为int 浮点型默认为double</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//byte b1 = b + 1;  编译失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//float f1 = b + 12.3; 编译失败</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>String类型的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  String类型变量的使用</span></span><br><span class="line"><span class="comment">  1.属于引用数据类型</span></span><br><span class="line"><span class="comment">  2.使用"" 字符串</span></span><br><span class="line"><span class="comment">  3.String可以和8种基本数据类型做运算且运算只能是连接运算 +</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String s1 = <span class="string">"hello world!"</span>;</span><br><span class="line">  System.out.println(s1);</span><br><span class="line">  String s2 = <span class="string">"a"</span>;</span><br><span class="line">  String s3 = <span class="string">""</span>;  <span class="comment">//长度没有限制，不同于char一定要有一个字符</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1001</span>;</span><br><span class="line">  String numStr = <span class="string">"学号："</span>;</span><br><span class="line">  String info = numStr + num;  <span class="comment">//连接语法，输出的是Spring</span></span><br><span class="line">  <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">  String info1 = b1 + info;</span><br><span class="line">  System.out.println(info);</span><br><span class="line">  System.out.println(info1);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//----------------------</span></span><br><span class="line">  <span class="comment">//练习1</span></span><br><span class="line">  <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">  String str = <span class="string">"hello"</span>; </span><br><span class="line">  System.out.println(c + num2 + str); <span class="comment">//107hello  A:65</span></span><br><span class="line">  System.out.println(c + str + num2); <span class="comment">//ahello10</span></span><br><span class="line">  System.out.println(c + (num2 + str));<span class="comment">//a10hello</span></span><br><span class="line">  System.out.println((c + num2) + str);<span class="comment">//107hello</span></span><br><span class="line">  System.out.println(str+ num2 + c); <span class="comment">//hello10a</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//练习2</span></span><br><span class="line">  <span class="comment">//输出**   \t 为table</span></span><br><span class="line">  System.out.println(<span class="string">"* *"</span>);</span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);   <span class="comment">//93 两个char相加会转成int</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">"\t"</span> + <span class="string">'*'</span>);<span class="comment">//只有前面的+运算是string就会传递</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">"*"</span>); <span class="comment">//51*</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + (<span class="string">'\t'</span> + <span class="string">'*'</span>));  </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//String无法强转为int</span></span><br><span class="line">  <span class="comment">//int num1 = (int)str1  编译不通过</span></span><br><span class="line">  <span class="keyword">int</span> num1 = Integer.parseInt(str1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>进制转换（了解）</p><p>原码 反码 补码（计算机底层存储的）</p><p>二进制  0b 或0B开头<br>十进制<br>八进制 以0开头<br>十六进制 0x或 0X开头  A-F不区分大小写</p></li></ol><h2 id="2-4-运算符"><a href="#2-4-运算符" class="headerlink" title="2.4 运算符"></a>2.4 运算符</h2><h3 id="2-4-1-算术运算符"><a href="#2-4-1-算术运算符" class="headerlink" title="2.4.1 算术运算符"></a>2.4.1 算术运算符</h3><p>+  正号 加<br>-  负号 减<br>*<br>/<br>% mod<br>++  自增1<br>--  自减1<br>+  连接符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AriTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 除号：/</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> result1 = num1 / num2;</span><br><span class="line">        System.out.println(result1); <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">int</span> result2 = num1/num2*num2;</span><br><span class="line">        System.out.println(result2); <span class="comment">//10 </span></span><br><span class="line">        <span class="keyword">double</span> result3 = num1/num2; <span class="comment">//2.0 相当于把整形2赋值给double</span></span><br><span class="line">        <span class="keyword">double</span> result4 = num1/num2 + <span class="number">0.0</span>; <span class="comment">//2.0</span></span><br><span class="line">        System.out.println(result4);</span><br><span class="line">        <span class="keyword">double</span> result5 = num1/(num2+<span class="number">0.0</span>);</span><br><span class="line">        System.out.println(result5); <span class="comment">//2.4 相当于int/double</span></span><br><span class="line">        <span class="keyword">double</span> result6 = (<span class="keyword">double</span>)num1/num2; <span class="comment">//2.4 把num1强转</span></span><br><span class="line">        System.out.println(result6);</span><br><span class="line">        <span class="keyword">double</span> result7 = (<span class="keyword">double</span>)(num1/num2); <span class="comment">//2.0 把int型的2强转</span></span><br><span class="line">        System.out.println(result7);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//%:mod运算</span></span><br><span class="line">        <span class="comment">//结果的负号与被模数的符号相同</span></span><br><span class="line">        <span class="comment">//开发中，判断是否能除尽</span></span><br><span class="line">        <span class="keyword">int</span> m1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m1 % n1 = "</span> + m1 % n1 );</span><br><span class="line">        <span class="keyword">int</span> m2 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m2 % n2 = "</span> + m2 % n2);</span><br><span class="line">        <span class="keyword">int</span> m3 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m3 % n3 = "</span> + m3 % n3 );</span><br><span class="line">        <span class="keyword">int</span> m4 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n4 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m4 % n4 = "</span> + m4 % n4 );</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//（前）++ ：先自增1，然后再运算   运算可以是赋值之外的运算</span></span><br><span class="line">        <span class="comment">//（后）++ ：先运算，后自增1</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = ++a1;  <span class="comment">//先a1+1 再赋值给b1</span></span><br><span class="line">        <span class="keyword">int</span> a2 = <span class="number">10</span>;    <span class="comment">//先把10赋值给b2，再自增1</span></span><br><span class="line">        <span class="keyword">int</span> b2 = a2++;</span><br><span class="line">        System.out.println(<span class="string">"a1 = "</span>+ a1 + <span class="string">",b1 = "</span> + b1 ); <span class="comment">//a1 = 11,b1 = 11</span></span><br><span class="line">        System.out.println(<span class="string">"a2 = "</span>+ a2 + <span class="string">",b2 = "</span> + b2 ); <span class="comment">//a1 = 11,b1 = 10</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">        s1++;</span><br><span class="line">        System.out.println(s1);  <span class="comment">//11  自增1 不会改变变量自身的数据类型</span></span><br><span class="line">        <span class="keyword">byte</span> bb1 = <span class="number">127</span>;</span><br><span class="line">        bb1++;</span><br><span class="line">        System.out.println(bb1);  <span class="comment">//-128  二进制+1</span></span><br><span class="line">        <span class="comment">//（前）-- 先自减1 后运算</span></span><br><span class="line">        <span class="comment">//（后）-- 先运算 后自减1</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b4 = --a4;</span><br><span class="line">        System.out.println(<span class="string">"a4="</span>+a4+<span class="string">",b4="</span>+b4); <span class="comment">//a4=9,b4=9</span></span><br><span class="line">    </span><br><span class="line">         <span class="comment">/*练习：随意给出一个整数，打印显示它的个位数，十位数，百位数的值。 格式如下： 数字xxx的情况如下： 个位数： 十位数： 百位数：</span></span><br><span class="line"><span class="comment">         例如： 数字153的情况如下： 个位数：3 十位数：5 百位数：1 */</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">153</span>;</span><br><span class="line">        <span class="keyword">int</span> hun = num/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (num-hun*<span class="number">100</span>)/<span class="number">10</span>;  <span class="comment">//  num%100/10</span></span><br><span class="line">        <span class="keyword">int</span> one = num - <span class="number">100</span>*hun-<span class="number">10</span>*ten; <span class="comment">// num%10  %1是0</span></span><br><span class="line">        System.out.println(<span class="string">"个位数："</span>+one+<span class="string">'\n'</span>+<span class="string">" 十位数："</span>+ten+<span class="string">" 百位数："</span>+hun);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-赋值运算符"><a href="#2-4-2-赋值运算符" class="headerlink" title="2.4.2 赋值运算符"></a>2.4.2 赋值运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 支持连续赋值</span><br><span class="line"> = 两边数据类型不一致 可以使用自动类型转换或强制类型转换</span><br><span class="line"> 包括：= += -= *= /= %=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetValueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//赋值符号：=</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j1 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//连续赋值</span></span><br><span class="line">        <span class="keyword">int</span> i2,j2;</span><br><span class="line">        i2 = j2 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">10</span>,j3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------------</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        num1 += <span class="number">2</span>;<span class="comment">// 12 相当于 num1 = num1+2</span></span><br><span class="line">        num1 %= <span class="number">5</span>;   <span class="comment">//不会改变变量本身的数据类型</span></span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="comment">// 开发中，如果希望变量实现+2的操作，有几种加法（前提：int num=10）</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        num = num + <span class="number">2</span>;</span><br><span class="line">        num += <span class="number">2</span>; <span class="comment">//推荐</span></span><br><span class="line">        <span class="comment">//实现 +1</span></span><br><span class="line">        <span class="comment">//前两种 以及 ++运算 （推荐） 经常使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        i *= <span class="number">0.1</span>;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 0  不改变数据类型  0.1截断</span></span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习2</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">        n *= m++;  <span class="comment">//m=3,n=6</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习3</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        n1 += (n1++) + (++n1);</span><br><span class="line">        System.out.println(n1); <span class="comment">//n = 32  10+10+12  (++n1)中的n1已经是11了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-比较运算符"><a href="#2-4-3-比较运算符" class="headerlink" title="2.4.3 比较运算符"></a>2.4.3 比较运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较运算符</span></span><br><span class="line"><span class="comment">== != &gt; &lt; &gt;= &lt;= instanceof</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.比较运算符的结果是boolean类型</span></span><br><span class="line"><span class="comment">2.区分== 和  =</span></span><br><span class="line"><span class="comment">3.== 和 != 不仅可以用于数值类型数据之间，还可以用在其他引用类型的变量之间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        System.out.println(i==j);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(i=j);   <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(b1==b2);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(b1=b2);   <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-逻辑运算符"><a href="#2-4-4-逻辑运算符" class="headerlink" title="2.4.4 逻辑运算符"></a>2.4.4 逻辑运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符</span></span><br><span class="line"><span class="comment">&amp;逻辑与 &amp;&amp;短路与 |逻辑或 || 短路或 !逻辑非 ^ 逻辑异或</span></span><br><span class="line"><span class="comment">1.用于boolean型变量之间的运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//区分&amp;  和&amp;&amp;</span></span><br><span class="line">        <span class="comment">//运算结果相同；当符号左边是true时，都会执行右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边是false时,只有&amp;会执行右边的计算</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        b1 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b1 &amp; (num1++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">true</span>;</span><br><span class="line">        b2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b2&amp;&amp; (num2++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="comment">//b2已经是false了，短路与后面的语句就不再执行了，前面是true就要执行</span></span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//区分：| 与 ||</span></span><br><span class="line">        <span class="comment">//运算结果相同，当符号左边是false时，二者都会执行符号右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边为true时，只有|继续执行右边语句</span></span><br><span class="line">        <span class="comment">//开发中推荐使用&amp;&amp; ||</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-位运算符"><a href="#2-4-5-位运算符" class="headerlink" title="2.4.5 位运算符"></a>2.4.5 位运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位运算符 （了解）</span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.操作整型数据</span></span><br><span class="line"><span class="comment">2.&lt;&lt; 每向左移1位 相当于*2   左移 末尾补0</span></span><br><span class="line"><span class="comment">  &gt;&gt; 每向右移1位 相当于/2   右移 根据原先的符号，左边补1或0</span></span><br><span class="line"><span class="comment">  &gt;&gt;&gt; 无符号右移 都用00在前面补  负数会变成正数</span></span><br><span class="line"><span class="comment">  &amp;  二进制各位进行与运算 0位false 1为true</span></span><br><span class="line"><span class="comment">  |  二进制各位进行或运算</span></span><br><span class="line"><span class="comment">  ^  二进制各位进行异或运算</span></span><br><span class="line"><span class="comment">  ~  二进制码按补码各位取反</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  最高效方式计算 2*8？   2&lt;&lt;3 或 8&lt;&lt;1 乘法就是两个8相加或者8个2相加，底层运算更复杂</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">21</span>;</span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;2: "</span>+(i&lt;&lt;<span class="number">2</span>));  <span class="comment">//84</span></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;3: "</span>+(i&lt;&lt;<span class="number">3</span>));  <span class="comment">//168</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;27: "</span>+(i&lt;&lt;<span class="number">27</span>)); <span class="comment">//符号改变 int 32bit 二进制的第一位是符号位，1是负数，0是正数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习： 交换两个变量的值</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一:定义临时变量（推荐）</span></span><br><span class="line">        <span class="keyword">int</span> temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：好处：不用定义临时变量 节省内存空间</span></span><br><span class="line">        <span class="comment">//弊端：相加可能超出存储范围，只能用于数值型</span></span><br><span class="line">        num1 = num1 + num2;</span><br><span class="line">        num2 = num1 - num2;</span><br><span class="line">        num1 = num1 - num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：位运算符  m = (m^n)^n 也只能用于数值类型</span></span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        num2 = num1 ^ num2;</span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-6-三元运算符"><a href="#2-4-6-三元运算符" class="headerlink" title="2.4.6 三元运算符"></a>2.4.6 三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符 三目运算符</span></span><br><span class="line"><span class="comment">1.格式： (条件表达式)?表达式1 ： 表达式2</span></span><br><span class="line"><span class="comment">2.条件表达式的结果是boolean</span></span><br><span class="line"><span class="comment">    true执行表达式1</span></span><br><span class="line"><span class="comment">    false执行表达式2</span></span><br><span class="line"><span class="comment">3.表达式1和表达式2 能够统一为一个类型，才能用一个新的变量去接收</span></span><br><span class="line"><span class="comment">4.可以嵌套使用</span></span><br><span class="line"><span class="comment">5.凡是三元运算符，都可以改写为if-else；相反则不行</span></span><br><span class="line"><span class="comment">6.如果既可以用三元运算符又可以使用if-else 优先用三元运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TripleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取两个整数的较大值</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> max = (m&gt;n)? m : n;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        <span class="keyword">double</span> max0 = (m&gt;n)? <span class="number">2</span> : <span class="number">1.0</span>;</span><br><span class="line">        n=<span class="number">12</span>;</span><br><span class="line">        String maxStr = (m&gt;n)? <span class="string">"big"</span> : ((m == n)? <span class="string">"equal"</span>:<span class="string">"small"</span>);  <span class="comment">//三元运算符作为一个表达式 里面输出的是String</span></span><br><span class="line">        System.out.println(maxStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取三个数的最大值</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">43</span>;</span><br><span class="line">        <span class="keyword">int</span> max1 = (n1&gt;n2)? n1 : n2;</span><br><span class="line">        <span class="keyword">int</span> max2 = (max1&gt;n3)? max1 : n3;</span><br><span class="line">        System.out.println(max2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-运算符的优先级"><a href="#2-4-7-运算符的优先级" class="headerlink" title="2.4.7 运算符的优先级"></a>2.4.7 运算符的优先级</h3><p>了解</p><h2 id="2-5-程序流程控制"><a href="#2-5-程序流程控制" class="headerlink" title="2.5 程序流程控制"></a>2.5 程序流程控制</h2><h3 id="2-5-0-使用Scanner获取数据"><a href="#2-5-0-使用Scanner获取数据" class="headerlink" title="2.5.0 使用Scanner获取数据"></a>2.5.0 使用Scanner获取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何从键盘获取不同类型的变量：需要Scanner类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">具体实现步骤：</span></span><br><span class="line"><span class="comment">1. 导包： import java.util.Scanner; java.util为包名，Scanner为类</span></span><br><span class="line"><span class="comment">2.Scanner的实例化</span></span><br><span class="line"><span class="comment">3.调用Scanner类的相关方法，来获取指定类型的变量</span></span><br><span class="line"><span class="comment">注意：如果输入的数据类型与要求不匹配时，会报异常导致程序终止运行 InputMisMatchException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//Scanner为类 scan为标识符 new为关键字 System.in为从系统输入 新建了以个对象</span></span><br><span class="line">        System.out.println(<span class="string">"input your name:"</span>);  <span class="comment">//char以string替代，没有char相关方法</span></span><br><span class="line">        String name = scan.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">"input your age:"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = scan.nextInt(); <span class="comment">//nextInt为Scanner类中的方法之一</span></span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(<span class="string">"input your weight:"</span>);</span><br><span class="line">        <span class="keyword">double</span> weight = scan.nextDouble();</span><br><span class="line">        System.out.println(weight);</span><br><span class="line">        System.out.println(<span class="string">"Are u single?(true/false)"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> status = scan.nextBoolean();</span><br><span class="line">        System.out.println(status);</span><br><span class="line">        System.out.println(<span class="string">"input your gender"</span>);</span><br><span class="line">        String gender = scan.next();</span><br><span class="line">        <span class="keyword">char</span> genderChar = gender.charAt(<span class="number">0</span>); <span class="comment">//变量名.charAt()  获取索引位置0上的字符</span></span><br><span class="line">        System.out.println(genderChar);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-1-分支结构"><a href="#2-5-1-分支结构" class="headerlink" title="2.5.1 分支结构"></a>2.5.1 分支结构</h3><h4 id="if-else-if-else-结构"><a href="#if-else-if-else-结构" class="headerlink" title="if- else if -else 结构"></a>if- else if -else 结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分支结构中的if else（条件判断结构）</span></span><br><span class="line"><span class="comment">三种结构</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式1)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式2) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式3) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式3&#125;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式n</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//举例1</span></span><br><span class="line">        <span class="keyword">int</span> heartBeats = <span class="number">79</span>;</span><br><span class="line">        <span class="keyword">if</span> (heartBeats &lt;<span class="number">60</span> || heartBeats&gt;<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"further check"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"healthy"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例2</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"anime"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"porn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例3</span></span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"false"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"teen"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"grownup"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.else 结构是可选的,如果没有结果可以不输出</span></span><br><span class="line"><span class="comment">2.针对条件表达式：</span></span><br><span class="line"><span class="comment">&gt;如果多个条件表达式之间是互斥关系（没有交集），判断和执行语句上下位置无所谓</span></span><br><span class="line"><span class="comment">&gt;如果有交集，需要根据实际情况考虑清楚应该讲那个结构声明在上面</span></span><br><span class="line"><span class="comment">&gt;如果有包含关系，通常情况下要将范围小的放在范围大的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input your grade:(0-100)"</span>);</span><br><span class="line">        <span class="keyword">int</span> grade = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (grade == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"BMW automobile"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">80</span> &amp;&amp; grade&lt;=<span class="number">99</span> )&#123;</span><br><span class="line">            <span class="comment">//不能写作 80&lt;grade&lt;=99,前面一步结果为boolean，不能和后面的int进行比较</span></span><br><span class="line">            System.out.println(<span class="string">"iPhone Xs Max"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">60</span> &amp;&amp; grade&lt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"iPad Pro"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2：将输入的三个数排序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.if-else的结构是可以嵌套的</span></span><br><span class="line"><span class="comment">2.嵌套结构中的大括号是可以省略的（还是加上好，可能经常要在其中加入其他语句），只执行if下的1句</span></span><br><span class="line"><span class="comment">3.else 就近原则 和最近的if配对</span></span><br><span class="line"><span class="comment">4.if(条件)，判断条件中如果变量是boolean，=号也能编译通过</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iftest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input three integral:(finish with enter)"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> c = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a&gt;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;a)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;b)&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;b)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;a)&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：彩票问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> ranNum = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"input your lottery number:"</span>);</span><br><span class="line">        <span class="keyword">int</span> lotNum = scan.nextInt();</span><br><span class="line">        System.out.println(ranNum);</span><br><span class="line">        <span class="keyword">int</span> rTen = ranNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> rOne = ranNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lTen = lotNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lOne = lotNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (lTen == rTen &amp;&amp; lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$10000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne &amp;&amp; lOne == rTen)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$3000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rTen || lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$1000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne || lOne == rTen) &#123;</span><br><span class="line">            System.out.println(<span class="string">"$500"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：如何获取一个随机数：10-99</span></span><br><span class="line"><span class="keyword">double</span> value = Math.random();<span class="comment">//区间[0.0,1.0)</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">System.out.println(num)</span><br><span class="line"><span class="comment">//公式  [a,b]: (int)(Math.random()*(b-a+1)+a)</span></span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if(String的变量名.equals());</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input height(cm) wealth(10Grand) appearance(true/false:"</span>);</span><br><span class="line">        <span class="keyword">double</span> height = scan.nextDouble();</span><br><span class="line">        <span class="keyword">int</span> wealth = scan.nextInt();</span><br><span class="line">        <span class="keyword">boolean</span> appearance = scan.nextBoolean();</span><br><span class="line">        <span class="keyword">if</span> (height&gt;<span class="number">180.0</span> &amp;&amp;wealth&gt;<span class="number">1000</span> &amp;&amp; appearance== <span class="keyword">true</span> )&#123;</span><br><span class="line">            System.out.println(<span class="string">"marry him"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height&gt;<span class="number">180.0</span> ||wealth&gt;<span class="number">1000</span> || appearance== <span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"think twice"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"find a better one"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch - case结构"></a>switch - case结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.格式</span></span><br><span class="line"><span class="comment">switch(表达式)&#123;</span></span><br><span class="line"><span class="comment">case 常量1：</span></span><br><span class="line"><span class="comment">     执行语句1；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">case 常量2：</span></span><br><span class="line"><span class="comment">     执行语句2；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">default:</span></span><br><span class="line"><span class="comment">      执行语句n;</span></span><br><span class="line"><span class="comment">      //break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.说明：</span></span><br><span class="line"><span class="comment">&gt; 根据switch表达式的值，依次匹配case中的常量。一旦匹配成功，进入相应case中结构中</span></span><br><span class="line"><span class="comment">调用执行语句，调用完毕后，则仍然继续向下执行其他case中的执行语句，直到遇到break</span></span><br><span class="line"><span class="comment">或者switch结构结束。</span></span><br><span class="line"><span class="comment">&gt; break,在switch case结构中，一旦遇到就跳出，是可选的</span></span><br><span class="line"><span class="comment">&gt; switch 结构中的表达式只能是如下的6中数据类型之一：</span></span><br><span class="line"><span class="comment">byte short int char String（JDK7.0新增） 枚举类型(JDK 5.0新增)</span></span><br><span class="line"><span class="comment">&gt;case后面只能声明常量，不能声明范围</span></span><br><span class="line"><span class="comment">&gt;default 类似于if - else中的 else ，也是可选的，而且位置是灵活的</span></span><br><span class="line"><span class="comment">&gt;能用switch case都能用 if else，反之不行</span></span><br><span class="line"><span class="comment">&gt;写分支结构时，二者都可用时，switch中的表达式的取值不多的情况下，有限选择 switch case，因为switch case 的执行效率稍高，实际开发中用if else较多。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"zero"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"one"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"two"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"three"</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvertCapital</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input the character"</span>);</span><br><span class="line">        String character = scan.next();</span><br><span class="line">        <span class="keyword">char</span> cha = character.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (cha) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                System.out.println(<span class="string">"A"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                System.out.println(<span class="string">"B"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                System.out.println(<span class="string">"C"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                System.out.println(<span class="string">"D"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                System.out.println(<span class="string">"E"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//说明：如果执行语句相同，可以合并</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">78</span>;</span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//练习 ：一年中的第几天 但是怎么限定每个月的值的取值范围呢</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input month(1-12) &amp; date(0-31)"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> date = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> days = <span class="number">0</span>;             <span class="comment">//定义变量要初始化值</span></span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"wrong"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"this is the "</span>+ days +<span class="string">" days of 2019"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的year："</span>);</span><br><span class="line">        <span class="keyword">int</span> year = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的month："</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的day："</span>);</span><br><span class="line">        <span class="keyword">int</span> day = scan.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量来保存总天数</span></span><br><span class="line">        <span class="keyword">int</span> sumDays = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!= <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sumDays += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sumDays += <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sumDays += day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"2019年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日是当年的第"</span> + sumDays + <span class="string">"天"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-循环结构"><a href="#2-5-3-循环结构" class="headerlink" title="2.5.3 循环结构"></a>2.5.3 循环结构</h3><p>在某些条件满足的情况下，反复执行特定代码</p><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">For循环的使用</span><br><span class="line">一、循环结构的4个要素</span><br><span class="line">1.初始条件</span><br><span class="line">2.循环条件  boolean 类型</span><br><span class="line">3.循环体</span><br><span class="line">4.迭代条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、for 循环的结构</span><br><span class="line">for（1；2；4）&#123;</span><br><span class="line">    3;</span><br><span class="line">&#125;</span><br><span class="line">执行过程1&gt;2&gt;3&gt;4&gt;2&gt;3&gt;4&gt;...&gt;2 退出循环</span><br><span class="line"></span><br><span class="line">i在循环外是不可调用的</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class ForTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for(int i&#x3D;1;i &lt;&#x3D; 5;i++)&#123;</span><br><span class="line">            System.out.println(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;练习：</span><br><span class="line">        int num &#x3D; 1;  &#x2F;&#x2F;要在外面初始化值，不然可能后面无法输出 如果是if else则为二选一，一定会有值，可以不用初始化，如果只是if没有else也要初始化。</span><br><span class="line">        for(System.out.print(&#39;a&#39;);num &lt;&#x3D; 3;System.out.print(&#39;c&#39;),num++)&#123;</span><br><span class="line">            System.out.print(&#39;b&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;输出结果：abcbcbc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历100内的偶数,输出所有偶数的和，输出偶数的个数</span><br><span class="line">class TraverseEven &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int sum &#x3D; 0;  &#x2F;&#x2F;sum要在循环外创建，不然每次进循环就又赋值0了</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;&#x3D; 100; i++) &#123;</span><br><span class="line">            if (i % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum +&#x3D; i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);  &#x2F;&#x2F;写在for语句外面</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;练习</span><br><span class="line">    class ForExer&#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            for(int i&#x3D;1;i&lt;151;i++)&#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                if(i%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    System.out.print(&quot; foo&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if(i%5&#x3D;&#x3D;0)&#123;  &#x2F;&#x2F;这里不用else if 因为既是3也是5的倍数</span><br><span class="line">                    System.out.print(&quot; biz&quot;);</span><br><span class="line">                &#125;else if(i%7&#x3D;&#x3D;0) &#123;</span><br><span class="line">                    System.out.print(&quot; baz&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&#39;\n&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>break 关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break关键字的使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入正整数m,n  求最大公约数和最小公倍数  </span></span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input 2 positive integral:"</span>);</span><br><span class="line">    <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> max = (m&gt;n)?m:n;</span><br><span class="line">    <span class="keyword">int</span> min = (m&lt;n)?m:n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max; i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"greatest common divisor is "</span>+i);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//一旦执行到break 就跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = min; i&lt;=m*n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"least common multiple is "</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while循环的使用</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">while(2)&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.写while循环不能少了迭代条件，可能导致死循环。</span></span><br><span class="line"><span class="comment">2.避免死循环</span></span><br><span class="line"><span class="comment">3.for和while可以相互转换</span></span><br><span class="line"><span class="comment">4.初始条件的作用域不同</span></span><br><span class="line"><span class="comment">5.初始化条件复杂的就用while</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法：有限性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1 2 3 4 2 3 4...2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do - while"></a>do - while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do-while循环的使用</span></span><br><span class="line"><span class="comment">1;</span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125; while(2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1  3 4  2 3 4  2 3 4 ...2</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.do while循环至少会执行一次循环体</span></span><br><span class="line"><span class="comment">2.使用 for while 较多，do while 较少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;<span class="number">101</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(sum + (<span class="keyword">char</span>)count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while-true-和-for"><a href="#while-true-和-for" class="headerlink" title="while(true) 和 for( ; ; )"></a>while(true) 和 for( ; ; )</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘读入不确定个数的整数，并判断正负数的个数，输入为0时结束程序</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不再限制循环次数的结构：for(;;) while(true)</span></span><br><span class="line"><span class="comment">结束循环的方式：</span></span><br><span class="line"><span class="comment">1.循环条件返回 false</span></span><br><span class="line"><span class="comment">2.在循环体中执行break</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> postive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> negative =<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"input"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;<span class="comment">//while的判断条件是一个boolean</span></span><br><span class="line">            <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                postive++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                negative++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;System.out.println(postive);</span><br><span class="line">        System.out.println(negative);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.5.x嵌套循环</span></span><br><span class="line"><span class="comment">/* 嵌套循环的使用</span></span><br><span class="line"><span class="comment">1.定义：将一个循环结构A声明在另一个循环结构B的结构体中，就构成了嵌套循环</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">内层循环；</span></span><br><span class="line"><span class="comment">外层循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.内层循环结构遍历一遍，相当于外层循环体执行了一次</span></span><br><span class="line"><span class="comment">4.外层m次，内层n次，内层循环体执行了m*n次</span></span><br><span class="line"><span class="comment">5.外层控制行数，内层控制列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=<span class="number">4</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=<span class="number">5</span>-m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印菱形 lozenge diamond</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileExer1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">5</span>-i;k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下半部分 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套循环的应用：九九乘法表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplicationTable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">"*"</span>+j+<span class="string">"="</span>+(i*j)+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法优化：输出质数"><a href="#算法优化：输出质数" class="headerlink" title="算法优化：输出质数"></a>算法优化：输出质数</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100以内所有质数的输出</span></span><br><span class="line"><span class="comment">//自己做的 （没有引入boolean,错误做法）</span></span><br><span class="line"><span class="comment">//流程控制结构的的使用+算法逻辑（难点）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(i-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于10的情况</span></span><br><span class="line">            <span class="comment">//if (i%2!=0&amp;&amp;i%3!=0&amp;&amp;i%5!=0&amp;&amp;i%7!=0)&#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                    count0++;</span><br><span class="line">                    <span class="keyword">break</span>;  <span class="comment">//使用break来结束循环，就能够只打印一次</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count0);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;<span class="comment">//遍历100以内的自然数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt; i;j++)&#123;<span class="comment">//j:被i去除</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;    <span class="comment">//i=2直接没进入内循环，所以是true就输出了</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对质数问题的优化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=i-<span class="number">1</span> ;j++)&#123;</span><br><span class="line">          <span class="comment">//  for(int j = 2;j &lt;=Math.sqrt(i) ;j++)&#123;</span></span><br><span class="line">                <span class="comment">//优化2 开根号 使用两个数进行因式分解，就只要考虑小的一段，开根号为因式分解的中间临界点</span></span><br><span class="line">                <span class="comment">//对本身是质数的自然数有效</span></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//break;   //优化1：只对非质数有效的优化</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(i);</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">        <span class="comment">//衡量优化的指标  31511ms 优化1后 3560ms 优化2 后214ms</span></span><br><span class="line">        <span class="comment">//不再输出只计数       40144ms 优化1后 5064ms 优化2 后41ms</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出质数的实现方式二；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        label: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=Math.sqrt(i) ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> label;   <span class="comment">//一旦被除尽，就进入下一个i；</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   凡是能执行到吃步骤的就都是质数</span></span><br><span class="line">                System.out.println(i);<span class="comment">//是我一开始想尝试的做法</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ; <span class="comment">//199</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-continue-的用法【带标签】"><a href="#break-continue-的用法【带标签】" class="headerlink" title="break continue 的用法【带标签】"></a>break continue 的用法【带标签】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break coutinue 的使用</span></span><br><span class="line"><span class="comment">break： switch case</span></span><br><span class="line"><span class="comment">          循环结构：  结束当前循环</span></span><br><span class="line"><span class="comment">continue: 循环结构    结束当次循环</span></span><br><span class="line"><span class="comment">相同：</span></span><br><span class="line"><span class="comment">break 和continue后不能加语句，无法编译</span></span><br><span class="line"><span class="comment">默认跳出包裹此关键字最近一层的循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//break;  //123</span></span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//123567910</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       l: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// break l;   //结束指定标识的一层循环结构  123</span></span><br><span class="line">                    <span class="keyword">continue</span> l;  <span class="comment">//  结束指定标识的一层循环结构的当次循环 123123123123</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>衡量一个功能代码的优劣势：</p><ol><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率与低存储：<strong>时间复杂度</strong>、空间复杂度（衡量算法的好坏）</li></ol>]]></content>
    
    <summary type="html">
    
      Java基础：基本语法
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://paranoiddemon.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>香港选举制度</title>
    <link href="https://paranoiddemon.github.io/blog/posts/hk-election.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/hk-election.html</id>
    <published>2020-06-10T16:22:46.000Z</published>
    <updated>2020-06-30T01:09:23.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、特首选举："><a href="#一、特首选举：" class="headerlink" title="一、特首选举："></a>一、特首选举：</h1><p>1、特首 </p><p>任期5年，可以连任一届，获得601票以上。</p><p>候选人需获得选委会150人以上提名（提前三个月）</p><p>2、选委会</p><p><img src="https://i.loli.net/2020/06/11/dknejl2QoXs7Nri.png" alt="选委会构成"></p><p>由20多万专业界别登记的选民选出，选举委员会委员是以个人身份投票，而选举委员会每届任期五年</p><p>其中宗教界界别分组（60名委员）是由六个指定团体提名产生。<br>香港地区全国人民代表大会代表（36名委员）及立法会议员（70名委员）为当然委员。<br>117个（港九57+新界60）经由民选区议员相互选出而产生</p><p> 选委会的代表性和有权选举的人存在诸多<strong>不合理</strong>之处：</p><blockquote><p>例如代表中小学教师的教育界有80,643人有权投票，可选出30个选举委员；与此同时，渔农界只有154人有权投票，却可选出60个选举委员。<br>有些组别例如会计界，只要是注册会计师就可以投票，全港近三万名名会计从业员中有26,001人是选民。但到了保险界，却只有保险公司的东主才可以投票，于是全港近五万名的保险从业员都没有投票权，只有131名东主是选民。至于为什么会计界和保险界有不同做法，是没有解释的。<br>回到刚才提到的渔农界，那154人和现役渔民或农民不一定有关，也不是由他们所选出，而是由规定的一系列渔农业团体作为代表。至于为什么是这些团体而不是另一些团体，这些团体是否有代表性，新成立的团体要怎样才可能为被指定的团体，同样是没有解释的。</p></blockquote><h1 id="二、立法会选举"><a href="#二、立法会选举" class="headerlink" title="二、立法会选举"></a>二、立法会选举</h1><p>职责：</p><ul><li>制定、修改和废除法律（参见：三读）</li><li>控制公共开支</li><li>监察政府工作</li><li>审核、通过政府的财政预算</li><li>接受香港居民申诉</li><li>同意终审法院法官和高等法院首席法官的任免</li><li>如立法会全体议员四分之一联合动议，指控行政长官有严重违法或渎职行为而不辞职的话，立法会可通过进行调查，并委托终审法院首席法官组成独立调查委员会进行调查。如调查委员会调查后认为有足够证据构成对行政长官的指控，立法会会对是否提出弹劾案进行表决。如果立法会以全体议员三分之二通过的话，可提出弹劾行政长官案，并报请中央人民政府决定。</li></ul><p>立法会共70议席</p><p>任期4年</p><p>35个议席：五个选区直选（300多万选民）</p><p>香港岛6席：中西区、湾仔区、东区、南区</p><p>九龙西6席：油尖旺区、深水埗区、九龙城区</p><p>九龙东5席：黄大仙区、观塘区</p><p>新界西9席：荃湾区、屯门区、元朗区、葵青区、离岛区</p><p>新界东9席：北区、大埔区、沙田区、西贡区</p><p>35个议席：29个功能界别</p><p>其中：</p><p>其他26界：26席</p><p>劳工界：3席</p><p>区议会第一界别（区议员互选1席）</p><p>区议会第二界别超级区议员（5席）由300多万选区选民直选，但是候选人提名（15个以上）及参选都来自区议会</p><p><img src="https://i.loli.net/2020/06/11/p9lvrZMm6tqkTUO.png" alt="立法会部分议席"></p><h1 id="三、区议会选举"><a href="#三、区议会选举" class="headerlink" title="三、区议会选举"></a>三、区议会选举</h1><p>任期4年，就市民日常生活事务向政府提供意见，没有立法权</p><p>18个选区</p><p>479席（每年会变化）当然议席27，民选议席452</p><p>将会影响：立法会中6席，选委会中117席的选出</p><p>2,943,842名登记选民投票，投票率71.23%     </p><p>57.44%vs41.32%：民主派vs建制派（实际票数）</p>]]></content>
    
    <summary type="html">
    
      香港选举制度概要
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql学习笔记</title>
    <link href="https://paranoiddemon.github.io/blog/posts/mysql-select.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/mysql-select.html</id>
    <published>2020-06-08T16:22:46.000Z</published>
    <updated>2020-06-30T01:09:41.615Z</updated>
    
    <content type="html"><![CDATA[<p>B站随意找的视频教程：<a href="https://www.bilibili.com/video/BV12b411K7Zu?p=1" target="_blank" rel="noopener">MySQL 基础+高级篇- 数据库 -sql -尚硅谷</a><br>MySql8.0：<a href="https://zhuanlan.zhihu.com/p/37152572" target="_blank" rel="noopener">MySql安装</a><br>Navicat 15： <a href="https://www.ghpym.com/navicatpatchdoc.html" target="_blank" rel="noopener">Navicat注册机</a></p><p>DB/DBMS</p><p>Sql/MySql</p><table><thead><tr><th>分类</th><th>中文</th><th>语法</th></tr></thead><tbody><tr><td>DQL（Data Query Language）</td><td>数据查询语言</td><td>select</td></tr><tr><td>DML  (Data Manipulate Language)</td><td>数据操作语言</td><td>insert 、update、delete</td></tr><tr><td>DDL（Data Define Languge）</td><td>数据定义语言</td><td>create、drop、alter</td></tr><tr><td>TCL（Transaction Control Language）</td><td>事务控制语言</td><td>commit、rollback</td></tr></tbody></table><h1 id="DQL（Data-Query-Language）"><a href="#DQL（Data-Query-Language）" class="headerlink" title="DQL（Data Query Language）"></a>DQL（Data Query Language）</h1><h2 id="进阶1：基础查询"><a href="#进阶1：基础查询" class="headerlink" title="进阶1：基础查询"></a>进阶1：基础查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表 FROM 表名；</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.查询列表可以是：表中的字段、常量值、表达式、函数</span><br><span class="line">2.查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#1. 查询单个字段</span><br><span class="line">SELECT email FROM employees;</span><br><span class="line"></span><br><span class="line">#2. 查询多个字段</span><br><span class="line">SELECT email, last_name FROM employees;</span><br><span class="line"></span><br><span class="line">#3. 查询全部字段</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">#4. 查询常量值</span><br><span class="line">SELECT 100;</span><br><span class="line">SELECT &#39;john&#39;;</span><br><span class="line"></span><br><span class="line">#5.查询表达式</span><br><span class="line">SELECT 100*98;</span><br><span class="line"></span><br><span class="line">#6.查询函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line">#7.字段起别名</span><br><span class="line">&#x2F;*</span><br><span class="line">1.便于理解</span><br><span class="line">2.如果要查询的字段有重名，可以区分开</span><br><span class="line">*&#x2F;</span><br><span class="line">#方式一：使用as</span><br><span class="line">SELECT 100*98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#案例：查询salary，显示结果为out put,含有关键词或者空格</span><br><span class="line">SELECT salary  AS &quot;out put&quot; FROM employees;</span><br><span class="line"></span><br><span class="line">#8.去重</span><br><span class="line"></span><br><span class="line">#案例：查询员工表中中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line">#9.+号的作用</span><br><span class="line">&#x2F;*</span><br><span class="line">mysql中的+号：</span><br><span class="line">仅仅只有一个功能：运算符</span><br><span class="line"></span><br><span class="line">1.两个操作数都为数值型，则做加法运算</span><br><span class="line">  SELECT 100+90; </span><br><span class="line"></span><br><span class="line">2.其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">- SELECT &#39;123&#39;+90;   如果转换成功，则继续做加法运算</span><br><span class="line">- SELECT &#39;John&#39;+90;  如果转换失败，则将字符型数值转换成0</span><br><span class="line">- SELECT null +10;   只要其中一方为null，则结果肯定为null；</span><br><span class="line">*&#x2F;</span><br><span class="line"># 查询员工们和姓连接过程一个字段</span><br><span class="line">SELECT last_name+first_name AS 姓名 FROM employees;</span><br><span class="line">SELECT CONCAT(last_name,&#39; &#39;, first_name) AS 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#显示表的结构，并查询全部数据</span><br><span class="line">DESC departments;</span><br><span class="line">SELECT * FROM departments;</span><br><span class="line"></span><br><span class="line">#显示出employees的全部列，各个列之间用逗号连接，列头为output</span><br><span class="line">SELECT </span><br><span class="line">IFNULL(commission_pct,0) AS 奖金率,commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line">#----------------------------------------------------</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name,&#39;,&#39;,IFNULL(commission_pct,0)) AS output</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><h2 id="进阶2：条件查询"><a href="#进阶2：条件查询" class="headerlink" title="进阶2：条件查询"></a>进阶2：条件查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名 </span><br><span class="line">WHERE 筛选条件；</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1. 按条件表达式筛选</span><br><span class="line">条件运算符：&gt; &lt; &#x3D; !&#x3D; or &lt;&gt; &gt;&#x3D; &lt;&#x3D;</span><br><span class="line"></span><br><span class="line">2.按逻辑表达式筛选</span><br><span class="line">逻辑运算符：用于连接条件表达式</span><br><span class="line">&amp;&amp; || ！</span><br><span class="line">and or not</span><br><span class="line">and: 两个条件都为true</span><br><span class="line">or: 一个条件为true，则为true</span><br><span class="line">not：相反</span><br><span class="line"></span><br><span class="line">3.模糊查询</span><br><span class="line">like</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.按条件表达式筛选</span><br><span class="line">#案例1：查询工资&gt;12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;12000;</span><br><span class="line">#案例2：查询部门编号不等于90的员工名和部门编号</span><br><span class="line">SELECT</span><br><span class="line">last_name, department_id</span><br><span class="line">FROM </span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id!&#x3D;90 ;</span><br><span class="line"></span><br><span class="line">#2.按逻辑表达式筛选</span><br><span class="line"></span><br><span class="line">#案例1：查询工资在10000-20000的员工名、工资、及奖金</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name) AS &#39;name&#39;,</span><br><span class="line">salary,</span><br><span class="line">IFNULL(commission_pct,0) AS comission</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;&#x3D;10000 AND salary&lt;&#x3D;20000;</span><br><span class="line"></span><br><span class="line">#案例2：查询部门编号不在90-110之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&lt;90 OR department_id&gt;110 OR salary&gt;&#x3D;15000;</span><br><span class="line"></span><br><span class="line">#3.模糊查询</span><br><span class="line">&#x2F;*</span><br><span class="line">like </span><br><span class="line">特点：</span><br><span class="line">一般和通配符搭配使用</span><br><span class="line">通配符：</span><br><span class="line">% 任意多个字符，包含0个字符</span><br><span class="line">_ 任意单个字符</span><br><span class="line">\ 转义字符</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">is not null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.like</span><br><span class="line"></span><br><span class="line">#案例1：查询员工名中包含字符a的员工信息</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;%a%&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name like &#39;__n_l%&#39;;</span><br><span class="line"></span><br><span class="line">#案例3：查询员工名中第二个字符为_的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;_a_%&#39; ESCAPE &#39;a&#39;;</span><br><span class="line"># 效果一样last_name LIKE &#39;_\_%&#39;;</span><br><span class="line"></span><br><span class="line">#2. between and </span><br><span class="line">#case 1: 查询员工编号在100-120的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id BETWEEN 100 AND 120; #包含临界值，不可以颠倒临界值顺序</span><br><span class="line"></span><br><span class="line">#3. in</span><br><span class="line">&#x2F;*</span><br><span class="line">判断某字段的值是否属于in列表中的某一项</span><br><span class="line">-提高简洁度</span><br><span class="line">-in列表的值类型必须一致或兼容</span><br><span class="line">-不支持通配符的使用</span><br><span class="line">*&#x2F;</span><br><span class="line"># case：查询员工的工种编号是IT_PROG、AD_VP、AD_PRES中的员工名和工种编号</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id &#x3D;&#39;IT_PROG&#39; OR job_id&#x3D;&#39;AD_VP&#39; OR job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line">#-------------------------------------------------------</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id IN(&#39;IT_PROG&#39;,&#39;AD_VP&#39; ,&#39;AD_PRES&#39;);</span><br><span class="line"></span><br><span class="line">#4 is null&#x2F; is not null</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x3D; &lt;&gt;不能判断null值，is&#x2F; is not 才可以判断null值</span><br><span class="line">*&#x2F;</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL;</span><br><span class="line"></span><br><span class="line">#安全等于&lt;&#x3D;&gt; 判断null值和普通数值</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct &lt;&#x3D;&gt; NULL;</span><br><span class="line"></span><br><span class="line">#case2:查询工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary &lt;&#x3D;&gt; 12000;</span><br><span class="line"></span><br><span class="line">#查询员工号为176的姓名和部门号和年薪</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) AS &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id&#x3D;176;</span><br><span class="line"></span><br><span class="line">#测试题</span><br><span class="line">#1.查询没有奖金，且工资小于18000的salary,last_name</span><br><span class="line">SELECT</span><br><span class="line">salary,</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL </span><br><span class="line">AND salary&lt;18000;</span><br><span class="line"></span><br><span class="line">#2.查询employees表中，job_id不为‘IT’或者工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">job_id &lt;&gt;&#39;IT&#39; OR salary&#x3D;12000;</span><br><span class="line"></span><br><span class="line">#3.查询departments的结构</span><br><span class="line">DESC departments;</span><br><span class="line"></span><br><span class="line">#4.查询departments表中涉及到了哪些位置编号</span><br><span class="line">SELECT DISTINCT</span><br><span class="line">location_id</span><br><span class="line">FROM</span><br><span class="line">departments;</span><br><span class="line"></span><br><span class="line">&#x2F;*5.SELECT * FROM employees 和</span><br><span class="line">SELECT * FROM employees WHERE commission_pct like&#39;%%&#39; AND last name like &#39;%%&#39;</span><br><span class="line">结果是否一样，原因</span><br><span class="line">不一样，值存在null的情况</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="进阶3：排序查询"><a href="#进阶3：排序查询" class="headerlink" title="进阶3：排序查询"></a>进阶3：排序查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SELECT * from employees;</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">SELECT 列表</span><br><span class="line">FROM 表</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">ORDER BY 排序列表 DESC&#x2F;ASC</span><br><span class="line"> 1.ORDER BY子句支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line"> 2.ORDER BY子句一般是放在查询语句的最后面，limit子句除外</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#case 1：查询员工信息，要求工资从高到低排序</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">DESC;</span><br><span class="line"></span><br><span class="line">#------------------------------升序是默认的，可以不用写出</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">ASC;</span><br><span class="line"></span><br><span class="line">#case 2：查询部门编号&gt;&#x3D;90的员工信息，按入职时间的先后（筛选条件）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&gt;&#x3D;90</span><br><span class="line">ORDER BY</span><br><span class="line">hiredate;</span><br><span class="line"></span><br><span class="line">#case 3：按年薪的高低显示员工信息（按表达式排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class="line"></span><br><span class="line">#case 4:按年薪的高低显示员工信息（按别名排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC;</span><br><span class="line"></span><br><span class="line">#case 5:按姓名的长度显示员工的姓名和工资（按函数）</span><br><span class="line">SELECT </span><br><span class="line">LENGTH(last_name),last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"></span><br><span class="line">#case 6:查询员工信息，先按工资排序，再按员工编号排序(按多个字段排序）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY salary ASC,employee_id DESC;</span><br><span class="line"></span><br><span class="line">#1.查询员工的姓名、部门号、年薪，按年薪降序，按姓名升序</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC,last_name;</span><br><span class="line"></span><br><span class="line">#2.选择工资不在8000-17000的员工的姓名和工资，按工资降序</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">#salary&lt;8000 OR salary&gt;17000</span><br><span class="line">#NOT (salary BETWEEN 8000 AND 17000) </span><br><span class="line">salary NOT BETWEEN 8000 AND 17000</span><br><span class="line">ORDER BY</span><br><span class="line">salary DESC;</span><br><span class="line"></span><br><span class="line">#3.查询邮箱中包含e的员工信息，按邮箱字节数降序，按部门号升序</span><br><span class="line">SELECT </span><br><span class="line">*,LENGTH(email)</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">email like &#39;%e%&#39;</span><br><span class="line">ORDER BY</span><br><span class="line">LENGTH(email) DESC,department_id;</span><br></pre></td></tr></table></figure><h2 id="进阶4：常见函数"><a href="#进阶4：常见函数" class="headerlink" title="进阶4：常见函数"></a>进阶4：常见函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">概念：一组逻辑语句封装在方法体重，对外暴露方法名</span><br><span class="line">1.隐藏了实现细节</span><br><span class="line">2.提高代码的重用性</span><br><span class="line">调用：SELECT 函数名(实参列表) [from 表]；如果调用了表内的字段</span><br><span class="line">特点：1.函数名 2.函数功能</span><br><span class="line">函数可以自定义</span><br><span class="line">分类：</span><br><span class="line">1.单行函数：CONCAT、LENGTH，IFNULL等，做处理使用</span><br><span class="line">2.分组函数：做统计使用，传一组值，返回一个值，又称为统计函数、聚合函数、组函数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1. 单行函数</span><br><span class="line">&#x2F;*</span><br><span class="line">字符函数 concat substr instr length lpad rpad upper lower trim replace</span><br><span class="line">数学函数  ceil floor truncate mod round</span><br><span class="line">日期函数 now curdate curtime year month day hour minute second  str_to_date date_format monthname</span><br><span class="line">其他函数 version datebase user</span><br><span class="line">流程控制函数 if case的两种用法</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、字符函数</span><br><span class="line"></span><br><span class="line">#1.length 获取参数值的字节个数</span><br><span class="line">SELECT LENGTH(&#39;john&#39;);</span><br><span class="line">SELECT LENGTH(&#39;啊&#39;); #utf8字符集，汉字占3个字节</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39; #展示字符集</span><br><span class="line"></span><br><span class="line">#2.concat 拼接字符串</span><br><span class="line">SELECT CONCAT(last_name,&#39;_&#39;,first_name) &#39;name&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.upper、lower 改变大小写</span><br><span class="line">SELECT UPPER(&#39;john&#39;);</span><br><span class="line">SELECT LOWER(&#39;jOHN&#39;);</span><br><span class="line"># e.g. 将姓大写，名小写,然后拼接</span><br><span class="line">SELECT</span><br><span class="line">CONCAT(UPPER(last_name),&#39; &#39;,LOWER(first_name)) &#39;NAME&#39; #函数可以嵌套</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#4.substr、substring 截取字符串</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,3);   #索引都是从1开始的， nihilation</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,1,3); #ann 索引，长度</span><br><span class="line"></span><br><span class="line">#case: 姓名中首字符大写，其他小写后用_拼接</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2)))</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line">#5.instr 返回子串在字符串中的第一次出现的起始索引</span><br><span class="line">SELECT INSTR(&#39;annihilation&#39;,&#39;nihilation&#39;);</span><br><span class="line"></span><br><span class="line">#6.trim  去除两端的字符</span><br><span class="line">SELECT LENGTH(TRIM(&#39;  annihilation  &#39;));</span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aannihilationa&#39;); #输出nnihilation</span><br><span class="line"></span><br><span class="line">#7.lpad 用指定字符左填充指定长度</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #--------annihilation</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,2,&#39;-&#39;) AS output;  #an</span><br><span class="line"></span><br><span class="line">#8.rpad 用指定字符右填充指定长度</span><br><span class="line">SELECT RPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #annihilation--------</span><br><span class="line"></span><br><span class="line">#9.replace 替换</span><br><span class="line">SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;z&#39;);</span><br><span class="line"></span><br><span class="line">#二、数学函数</span><br><span class="line"></span><br><span class="line">#round 四舍五入</span><br><span class="line">SELECT ROUND(1.65);  #2</span><br><span class="line">SELECT ROUND(1.45);  #1</span><br><span class="line">SELECT ROUND(-1.65); #-2</span><br><span class="line">SELECT ROUND(1.657,2); #1.66 保留2位</span><br><span class="line"></span><br><span class="line">#ceil 向上取整，返回&gt;&#x3D;该参数的最小整数</span><br><span class="line">SELECT CEIL(1.52);  #2</span><br><span class="line">SELECT CEIL(1.00);  #1 </span><br><span class="line">SELECT CEIL(-1.02); #-1 </span><br><span class="line"></span><br><span class="line">#floor 向下取证，返回&lt;&#x3D;该参数的最大整数</span><br><span class="line">SELECT FLOOR(9.8)   #9</span><br><span class="line">SELECT FLOOR(-9.8)  #-10</span><br><span class="line"></span><br><span class="line">#truncate 截断</span><br><span class="line">SELECT TRUNCATE(1.699,1)  #1.6</span><br><span class="line"></span><br><span class="line">#mod 取余</span><br><span class="line">&#x2F;*</span><br><span class="line">mod(a,b): a-a&#x2F;b*b  (其中a&#x2F;b是取整数）</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT MOD(10,3); #1</span><br><span class="line">SELECT 10%3;</span><br><span class="line">SELECT MOD(-10,3); #-1  根据被除数的正负，取正负</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、日期函数</span><br><span class="line"></span><br><span class="line">#now 返回当前系统日期及时间 2020-06-10 17:10:22</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#curdate 返回当前系统日期   2020-06-10</span><br><span class="line">SELECT CURDATE(); </span><br><span class="line"></span><br><span class="line">#curtime 返回当前时间   17:12:15</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">#获取指定的部分：年月日、时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT YEAR(&#39;1900-1-1&#39;);</span><br><span class="line">SELECT YEAR(hiredate) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MONTH(NOW());     # 6</span><br><span class="line">SELECT MONTHNAME(NOW()); # June</span><br><span class="line"></span><br><span class="line">#DAY(date),HOUR(time),MINUTE(time),SECOND(time)</span><br><span class="line"></span><br><span class="line">#STR_TO_DATE(str,format) 将字符串转换成指定格式的日期</span><br><span class="line">&#x2F;*格式符</span><br><span class="line">%Y  20xx</span><br><span class="line">%y  xx</span><br><span class="line">%m  01,02...12</span><br><span class="line">%c  1,2...12</span><br><span class="line">%d  01,02...31</span><br><span class="line">%H  01,02...24</span><br><span class="line">%h  01,02...12</span><br><span class="line">%i  00,01...59</span><br><span class="line">%s  00,01...69</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT STR_TO_DATE(&#39;1900-01-01&#39;,&#39;%Y-%m-%d&#39;);</span><br><span class="line"></span><br><span class="line">#case 查询入职日期1992-4-3的员工信息</span><br><span class="line">SELECT *FROM employees</span><br><span class="line">WHERE hiredate&#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br><span class="line"></span><br><span class="line">#DATE_FORMAT(date,format) 将日期转换成字符</span><br><span class="line">SELECT DATE_FORMAT(&#39;2008&#x2F;1&#x2F;1&#39;,&#39;%Y年%m月%d日&#39;);</span><br><span class="line"></span><br><span class="line">#四、其他函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line"></span><br><span class="line">#五、流程控制函数</span><br><span class="line">#1.if函数：if else的效果</span><br><span class="line">SELECT IF(10&gt;5,&#39;大&#39;,&#39;小&#39;) ; #expr1条件表达式，true返回expr2，false返回expr3</span><br><span class="line">SELECT last_name,commission_pct, IF(commission_pct is null,&#39;no&#39;,&#39;yes&#39;) # if前面要加逗号</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.case函数的使用一：switch case的效果</span><br><span class="line">&#x2F;*</span><br><span class="line">java中 </span><br><span class="line">switch(变量或表达式）&#123;</span><br><span class="line">       case 常量1：语句1；break；</span><br><span class="line"> ...</span><br><span class="line"> default:语句n;break;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">mysql中   判断等值</span><br><span class="line">  CASE 要判断的变量或表达式</span><br><span class="line">WHEN 常量1 THEN 要显示的值1或语句1； </span><br><span class="line">WHEN 常量2 THEN 要显示的值2或语句2；</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ELSE 要显示的值n或语句n；</span><br><span class="line">  END </span><br><span class="line">#如果是在select后面，case作为表达式，只能显示为值，而不能用语句</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*案例：查询员工的工资，要求</span><br><span class="line">部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示为原工资</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,department_id,</span><br><span class="line">  CASE department_id</span><br><span class="line">WHEN  30 THEN salary*1.1   #是个值，不用加分号</span><br><span class="line">WHEN  40 THEN salary*1.2 </span><br><span class="line">WHEN  50 THEN salary*1.3</span><br><span class="line">ELSE  salary</span><br><span class="line">  END AS &#39;new salary&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.case函数的使用二：类似于多重if</span><br><span class="line">&#x2F;*</span><br><span class="line">java中：</span><br><span class="line">if(条件1）｛</span><br><span class="line">语句1；</span><br><span class="line">｝</span><br><span class="line">else if(条件2）｛</span><br><span class="line">语句2；</span><br><span class="line">｝</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">语句n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql中：</span><br><span class="line">case   #后面没有变量或表达式，判断区间</span><br><span class="line">when 条件1 then 显示值1 或语句1；</span><br><span class="line">when 条件2 then 显示值2 或语句2；</span><br><span class="line">...</span><br><span class="line">else 显示值n或语句n；</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">#案例：查询员工的工资情况</span><br><span class="line">如果工资&gt;20000，显示A</span><br><span class="line">如果工资&gt;15000，显示B</span><br><span class="line">如果工资&gt;10000，显示C</span><br><span class="line">否则D</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,</span><br><span class="line">CASE</span><br><span class="line">WHEN salary&gt;20000 THEN &#39;A&#39;   #字符串一定要加单引号</span><br><span class="line">WHEN salary&gt;15000THEN &#39;B&#39;</span><br><span class="line">WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">ELSE &#39;D&#39;</span><br><span class="line">END AS &#39;rank&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">#1.显示系统时间（时间+日期）</span><br><span class="line">SELECT NOW();</span><br><span class="line">#2.查询员工号、姓名、工资、以及工资提高20%后的结果</span><br><span class="line">SELECT employee_id,last_name,salary,salary*1.2 as &#39;new salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">#3.将员工的姓名按首字母排序，写出姓名长度</span><br><span class="line">SELECT last_name,length(last_name) as length,substr(last_name,1,1) as initial</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY initial;</span><br><span class="line">#区别于order by last_name 效果不一样，先首字母，后第二个字母。按initial排序，后面是随机的</span><br><span class="line"></span><br><span class="line">#4.做一个查询，产生下面结果</span><br><span class="line">&#x2F;*&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span><br><span class="line">Dream Salary</span><br><span class="line">K_ing earns 24000.00 monthly but wants 72000.00</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT CONCAT(last_name,&#39; earns &#39;,salary,&#39; monthly but wants &#39;, salary*3) as &#39;Dream Salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;&#39;K_ing&#39; and salary&#x3D;24000;</span><br><span class="line"></span><br><span class="line">#5. 使用case when，按照下面的条件</span><br><span class="line"> job     grade</span><br><span class="line">AD_PRES    A</span><br><span class="line">ST_MAN     B</span><br><span class="line">IT_PROG    C</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id job, </span><br><span class="line">CASE job_id</span><br><span class="line">WHEN &#39;AD_PRES&#39; THEN &#39;A&#39;  #字符串一定要加引号</span><br><span class="line">WHEN &#39;ST_MAN&#39;  THEN &#39;B&#39;</span><br><span class="line">WHEN &#39;IT_PROG&#39; THEN &#39;C&#39;</span><br><span class="line">END AS grade</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、分组函数</span><br><span class="line">&#x2F;*</span><br><span class="line">功能：用作统计使用，又称聚合函数、统计函数、组函数</span><br><span class="line">分类</span><br><span class="line">sum</span><br><span class="line">avg</span><br><span class="line">max</span><br><span class="line">min</span><br><span class="line">count：计算非空的</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.忽略null</span><br><span class="line">2.和dinstinct搭配使用</span><br><span class="line">3.和分组函数一同查询的字段要求是group by后的字段</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.简单使用</span><br><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT min(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,min(salary),MAX(salary),COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.参数支持类型</span><br><span class="line">&#x2F;*</span><br><span class="line">sum avg：数值型</span><br><span class="line">max min count ：字符型也可以做参数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#3.是否忽略null</span><br><span class="line">&#x2F;*</span><br><span class="line">null+任何数为null</span><br><span class="line">sum avg:忽略</span><br><span class="line">max min count ：忽略</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#4.搭配distinct  去重</span><br><span class="line">SELECT </span><br><span class="line">SUM(DISTINCT salary),  #中间没有逗号</span><br><span class="line">SUM(salary) </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary) FROM employees;</span><br><span class="line"></span><br><span class="line">#5.count函数的详细介绍</span><br><span class="line">SELECT COUNT(*) FROM employees; #统计行数</span><br><span class="line">SELECT COUNT(1) FROM employees; #加了1列1，统计行数</span><br><span class="line">SELECT COUNT(2） FROM employees; </span><br><span class="line">SELECT COUNT(&#39;abc&#39;) FROM employees; #加了1列常量，统计行数</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">效率：</span><br><span class="line">MYISAM存储引擎，count（*）效率高</span><br><span class="line">INNODB存储引擎，count（*）和count（1）相似，比count（字段）高</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#6.和分组函数一同查询的字段有限制</span><br><span class="line">SELECT AVG(salary),employee_id FROM employees; # employee_id的值无意义</span><br><span class="line"></span><br><span class="line">#查询最大入职时间和最小入职时间相差天数</span><br><span class="line">SELECT DATEDIFF(NOW(),&#39;1996-09-12&#39;) #前面减后面 8673</span><br><span class="line"></span><br><span class="line"># 查询部门编号为90的员工个数</span><br><span class="line">SELECT COUNT(department_id) #不能用count（department_id&#x3D;90）,结果和count(department_id)一样</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&#x3D;90;</span><br></pre></td></tr></table></figure><h2 id="进阶5：分组查询"><a href="#进阶5：分组查询" class="headerlink" title="进阶5：分组查询"></a>进阶5：分组查询</h2><figure class="highlight plain"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#查询每个部门的平均工资</span><br><span class="line">&#x2F;*</span><br><span class="line">SELECT column(要出现在group by后面, group_function()</span><br><span class="line">FROM table</span><br><span class="line">[WHERE 筛选条件]</span><br><span class="line">GROUP BY  分组的列表</span><br><span class="line">[ORDER BY 字句]</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">查询列表必须特殊，要求是分组函数和group by后出现的字段</span><br><span class="line">where一定放在from后面</span><br><span class="line"></span><br><span class="line">特点：1.分组查询中的筛选条件分为两类</span><br><span class="line">| |数据源|位置|关键字|</span><br><span class="line">|---------------|----------------------|-------------------|------|</span><br><span class="line">|分组前筛选       |原始表 |group by子句前    | where|</span><br><span class="line">    |分组后筛选 |分组后的结果集  |group by子句后     | having|</span><br><span class="line"></span><br><span class="line">分组函数（max min sum avg count）做条件肯定是放在having子句中</span><br><span class="line">能用分组前筛选的，优先考虑分组前筛选</span><br><span class="line"></span><br><span class="line">2.group by子句支持表达式，单个字段，多个字段（用逗号隔开）</span><br><span class="line">3.也可以添加排序，在整个分组查询的最后</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#简单的分组查询</span><br><span class="line"># case 1:查询每个工种的最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line"># case 2：查询每个位置上的部门个数</span><br><span class="line">SELECT COUNT(DISTINCT department_id),location_id</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY location_id;</span><br><span class="line"></span><br><span class="line">#推加筛选条件</span><br><span class="line"># case 1：邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line"># case 2:查询每个领导手下有奖金的员工的最高工资</span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line">#添加复杂的筛选条件</span><br><span class="line">#案例1：查询哪个部门的员工个数&gt;2</span><br><span class="line">#a.查询每个部门的员工数</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#b.根据前面的结果进行筛选</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING COUNT(*)&gt;2;      #分号视作语句的结束，在最后面用</span><br><span class="line"></span><br><span class="line">#case 2:查询每个工种有奖金的员工最高工资&gt;12000的工种编号和最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">#case 3:查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号及最低工资</span><br><span class="line">SELECT MIN(salary), manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id </span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按表达式或函数分组</span><br><span class="line"># case：按员工姓名的长度分组，查询每一组的员工个数，筛选员工数&gt;5的</span><br><span class="line">SELECT COUNT(*),LENGTH(last_name)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY LENGTH(last_name)</span><br><span class="line">HAVING COUNT(*)&gt;5;</span><br><span class="line"></span><br><span class="line">#按多个字段分组</span><br><span class="line">#case：查询每个部门每个工种的平均工资</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id,job_id; #可以调换顺序</span><br><span class="line"></span><br><span class="line">#添加排序</span><br><span class="line">#case：查询每个部门每个工种的平均工资，并且按照平均工资高低显示</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id is NOT NULL</span><br><span class="line">GROUP BY department_id,job_id</span><br><span class="line">HAVING AVG(salary)&gt;10000     #having和group by支持别名</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#1.查询个job_id员工工资的最大值、最小值、平均值、和，按job_id升序</span><br><span class="line">SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY job_id;</span><br><span class="line"></span><br><span class="line">#2.最高最低工资的差距</span><br><span class="line">SELECT MAX(salary)-MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计入</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id is not null</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;&#x3D;6000;</span><br><span class="line"></span><br><span class="line">#4.查询所有部门的编号，员工数量和工资平均值，按平均工资降序</span><br><span class="line">SELECT department_id,COUNT(*) quantity,ROUND(AVG(salary),2) avgsal</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#5.选择具有各个job_id的员工人数</span><br><span class="line">SELECT COUNT(*),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h2 id="进阶6：连接查询"><a href="#进阶6：连接查询" class="headerlink" title="进阶6：连接查询"></a>进阶6：连接查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">含义：多表查询，当查询的字段来自于多个表时使用</span><br><span class="line">笛卡尔乘积现象：表1 m行，表2 n行，结果m*n行</span><br><span class="line"></span><br><span class="line">原因：没有有效的连接条件</span><br><span class="line">避免：添加有效的连接条件</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1.按年代分类：</span><br><span class="line">sql92标准：在mysql中仅仅支持内连接，在oracle等中支持部分外连接</span><br><span class="line">sql99标准（推荐）：支持内连接+外连接（左、右）+交叉连接</span><br><span class="line"></span><br><span class="line">2.按功能分类：</span><br><span class="line">内连接：</span><br><span class="line">等值连接</span><br><span class="line">非等值连接</span><br><span class="line">自连接</span><br><span class="line">外连接：</span><br><span class="line">左外连接</span><br><span class="line">右外连接</span><br><span class="line">全外连接</span><br><span class="line">交叉连接</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys; </span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#一、sql92标准</span><br><span class="line"></span><br><span class="line">#1.等值连接</span><br><span class="line">&#x2F;*</span><br><span class="line">a.多表等值连接为交集部分</span><br><span class="line">b.n表连接，至少要n-1个连接条件</span><br><span class="line">c.顺序无要求</span><br><span class="line">d.一般要起别名</span><br><span class="line">e.可以搭配排序、分组、筛选</span><br><span class="line">*&#x2F;</span><br><span class="line">#case 1</span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#case 2:查询员工名和对应的部门名</span><br><span class="line">SELECT last_name,department_name </span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.department_id&#x3D;departments.department_id;</span><br><span class="line"></span><br><span class="line">#2.为表起别名</span><br><span class="line">#case 查询员工名、工种号、工种名</span><br><span class="line">SELECT last_name,e.job_id,job_title #不知道job_id的来源。需要用表名限定</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id;   #如果起别名就全部要用，统一</span><br><span class="line"></span><br><span class="line">#3.两个表的顺序可以调换</span><br><span class="line">SELECT last_name,e.job_id,job_title #用一个表一行行去对另一个表</span><br><span class="line">FROM jobs j，employees e</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id</span><br><span class="line"></span><br><span class="line">#4.加筛选</span><br><span class="line"># case 1 :查询有奖金的员工名、部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND e.commission_pct is not null;</span><br><span class="line"></span><br><span class="line"># case 2:查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">SELECT city,department_name</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">AND city LIKE &#39;_o%&#39;;</span><br><span class="line"></span><br><span class="line">#5.加分组</span><br><span class="line">#case 1：查询每个城市的部门个数</span><br><span class="line">SELECT COUNT(*) amount ,city</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">GROUP BY city;</span><br><span class="line"></span><br><span class="line">#case 2:查询有奖金的每个部门的部门名和部门领导编号和该部门的最低工资</span><br><span class="line">SELECT d.department_name, d.manager_id,min(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">AND commission_pct is NOT NULL</span><br><span class="line">GROUP BY e.department_id,d.manager_id;</span><br><span class="line"></span><br><span class="line">#6.加排序</span><br><span class="line">#案例：查询每个工种的工种名和员工的个数，按员工个数降序</span><br><span class="line">SELECT job_title, COUNT(*)</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br><span class="line"></span><br><span class="line">#7.三表连接</span><br><span class="line">#case 1： 查询员工名、部门名、所在的城市</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e, departments d, locations l</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#2.非等值连接</span><br><span class="line">#case 1：查询员工的工资和工资级别</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e, job_grades g</span><br><span class="line">WHERE salary BETWEEN lowest_sal and highest_sal</span><br><span class="line">AND grade_level&#x3D;&#39;A&#39;;</span><br><span class="line"></span><br><span class="line">#3.自连接</span><br><span class="line">#case：查询员工名和上级的名称</span><br><span class="line">SELECT e.last_name,e.employee_id,m.last_name</span><br><span class="line">FROM employees e,employees m </span><br><span class="line">WHERE m.employee_id&#x3D;e.manager_id;</span><br><span class="line"></span><br><span class="line">#显示员工表的最大工资，工资平均值</span><br><span class="line">SELECT MAX(salary),AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#查询 员工表的job_id中包含a和e，a在前</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id like &#39;%a%e%&#39;</span><br><span class="line"></span><br><span class="line">#Exercise</span><br><span class="line"></span><br><span class="line">#1. 显示所有员工的姓名，部门号和部门名称。 </span><br><span class="line">SELECT last_name,e.department_id,department_name</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line">#2. 查询 90 号部门员工的 job_id 和 90 号部门的 location_id </span><br><span class="line">SELECT job_id,location_id,department_id</span><br><span class="line">FROM employees e, locations l</span><br><span class="line">WHERE department_id&#x3D;90 ;  #不用连接条件会产生笛卡尔乘积问题</span><br><span class="line">*-----------------------</span><br><span class="line">SELECT job_id,location_id,e.department_id</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;90 </span><br><span class="line">AND e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. 选择所有有奖金的员工的 last_name , department_name , location_id , city </span><br><span class="line">SELECT last_name,department_name,l.location_id,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#4. 选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line">SELECT last_name,job_id,e.department_id,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE city&#x3D;&#39;Toronto&#39;</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;   #三表连接，要写两个条件</span><br><span class="line"> </span><br><span class="line">#5.查询每个工种、每个部门的部门名、工种名和最低工资 </span><br><span class="line">SELECT j.job_id,department_name,job_title,MIN(salary)</span><br><span class="line">FROM jobs j, departments d,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#6.查询每个国家下的部门个数大于 2 的国家编号 </span><br><span class="line">SELECT country_id, department_id,count(*)</span><br><span class="line">FROM locations l,departments d</span><br><span class="line">WHERE l.location_id&#x3D;d.location_id</span><br><span class="line">GROUP BY country_id</span><br><span class="line">HAVING count(*)&gt;2;</span><br><span class="line">#7.择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格 式 </span><br><span class="line">&#x2F;*</span><br><span class="line">employees Emp# manager Mgr# </span><br><span class="line">kochhar   101  king    100 </span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT e.last_name employees,e.employee_id &#39;Emp#&#39;,m.last_name manager,m.employee_id &#39;Mgr#&#39;</span><br><span class="line">FROM employees e, employees m</span><br><span class="line">WHERE e.manager_id&#x3D;m.employee_id</span><br><span class="line">AND e.employee_id&#x3D;101;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MySql基础
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Wish You A Speedy Recovery</title>
    <link href="https://paranoiddemon.github.io/blog/posts/speedy-revovery.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/speedy-revovery.html</id>
    <published>2020-05-21T14:22:46.000Z</published>
    <updated>2020-07-06T00:50:29.085Z</updated>
    
    <content type="html"><![CDATA[<p>最近陪我妈动手术期间的一些记录。</p><ol><li>健康是首要的。倒不是想活多久，只是没有赴死的勇气，只能期盼活着期间能不用遭遇这些痛苦。生病的痛苦是最直接易感知的，打针、开刀都令人不寒而栗，放弃一部分人的完整性是接受治疗的前提。医院称得上是人类尊严平均水平最低的场所。</li></ol><ol start="2"><li>不生孩子。做父母的责任之重，不是我所能承受，这是出于自私；孩子会发现存在的痛苦真相，我想必只会是孩子成长过程中的阴影，而无法给与他们任何引导，这是出于责任。</li></ol><ol start="3"><li>努力赚钱。医院治疗相当花钱，一直以来爸妈对我期待很高，而我到现在为止负起的责任实在太少，应该很令他们失望。</li></ol><ol start="4"><li>找机会去一趟精神科。心理状态似乎又开始变坏了，越发憎恶自己。以前蛮好的，不知道这些年是怎么一步步变成今天这样的。徒劳地寻找不存在的答案不过是自我折磨。前不久看《阳光普照》大哭，完全受不了阿豪妈妈伤心，所以不论怎样一定会好好生活的。</li></ol><ol start="5"><li>从最近的生活经验和所见所闻再次验证了这一真理：生活果然就是永恒的疲惫啊。</li></ol><p>祝大家健康。</p>]]></content>
    
    <summary type="html">
    
      祝你早日健康
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>2020/05</title>
    <link href="https://paranoiddemon.github.io/blog/posts/thoughtsof202005.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/thoughtsof202005.html</id>
    <published>2020-05-20T16:22:46.000Z</published>
    <updated>2020-06-29T04:57:09.665Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>矮墙在面前颓然倒下<br>为风牺牲</p><p>2.<br>未来是尚未被复写的过去<br>黑色方碑刻着一切</p><p>3.<br>意识是痛苦的证明</p><p>4.<br>贫穷是恒久不灭的心悸</p><p>5.<br>想去Isle of Skye，观看灯塔</p><p>6.<br>被抛掷于此间的时候<br>漆黑，喑哑，无力<br>却充分感知到自我的存在<br>意识中徒劳地呼喊<br>没有一个上帝会来搭救<br>清醒后痛苦才汹涌地袭来<br>旁观甚至需要勇气</p><p>7.<br>摄影是被完全滥用的技术，人类从此失去了真诚</p><p>8.<br>阅读不提供宽慰、解脱和形而上的解答，但感到平静</p><p>9.<br>拉普拉斯妖 is watching you</p><p>10.<br>将来你必须从头开始，一点点挣脱，所有已经捆绑在身上的，绞索</p><p>11.<br>你相信什么？</p>]]></content>
    
    <summary type="html">
    
      胡言乱语inbox，查重率&lt;2%
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>政治哲学/Jonathan Wolff</title>
    <link href="https://paranoiddemon.github.io/blog/posts/political-philosophy.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/political-philosophy.html</id>
    <published>2020-05-09T16:22:46.000Z</published>
    <updated>2020-06-30T01:09:30.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、自然状态"><a href="#一、自然状态" class="headerlink" title="一、自然状态"></a>一、自然状态</h1><h2 id="霍布斯"><a href="#霍布斯" class="headerlink" title="霍布斯"></a>霍布斯</h2><p>人的平等、人连续不断的追求幸福，即满足他们未来可能具有的任何欲求的权力</p><p>资源的稀缺，人对他人的恐惧和猜疑</p><p>人对人的战争</p><p>自然法（集体理性与个体理性，博弈论中的囚徒困境）</p><h2 id="洛克"><a href="#洛克" class="headerlink" title="洛克"></a>洛克</h2><p>存在着道德，自然法的约束，刚开始自然状态下资源不是稀缺的</p><h2 id="卢梭"><a href="#卢梭" class="headerlink" title="卢梭"></a>卢梭</h2><p>人主要受自我保存的欲望驱使</p><p>人类动机中的同情和怜悯</p><p>自然状态是不可持续的</p><p>人是在文明社会中才变得道德堕落的</p><h2 id="无政府主义"><a href="#无政府主义" class="headerlink" title="无政府主义"></a>无政府主义</h2><p>如何区分一个政府和一个依靠其他约束运行的社会</p><p>无政府主义的国家是你可以自由选择加入的</p><h1 id="二、国家证成"><a href="#二、国家证成" class="headerlink" title="二、国家证成"></a>二、国家证成</h1><h2 id="两个角度"><a href="#两个角度" class="headerlink" title="两个角度"></a>两个角度</h2><h3 id="洛克-自愿主义"><a href="#洛克-自愿主义" class="headerlink" title="洛克(自愿主义)"></a>洛克(自愿主义)</h3><p>认为人是生而自由、平等、独立的，他们并非自然而然地处于某个人的权威之下（普通人/主权者），合法的权力关系必定是人类创造和构建的。除了正当的惩罚外，唯有通过表达同意，你才会身处权威之下。</p><p>国家的正当性需诉诸同意和社会契约</p><h3 id="边沁（功利主义）"><a href="#边沁（功利主义）" class="headerlink" title="边沁（功利主义）"></a>边沁（功利主义）</h3><p>国家相较于其他方案，使得社会的幸福总量最大化，才具有正当性</p><h2 id="国家的特征（理想情况）"><a href="#国家的特征（理想情况）" class="headerlink" title="国家的特征（理想情况）"></a>国家的特征（理想情况）</h2><ul><li><p>在一定领域内垄断合法暴力，所有合法的武力都由国家来实施和监管（马克思韦伯）</p></li><li><p>为其领土内的所有人提供保护</p></li></ul><h2 id="证成国家"><a href="#证成国家" class="headerlink" title="证成国家"></a>证成国家</h2><p>需要证明普遍的政治义务，即有服从法律、纳税、保卫国家、爱国等的义务，讨论主要集中于服从法律的义务。</p><p>普遍的政治义务不是指在所有时间服从所有法律（也需要考虑法律的正当性等），而是原则这个国家范围内的所有人（当然也存在特权者）有道德义务遵守法律与指令。</p><h2 id="社会契约（自愿主义）"><a href="#社会契约（自愿主义）" class="headerlink" title="社会契约（自愿主义）"></a>社会契约（自愿主义）</h2><h3 id="自愿的义务"><a href="#自愿的义务" class="headerlink" title="自愿的义务"></a>自愿的义务</h3><p>洛克的自愿主义：需要每个人以某种方式赋予了国家凌驾于其上的权威，而仅仅说国家符合我的利益并不能推出国家的正当性。</p><h3 id="历史的同意"><a href="#历史的同意" class="headerlink" title="历史的同意"></a>历史的同意</h3><p>但在实践中，是历史中真实存在这样一份契约吗。或者契约真实存在，那对子孙后代又有何约束力？原始契约学说无法说明这一问题。</p><h3 id="默示同意"><a href="#默示同意" class="headerlink" title="默示同意"></a>默示同意</h3><p>洛克：</p><blockquote><p>每个人只要占有或享用了任何政府的任何一部分领地，就因此表达了他的默示同意。从而在他与整个政府里的任何人一同享用期间，有义务服从该政府的法律</p></blockquote><p>休谟的反驳：</p><blockquote><p>对于一个贫困的、不懂外语和外国风俗、靠着自己所得的微薄工资度日的农民或工匠，我们能够认真地说他对于是否离开自己的国家具有选择的自由吗？如果能够这样说的话，那么，对于一个睡梦中被人搬到船上、若要离船则只有跳海淹死的人，我们也可以同样宣称，他继续留在船上就表示他自愿地同意了接受船主的统治。</p></blockquote><p>卢梭：在一个“自由的”国家才能这样说，其言下之意是，在一个自由国家，做出不同意行为（离开国家的领土）是非常简单的。</p><blockquote><p>因为否则的话，家庭、财产、无处容身、生活的需要以及暴力等等，都可以不顾一个居民的意愿如何而把他留滞在国内，这时候，单凭他的居住就不能在断定他是同意契约还是破坏契约了。</p></blockquote><p>在现代国家中显然默示同意的条件难以被满足</p><h3 id="假想的同意"><a href="#假想的同意" class="headerlink" title="假想的同意"></a>假想的同意</h3><p>如果身处自然状态没那么我们会做些，想象没有国家的状态，如果我们是理性的，会尽可能的重新签订社会契约，创立国家。</p><p>反驳：假想的同意行为并不是同意行为，这和社会契约所要求的同意不一致，只能表明某类国家值得同意，是国家的特征而非我的同意提供了正当性，不是对国家的自愿主义辩护，而更像是一种功利主义辩护。</p><p>重构假想同意：我们虽未明确表示同意，但是在某种意义上可以说我们大部分人会同意，有同意国家的倾向，而假想契约的是使我们意识到我们的真实想法。但这是一种很弱意义上的同意，在其他法律或道德语境中，未表达出来甚至尚未得到承认的同意倾向很少具有约束力。</p><p>而且存在无政府主义者在假想后仍然反对国家，明确的表达了不同意。</p><h3 id="无政府主义-1"><a href="#无政府主义-1" class="headerlink" title="无政府主义"></a>无政府主义</h3><p>如果我们找不到一种办法从一些可接受的前提来证成国家，那么至少从道德上说，我们似乎就不得不接受某种无政府状态。这一批评策略似乎是无政府主义者最强有力的武器。没有人问过我，我们是否应该有一个国家，警察在行动时也没有征求过我的许可。因此，无政府主义者主张，国家与警察都是在以不合法的方式行动，至少在和我打交道时是这样。</p><p>服从国家的唯一理由是明智（对惩罚的恐惧）</p><p>负责任的公民不应该盲目地遵循法律，而应该始终对法律是否正当的问题上运用自己私人的判断。如果法律不正当就没有道德理由服从。</p><p>但是所有人都以私人判断，就会回到混乱状态。</p><p>在合理范围内接受一套共同的法律是更好选择。</p><h2 id="功利主义"><a href="#功利主义" class="headerlink" title="功利主义"></a>功利主义</h2><h3 id="直接功利主义"><a href="#直接功利主义" class="headerlink" title="直接功利主义"></a>直接功利主义</h3><p>当服从比不服从给社会带来更大的幸福</p><p>违法者的特许状（如果拿走别人的财产带来社会整体更大的幸福）</p><h3 id="间接功利主义"><a href="#间接功利主义" class="headerlink" title="间接功利主义"></a>间接功利主义</h3><p>需要一系列得到尊重的法律，不是由个人来考虑遵循法律对社会幸福水平的影响，而是从社会整体的角度。</p><h3 id="对功利主义的批评"><a href="#对功利主义的批评" class="headerlink" title="对功利主义的批评"></a>对功利主义的批评</h3><p>功利主义的论证：</p><p>前提1：从道德上，最好的社会是幸福得到最大化的社会</p><p>前提2：国家比自然状态更能促进幸福</p><p>前提3：国家与自然状态是我们仅有的两种选择</p><p>结论：我们有道德义务缔造并支持国家</p><p>各种无政府主义者会反对前提2，3姑且不论；</p><p>前提1也存在着道德风险，如果牺牲个体造就社会的幸福增加（替罪羊问题），会导致极大的非正义，惩罚无辜可以在道德上是正确的。功利主义也可以用来证成奴隶制。</p><p>功利主义需要融入权利理论（不受迫害的权利）。</p><h2 id="公平原则"><a href="#公平原则" class="headerlink" title="公平原则"></a>公平原则</h2><p>享受了国家的利益，又不承受有助于这些利益的必要负担，是不公平的。（对同意理论的改进）</p><p>休谟：从长期看，服从法律符合每个人的利益，人类并不是非常善于理性地行动，理性作为人的驱动力太弱。</p><p>这个观点背后的原则由法律理论家和哲学家哈特（H.L.A.Hart，1907—1992）明确提出</p><blockquote><p>如果一些人根据某些规则从事某种共同事业，并因此限制了他们的自由，那么那些根据要求服从了这种限制的人就有权利要求那些受益于他们的服从的人做出同样的服从。</p></blockquote><p>诺齐克的反驳：没有主动要求的利益不能创设任何回报的义务。得到了和接收了利益是不同的。</p><p>这又回到了默示同意的问题了，如何明确表示接收和拒绝利益。</p><h1 id="三、谁应当统治"><a href="#三、谁应当统治" class="headerlink" title="三、谁应当统治"></a>三、谁应当统治</h1><h2 id="民主含义及其争论"><a href="#民主含义及其争论" class="headerlink" title="民主含义及其争论"></a>民主含义及其争论</h2><h3 id="多数派统治和保护个人权利"><a href="#多数派统治和保护个人权利" class="headerlink" title="多数派统治和保护个人权利"></a>多数派统治和保护个人权利</h3><p>多数派暴政（托克维尔）</p><p>人民自己统治自己也可能存在压迫，因为人民不是同质的，具有非单一的利益</p><h3 id="代议制与直接民主"><a href="#代议制与直接民主" class="headerlink" title="代议制与直接民主"></a>代议制与直接民主</h3><h3 id="投票程序等其他争议"><a href="#投票程序等其他争议" class="headerlink" title="投票程序等其他争议"></a>投票程序等其他争议</h3><h2 id="反民主的柏拉图"><a href="#反民主的柏拉图" class="headerlink" title="反民主的柏拉图"></a>反民主的柏拉图</h2><p>专家统治（护卫者），统治是一种技能，应该交由专业的人，征求大众意见导致灾难，实际上一种仁慈的独裁制。</p><p>反驳：</p><ol><li><p>把不受制约的权力交给专家也会导致灾难，谁来监督护卫者</p></li><li><p>如何任命护卫者</p></li><li><p>投票的意义：发现公共善，人民利益的反映。</p><blockquote><p>孔多塞的论证：</p><p>前提1：一般人必须有高于五成的可能性做出正确判断<br>前提2：每个人必须按照他理解的共同善来投票而非特殊利益<br>结论：在大量人参与投票的情况下，几乎肯定可以得到正确的结果</p></blockquote></li><li><p>民主过程本身就包含了有价值的东西：自由和平等。<br>人可以在决策中有发言权等自由，且这种自由被赋予所有人</p></li></ol><h2 id="卢梭与公意"><a href="#卢梭与公意" class="headerlink" title="卢梭与公意"></a>卢梭与公意</h2><p>general will(公意)：要求同等程度上符合每个人的政策，普遍利益<br>the will of all（众意）：每个人特殊意志的产物</p><p>公意制定影响所有公民的法律，我由法律统治而非统治者统治，政府不制定法律，而是在具体事务中按照法律行事</p><ol><li><p>是否存在一种公意同等影响每一个人（不同阶级、利益立场的人）？</p></li><li><p>即便有一种公意，怎么能得到他，人为什么要按照公意而不是特殊利益投票？</p></li></ol><ul><li>消除阶层，不能有巨大的不平等；</li><li>要么不应该有党派和派系，要么应该有很多；这样特殊群体对整个集体的决定只有很小的影响；</li><li>个人必须非常强烈的认同作为一个整体的群体。比如通过公民美德教育的方式来巩固社会纽带。人们要被教育塑造得为了国家而忘记自我。（有些批评者认为这有法西斯的倾向）</li><li>审查制：监察官鼓励人们遵循大众道德</li><li>公民宗教：每个公民都应该信奉某种宗教，除了私人道德以外，每个人都应该信奉公民宗教</li></ul><p>平等：卢梭的公民不包括女性。<br>自由：无神论被禁止；不宽容其他宗教的宗教也得不到宽容；所有人都必须认可公民宗教；个人似乎不再有任何背离传统的生活实验</p><p>想到这些限制性的、很不开明的背景，我们可能会问，卢梭如何还能坚持说他已经解决了下述问题：如何找到一种结合形式，在这种结合中，“每一个与全体相联合的个人只服从其本人，并且仍然像以往一样自由”？</p><p>积极自由：卢梭所持的自由观是后来以赛亚·伯林所谓的“积极”自由观。我们将在第四章更详细地考察这个观念，不过这种自由观的基本立场是，自由不仅关乎能够遵循自己的欲望且不受他人约束（一种“消极的”观念），它还要求做出某些行为。通常，主张积极自由的理论家用“过理性人会选择的那种生活”来界定自由。就卢梭而言，这样一种理性的生活唯有在一个公民社会中才有可能。“只有嗜欲的冲动便是奴隶状态，而唯有服从人们为自己所制定的法律，才是自由。”</p><p>唯有服从公意行动才是真正自由的，这会导致<strong>被强迫成为自由的</strong></p><h3 id="对卢梭的批评"><a href="#对卢梭的批评" class="headerlink" title="对卢梭的批评"></a>对卢梭的批评</h3><ol><li>公意概念难以实现</li><li>对少数派的观点：被强迫成为自由</li><li>服从公意不是自由的（存在人反对公意）</li><li>不提倡民主集会，反对政治争论</li></ol><p>卢梭为了论证民主从工具角度是正当的，把社会团结的纽带勒的过紧，可以实现平等，但不等实现自由（多样性和多元化）</p><h2 id="参与式民主"><a href="#参与式民主" class="headerlink" title="参与式民主"></a>参与式民主</h2><p>直接民主，不仅要制定法律，还要参与所有具体事务</p><p>反对：</p><ol><li>难以实现，效率低</li><li>谁来制定议程，相对于决策，提出问题同样重要</li><li>政治生活也并不是全部，许多人也关心政治之外的事情</li></ol><h2 id="代议制民主"><a href="#代议制民主" class="headerlink" title="代议制民主"></a>代议制民主</h2><p>约翰穆勒</p><p>专制国家导致消极被动，塑造的民族不关心国家事务，不仅影响个人，也影响国家繁荣</p><p>现代社会过于庞大，直接民主不太可能</p><p>公民身份（citizenship）教育的重要性：参与陪审团和地方政府</p><p>权力分散于制衡，对选举者的制约</p><p>公民应该根据他们对普遍利益的理解来投票，出于公共善和良心</p><p>公开投票，防止选民出自个人利益投票</p><p>有一定文化水平和经济水平才能投票，防止选民太过无知，无法看到公共善</p><p>复票制（Plural voting）：先选出选举人，在由他们产生议员</p><p>对少数派的保护，限制政府活动的合法领域</p><h1 id="四、自由的地位"><a href="#四、自由的地位" class="headerlink" title="四、自由的地位"></a>四、自由的地位</h1><p>国家应该有多大的权力？</p><p>无政府主义与霍布斯是两个极端</p><p>穆勒的答案很激进，又简单得令人耳目一新。穆勒的自由原则（伤害原则）宣称，只有当一个人有可能会伤害到另一个人时，你才能限制其行动自由而不至于不正当。而不是以专断的习俗和大众道德来评判。</p><p>适用于文明共同体的任何成员，各项能力已臻于成熟，孩子和野蛮人是除外的，比如孩童就不应该有自由决定是否学习</p><h2 id="思想自由"><a href="#思想自由" class="headerlink" title="思想自由"></a>思想自由</h2><p>对穆勒来说，要注意的第一件事就是，一个观点不受欢迎并不能构成压制它的理由：“如果整个人类除一人之外全都持有一种意见，而只有那一人持有相反的意见，其他所有人不让那个人说话并不比那个人不让其他所有人说话（如果他有那种权力的话）更为正当。</p><p>穆勒主张，我们有很好的理由欢迎人们提倡哪怕是不受欢迎的观点。压制这些观点就是“对包括当代人与后代人在内的全人类的剥夺”。</p><p>穆勒主张，无论有争议的观点是对还是错，抑或既有对的也有错的，拒绝让其发声对我们绝没有任何好处。如果我们压制一个正确的观点（或一个部分正确的观点），我们就失去了以谬误（整个谬误或部分谬误）换真理的机会。而如果我们压制一个错误的观点，我们就以一种不同的方式有所失：我们失去了一个质疑、再思考并有可能重新肯定我们正确观点的机会。因此，压制并不能给我们带来任何好处，无论所压制的观点是不是真理。</p><p>不能假定自己不可能出错，许多被认为是确定无疑的观点和信念已经被证实是荒谬的（地球是平的）</p><p>这就证明了人类会犯下巨大的错误。穆勒认为，我们绝没有权利主张自己不可能出错。</p><blockquote><p>认定某一意见正确乃是因为它在一切与之竞争的场合中都未被驳倒，与认定它正确乃是为了它不受反驳，这两者之间有着天壤之别。</p></blockquote><p>即使从功利主义的角度，凭什么断定一种观念会导致更多的危害而非好处。（不信上帝、核武器知识）</p><p>信仰真理是一种实现幸福的途径</p><h2 id="对他人的伤害"><a href="#对他人的伤害" class="headerlink" title="对他人的伤害"></a>对他人的伤害</h2><p>唯有造成伤害才能限制一个人的自由。如何定义伤害，边界在哪里。</p><h2 id="证成自由原则"><a href="#证成自由原则" class="headerlink" title="证成自由原则"></a>证成自由原则</h2><p>自然权利：生命权、思想、言论自由、自由机会、迁徙自由、投票和竞选</p><p>自然权利是基本的、公理性的，但如何为这些权利辩护。</p><p>自然权利是自明的，不是从其他某种论据推出来的，那么为什么不同理论家对有什么权利却有不同看法</p><p>边沁：权利是法律的产物，不存在自然权利，洛克完全否认这种观点。</p><p>穆勒既不能接受自然权利，又不能依靠传统权利，而是从功利主义的角度推导的</p><p>henry sidgwick: government house utilitarianism</p><p>私人领域（不受干涉）和公共领域（受到干涉），如何划分界限，穆勒没有明说，只是从功利的角度去得出答案</p><p>功利主义与自由的冲突：功利主义鼓励家长式的干预，如果传统道德支配的社会是更符合功利主义的？</p><p>要理解穆勒对这个问题的回应，我们需要再看看《论自由》里那段话的措辞，在那段话里，穆勒宣称他忠实于功利：</p><blockquote><p>在所有伦理问题上，我最终都诉诸功利；但这里的功利必须是最广义上的功利，它基于一个作为进步性存在的人永久不变的利益。</p></blockquote><h2 id="个性与进步"><a href="#个性与进步" class="headerlink" title="个性与进步"></a>个性与进步</h2><p>个性的自由发展是幸福首要且必不可少的要素之一</p><p>虽然自由并非总是带来进步，但进步唯一可靠和恒久的源泉是自由</p><ol><li><p>即便人们会搞错，但个人与其他任何人相比，仍然更有可能正确地看到什么东西会使自己幸福</p><p>穆勒声称，独立地做出判断确实会带来更好的后果。但是他的意思并不是说，任何人都不应该影响他人的行为。他特别强调，如果我们觉得别人正在采取一种愚蠢或有害的行为，我们每个人都有义务尽力说服他们相信自己错了。我们可以跟他们讲道理，或者请求他们。但是我们能做的也仅限于此，绝不能采用武力。</p><p>一个人不顾别人的建议与警告可能犯下的错误，与容许别人强制他去做他们认为对他有好处的事情，危害要小得多。</p></li><li><p>从长远看，它会导致更好的决定</p><p>不仅如此，自由选择的运用本身对于人性的充分发展来说也是至关重要的。穆勒认为，那些做习俗之奴隶的人永远也不能成长为全面发展的成功的人；未必是因为他们不会幸福，而是因为他们不能发展人类最独特的一种能力，即选择能力。</p></li><li><p>生活实验是社会进步的主要因素</p><p>正如只要人类未臻于完善，存在着不同意见就是有益的，同样，存在着不同的生活试验也是有益的；各种品格只要不伤及他人就应该给予其自由发展的空间；不同生活方式的价值应该通过实践去证实。……这是构成个性与社会进步的主要因素。</p></li></ol><p>批评：对进步的乐观主义</p><p>他最重要的观点就是这样一个假定，即人类是可以进步的，能够从经验中学习。最近几个世纪的经验是否表明这个观点是错误的呢？如果是这样，那么穆勒的观点就失去了灵魂。人类持续不断地重复自己的错误。如果人们不会从他人的经验中学习，那么穆勒就不再有理由鼓励生活试验了。如果我们并不准备学习，其他人向我们展示新的生活方式又有什么意义呢？没有了这样一种对生活试验的辩护，个性与自由基于穆勒给出的那些论证而获得的正当性就大打折扣了。实际上，已经有人指出，<strong>人类通常处在穆勒专门用来描述“孩子和野蛮人”的那种状态：没有能力通过自由和平等的讨论而进步。</strong>而且，正如穆勒本人所说，这样的人不适合享受自由，至少根据功利主义的计算不适合。或许对人类进步的可能性所持的这种悲观主义是一种严重的夸大其词。但是如果真理存在于某种中间立场，如果人类并不如穆勒所设想的那样善于进步，用来支持自由的功利主义论据就相应地削弱了。进步是穆勒学说的基石。</p><h2 id="自由作为一种内在善"><a href="#自由作为一种内在善" class="headerlink" title="自由作为一种内在善"></a>自由作为一种内在善</h2><p>实现社会幸福最大化也许要求一个非自由的社会，难道就是可取的吗？</p><p>穆勒认为自由是幸福的一部分，而不是独立的价值</p><h2 id="自由主义的问题"><a href="#自由主义的问题" class="headerlink" title="自由主义的问题"></a>自由主义的问题</h2><p>毒品、酗酒、卖淫（传统道德的作用）</p><p>马克思的批评：政治解放（自由主义）相对于等级制和充满歧视的国家是一种进步，但是是实现人类解放的障碍（分离性，以自我为中心的，市民社会的对抗倾向），是一种肤浅的学说</p><p>社群主义(comunitarianism) </p><p>积极自由和消极自由（以赛亚柏林）</p><h1 id="五、分配正义"><a href="#五、分配正义" class="headerlink" title="五、分配正义"></a>五、分配正义</h1><h2 id="财产权证成"><a href="#财产权证成" class="headerlink" title="财产权证成"></a>财产权证成</h2><p>初始获取正义、转让正义、矫正正义（诺齐克）</p><p>洛克：掺入劳动论</p><p>财产所有权就是盗窃（蒲鲁东）</p><h2 id="自由市场"><a href="#自由市场" class="headerlink" title="自由市场"></a>自由市场</h2><p>功利主义理论不关心怎么来的，关心转让正义</p><p>计划经济需要计划者具备一定程度上的全知全能与仁慈，人类是做不到这一点的</p><p>反对市场：人的异化（恩格斯），剥削，非正义的不平等，浪费，经济危机</p><p>异化是资本主义特有，还是一般的现代技术特有？福利国家的修正</p><p>平等主义的分配会抑制主动精神和进取心</p><h2 id="罗尔斯的正义理论"><a href="#罗尔斯的正义理论" class="headerlink" title="罗尔斯的正义理论"></a>罗尔斯的正义理论</h2><p>一种假想的契约</p><ol><li><p>立约环境（原初状态）</p><p>无知之幕：不知道天资、阶级、社会地位、性别、种族，特殊心理倾向（道德宗教哲学观），社会经济状况，文明程度，处于正义环境（介于匮乏与丰裕之间）</p><p>弱的善理论：想要primary goods（自由、机会、财富、收入、自尊的社会基础）</p><p>行动者：理性，mutually disinterested</p></li><li><p>选择正义原则</p><p>a. 每个人都要平等的权利享有一整套最为广泛且相同的基本自由，但这些自由要与所有人类似的一套自由相容（自由原则）</p><p>b.社会与经济的不平等应该被安排得：</p><ul><li>符合处于最不利地位者的最大利益（差别原则）</li><li>职位与地位在公平的机会平等条件下向所有人开放（公平机会原则）</li></ul><p>自由原则是最优先的，公平机会原则相对于差别原则也具有优先性</p><p>自由原则和公平机会原则比较容易从理性上推导</p><p>差别原则推导：</p><ul><li><p>预期功利最大化</p></li><li><p>maximin（小中取大）</p><ul><li><p>物质条件的约束（资源有限）</p></li><li><p>逻辑约束(每个人都比其他人富裕)</p></li><li><p>形式约束：公开性约束，契约中的条款都是互相知情的（反驳总督府里的功利主义）</p><p>终结性finality，承诺的压力，当安排对你不利时，是无法改变的</p></li></ul><p>只有小中取大不冒险，因为是一次性的不可反悔的选择</p></li><li><p>maximax（大中取大）</p></li><li><p>有条件限制的功利最大化：无法明确条件限制，最终会变成小中取大</p></li></ul></li><li><p>为什么要选择这种理论</p><p>对罗尔斯的批评<br>弱的善理论是基于现代资本主义生活的<br>个人能力相对于社会赋予的因素的微不足道</p></li></ol><h2 id="诺齐克与模式"><a href="#诺齐克与模式" class="headerlink" title="诺齐克与模式"></a>诺齐克与模式</h2><p>限制财产是限制自由，与自由原则相悖</p><p>历史性正义理论 historical：了解如何获得资源和资源分配依据</p><p>即时性正义理论 end -state： 只看到某个时点的分配状况</p><p>模式化理论：根据xx来分配</p><p>非模式化理论：程序性理论，通过正当程序获得goods</p><p>模式的变化</p><ol><li><p>任何模式都会被打破</p></li><li><p>从一种模式到另一种模式是处于自愿，如果模式1是正义的，模式2也是正义的（纯粹自愿也不一定正义的）</p></li><li><p>模式想要强制实施就只能让自由付出沉重代价。不断地干预分配</p></li></ol><h1 id="六、当代问题"><a href="#六、当代问题" class="headerlink" title="六、当代问题"></a>六、当代问题</h1><p>女性主义、种族问题、性取向，压迫、传统价值观，全球正义，移民，子孙后代。</p><p>论述较浅</p><h1 id="附录：书单"><a href="#附录：书单" class="headerlink" title="附录：书单"></a>附录：书单</h1>]]></content>
    
    <summary type="html">
    
      《政治哲学》乔纳森·沃尔夫 阅读笔记
    
    </summary>
    
    
      <category term="笔记" scheme="https://paranoiddemon.github.io/blog/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>说一说在我老家，人们的生存状况</title>
    <link href="https://paranoiddemon.github.io/blog/posts/home-waste-land.html"/>
    <id>https://paranoiddemon.github.io/blog/posts/home-waste-land.html</id>
    <published>2020-04-19T16:22:46.000Z</published>
    <updated>2020-06-30T01:09:59.249Z</updated>
    
    <content type="html"><![CDATA[<p>（一）</p><p>以前回我奶奶家过年的时候，附近邻居有个姐姐，因为眼睛小，笑起来总是眯成一条缝，人家都叫她眯眯。我算不上认识她，我和她唯一的交集，是有一次她路过我家门口，在她快走远的时候，我恶作剧似地老远喊了声“眯眯”，她停顿一下回过头，也不怎么生气，反而是眯起眼笑了起来。</p><p>她现在疯了。清明节回我奶奶家听说的。几年前她怀孕，她爹嫌弃男孩家经济条件太差，强行拆散了这段关系，带她去做了流产。后来她爹给她相亲了几次，都是订婚不久男方又反悔，多次“退货”，在农村的讲述中用的是这个词。具体的缘由不得而知，有人说是精神状态出了问题，也有传言说是因为流产无法再有孩子了。再后来，眯眯就疯了。常常自言自语，有时候会无端端骂人。</p><p>眯眯疯了之后，每天和她妈妈形影不离，晚上也是和她妈妈一起睡的。她妈妈去年突发脑溢血去世，她爹没过几个月就再婚了，对眯眯的态度的是：谁要就赶快带走，不要一分钱彩礼。“眯眯现在可怜哦”，我奶奶如此评价。十多年前她回头的那个笑容，我可能再也无法忘记了。</p><p>（二）</p><p>很多人可能不知道农村结婚有多么简单。先找人介绍认识，男女双方可能只用见一两次面，在双方家长的陪同下，甚至不是单独的约会，就可以确定一桩婚事。如果双方（家族）凭借着一两次的了解都比较满意的话，就可以订婚，领结婚证了，不举办婚礼的话，这事情就算结束了。虽然听上去很不现代，但这就是大部分农村家庭的普遍状况。</p><p>虽然我对婚姻总体上都抱有一种悲观的立场，但这样的婚姻可能更需要一些运气。双方达成的更像是一个搭伙生活的契约，进而保持传宗接代的传统。我发现他们都是这样毫不审视地生活，完全天然地接受命运的一切安排，毫无例外。生活地幸福与否那就是个概率问题了。我有时候会有些羡慕，因为我即使知道我是怎么样的宿命，也基本上无法改变太多。除了更深更明白的绝望，审视自己的生活对我没有其他益处。</p><p>（三）</p><p>大概有十来年没有回家做清明，这些年间先后失去了三位亲人，从我爸妈那也常会听说某些认识的人的离世。死亡成了越发日常的事情，这可能就是年纪增长的一个佐证吧。生老病死，一代人接续一代人，装着家族记忆的坟一座座地立起来，孩子不断地出生，像是一个无法打破的坚实循环。</p><p>那天在山上，新草铺满了山坡，燃烧的黄纸化成成片的灰烬，在半空飘扬。祭扫有很多的仪式，“到你们这代或许就断了“，一位长辈无奈地说。我看见我爸在远处抽烟的背影，内心有些悲伤。将来有一天，我也将站在那个位置。</p><p>我的小外甥女纤雪今年十岁，时隔一年多没见，她还记得我叫我舅舅。她外公也就是我舅舅六年前也是脑溢血去世的，他生前对我很好。正月十七去世的，正月拜年还见过的，没想到会是最后一次。在我舅舅的坟前，我问纤雪认识外公吗，她说不记得了。我给了她点零花钱让她买些喜欢的东西，我问她喜欢什么，她说喜欢钱。我说你要这么多钱干什么，她说要给她妈妈买件新衣服，还让我不要生气。</p><p>在那几个小时里，我不停地和她说，近乎单方面的要求：你要好好上课，将来上大学哦。我知道我对她的人生做不了什么，对她说的这些话，与其说是对她的劝诫，更不如说是一种良心上的自我安慰。</p><p>（四）</p><p>其实在城市的生活又何异于孤魂野鬼。拥挤的、昏暗的出租屋，夏天充满异味的地铁、公交，写字楼里的格子间，伤心的街道，人来人往的娱乐场，失落人的渺小内心。这一切的一切和坟墓有多大的分别。人是城市的燃料，这台巨大的工业机器制造出绚丽的幻象，从此有了永恒的动力，而燃烧一个人的时间不过是永恒里的须臾，变成废料排出体外几乎是绝大部分的人归宿，被集体撒向旷野、江河和土坡，滋养出下一批全新的燃料。曾经熊熊燃烧过的我，最终也将步向我的命定，如果可以的话，请把我撒向大海，成为大海，化作比城市更深刻的永恒，有蚀刻一切的气势。而不是给我一块墓碑，证明我曾卑微地存在。</p>]]></content>
    
    <summary type="html">
    
      清明节见闻
    
    </summary>
    
    
      <category term="经验" scheme="https://paranoiddemon.github.io/blog/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
  </entry>
  
</feed>
