<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>更换电脑hexo博客迁移</title>
      <link href="/paranoiddemon.github.io/2020/06/21/HexoSync/"/>
      <url>/paranoiddemon.github.io/2020/06/21/HexoSync/</url>
      
        <content type="html"><![CDATA[<p><strong>上传电脑中博客的源文件</strong></p><p>1.生成的静态网页(.deploy_git)放在master分支在paranoiddeon.github.io 新建hexo分支存放博客源文件(除.deploy_git外的文件)，在该仓库的setting&gt;branch&gt;default branch设为hexo。在本地任意目录打开git bash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>2.在克隆到本地的paranoiddeon.github.io中，把除了.git 文件夹外的所有文件都删掉。把之前博客文件夹中除了.deploy_git的文件全部复制到paranoiddeon.github.io中，删除theme文件夹中可能存在的.git 文件夹，避免嵌套上传失败。之后把博客的源文件上传到hexo分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>3.因为之前博客使用的主题是从第三方仓库clone的，在执行git add .的时候出现了”fatal: in unpopulated submodule maupassuant” 错误，导致主题文件夹没有被上传，所以需要删除再重新add该目录，在theme目录中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf --cached maupassuant  &#x2F;&#x2F;删除文件夹</span><br><span class="line">git add maupassuant</span><br></pre></td></tr></table></figure><p><strong>在新电脑(Windows)重新搭建环境</strong></p><p>1.<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载安装Git</a></p><p>2.设置git全局邮箱和用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure><p>3.设置ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? </span><br><span class="line">#输入yes 生成后填到github 在提示的文件目录复制id_rsa.pub 添加到github（settings&gt;SSH keys)</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>4.<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载安装nodejs</a><br>5.安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>6.在新电脑clone博客源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:paranoiddeon&#x2F;paranoiddeon.github.io.git</span><br></pre></td></tr></table></figure><p>7.安装hexo-deployer-git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd paranoiddeon.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">&#x2F;&#x2F;用于将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，</span><br><span class="line">&#x2F;&#x2F;并且完全覆盖该分支下的已有内容。</span><br></pre></td></tr></table></figure><p>8.生成部署博客网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果在多台电脑上同步博客，写完上传到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .  &#x2F;&#x2F;所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)</span><br><span class="line">git commit –m &quot;xxxx&quot; &#x2F;&#x2F;将暂存区里的改动给提交到本地的版本库。</span><br><span class="line">git push  &#x2F;&#x2F;将本地版本库的分支推送到远程服务器上对应的分支</span><br></pre></td></tr></table></figure><p>在另一台电脑pull</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull&#x2F;&#x2F;取回远程主机某个分支的更新，再与本地的指定分支合并</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOG连接PSN&quot;Playstation connection timed out&quot;问题解决</title>
      <link href="/paranoiddemon.github.io/2020/06/17/PsnConnectGOG/"/>
      <url>/paranoiddemon.github.io/2020/06/17/PsnConnectGOG/</url>
      
        <content type="html"><![CDATA[<p><strong>关闭两步验证，获取 “sso cookie”</strong><br>turn off 2-step verification first<br>log in to PSN (store.playstation.com) through your browser<br>after the login open this link: <a href="https://ca.account.sony.com/api/v1/ssocookie" target="_blank" rel="noopener">https://ca.account.sony.com/api/v1/ssocookie</a><br>Copy content of “npsso”</p><p><strong>修改代码，本地验证</strong><br>open windows explorer and enter the following into the address bar at the top and press enter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%LocalAppData%\GOG.com\Galaxy\plugins\installed\</span><br></pre></td></tr></table></figure><p>open the psn_{random number} folder and edit the plugin.py file with your favourite text editor<br>go to line 64 and change it from:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = stored_credentials.get(<span class="string">"npsso"</span>) <span class="keyword">if</span> stored_credentials <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stored_npsso = <span class="string">"Copied value of npsso"</span></span><br></pre></td></tr></table></figure><p>(“copied value of npsso” should be a 64 character long text consisting of numbers, lower case letters and upper case letters)   (the quotation marks “ “ are important!)<br>In addition to totally REPLACING the line 64, delete lines 65 and 66<br>the line 64 has to start after 8 blank SPACES (do not use tabs).</p><p><strong>重启gog再连接</strong><br>restart GOG Galaxy<br>try connecting with PSN again </p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习 02</title>
      <link href="/paranoiddemon.github.io/2020/06/17/JavaSE02/"/>
      <url>/paranoiddemon.github.io/2020/06/17/JavaSE02/</url>
      
        <content type="html"><![CDATA[<h2 id="4-面向对象"><a href="#4-面向对象" class="headerlink" title="4. 面向对象"></a>4. 面向对象</h2><h3 id="4-1-面向对象编程"><a href="#4-1-面向对象编程" class="headerlink" title="4.1 面向对象编程"></a>4.1 面向对象编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Object Oriented Programing vs Procedure Oriented Programing</span><br><span class="line"> <span class="number">1</span>.Java类及类的成员：属性，方法，构造器；代码块，内部类</span><br><span class="line"> <span class="number">2</span>.面向对象的三大特征：封装性、继承性、多态性（抽象性）</span><br><span class="line"> <span class="number">3</span>.其他关键字:<span class="keyword">this</span> <span class="keyword">super</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">package</span> <span class="title">import</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> <span class="title">POP</span>与<span class="title">OOP</span></span></span><br><span class="line"><span class="class"> 面向过程：强调功能行为，以函数为最小单位，考虑怎么做</span></span><br><span class="line"><span class="class"> 面向对象：强调具备功能的对象，以类/对象为最小单位，考虑谁来做</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> 人</span>&#123;  </span><br><span class="line">     打开冰箱&#123;</span><br><span class="line">     冰箱.打开()</span><br><span class="line">     &#125;</span><br><span class="line">     抬起(大象)&#123;</span><br><span class="line">     大象.进入(冰箱);</span><br><span class="line">     &#125;</span><br><span class="line">     关闭(冰箱)&#123;</span><br><span class="line">     冰箱.闭合();</span><br><span class="line">  &#125;</span><br><span class="line">---------------------------     </span><br><span class="line"> 冰箱&#123;</span><br><span class="line"> 打开()&#123;&#125;</span><br><span class="line"> 闭合()&#123;&#125;</span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line">---------------------------</span><br><span class="line"> 大象&#123;</span><br><span class="line"> 进入(冰箱)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> 类：抽象</span><br><span class="line"> 实例化为对象</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">4.2</span> Java语言的基本元素：类和对象</span><br><span class="line">类：对一类实物的描述，抽象的、概念上的定义</span><br><span class="line">对象：实际存在的该类实物的每个个体，实例instance</span><br><span class="line"></span><br><span class="line">面向对象程序设计的重点是类的设计，其实就是类的成员的设计</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="4-2-类和对象"><a href="#4-2-类和对象" class="headerlink" title="4.2 类和对象"></a>4.2 类和对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、设计类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 创建类的对象的类的实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">二、类和对象的的使用（面向对象思想落地的实现）</span></span><br><span class="line"><span class="comment"> 1.创建类，设计类的成员；最花时间</span></span><br><span class="line"><span class="comment"> 2.创建类的对象</span></span><br><span class="line"><span class="comment"> 3.通过“对象.属性” “对象.方法”调用对的结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、创建了一个类的多个对象，每个对象都拥有一套类的属性。（非static的）</span></span><br><span class="line"><span class="comment">修改一个对象的属性a，不影响其他对象的属性a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">四、对象的内存解析</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建person类的对象</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用类的结构：属性和方法</span></span><br><span class="line"><span class="comment">//调用属性：“对象.属性”</span></span><br><span class="line">p1.name = <span class="string">"TOM"</span>;</span><br><span class="line">System.out.println(p1.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法：“对象.方法”</span></span><br><span class="line">p1.eat();</span><br><span class="line">p1.sleep();</span><br><span class="line">p1.talk(<span class="string">"Chinese"</span>);</span><br><span class="line"></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//每一个对象都有一套属性</span></span><br><span class="line">System.out.println(p2.isMale);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Person p3 = p1;</span><br><span class="line">System.out.println(p3.name); <span class="comment">//TOM</span></span><br><span class="line">p3.age = <span class="number">10</span>;</span><br><span class="line">System.out.println(p1.age);<span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">Person p4 = <span class="keyword">new</span> Person();</span><br><span class="line">p4.isMale=<span class="keyword">true</span>;</span><br><span class="line">p4 = p3;   <span class="comment">//把p3的所有属性都给了p4</span></span><br><span class="line">System.out.println(p3.isMale);<span class="comment">//false</span></span><br><span class="line">System.out.println(p4.isMale);  <span class="comment">//false</span></span><br><span class="line">System.out.println(p4.name);    <span class="comment">//TOM</span></span><br><span class="line">System.out.println(p4.age);     <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 属性 = 成员变量 = field = 域 、字段</span></span><br><span class="line"><span class="comment">方法 = 成员方法 = 函数 = method  行为</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">( String language)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"speak "</span>+ language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//代码块</span></span><br><span class="line"><span class="comment">//内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//persontest类 调用person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.age = <span class="number">20</span>;</span><br><span class="line">p1.sex = <span class="number">0</span>;</span><br><span class="line">p1.name = <span class="string">"Alice"</span>;</span><br><span class="line"></span><br><span class="line">p1.study();</span><br><span class="line">p1.showAge();</span><br><span class="line">System.out.println(p1.addAge(<span class="number">2</span>));</span><br><span class="line">System.out.println(p1.age);<span class="comment">//22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//person类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sex:1 male</span></span><br><span class="line"><span class="comment"> * sex:0 female</span></span><br><span class="line"><span class="comment"> * 文档注释要写在上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"studying"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"age:"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">age+=i;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/17/MyqA1rlhC8VWzBt.jpg" alt="JVM内存结构"></p><p>Heap 堆： 存放对象实例、数组 （new的）</p><p>Stack 栈：虚拟机栈，存放局部变量（方法中的变量都是局部变量），各种基本数据类型，对象引用（reference类型，不同于对象本身，村的是对象在堆中的首地址），方法执行完自动释放</p><p>Method Area 方法区：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码</p><h3 id="4-3-类中属性的使用"><a href="#4-3-类中属性的使用" class="headerlink" title="4.3 类中属性的使用"></a>4.3 类中属性的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中属性的使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">属性（成员变量）vs 局部变量</span></span><br><span class="line"><span class="comment">- 相同点：</span></span><br><span class="line"><span class="comment">1.定义变量的格式：数据类型 变量名=变量值；</span></span><br><span class="line"><span class="comment">2.先声明后使用</span></span><br><span class="line"><span class="comment">3.变量都有其对应的作用域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 不同点：</span></span><br><span class="line"><span class="comment">1.在类中声明的位置不同</span></span><br><span class="line"><span class="comment">属性：直接定义在类的一对&#123;&#125;内</span></span><br><span class="line"><span class="comment">局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</span></span><br><span class="line"><span class="comment">2.关于权限修饰符的不同</span></span><br><span class="line"><span class="comment">属性：可以在声明属性是，指明其权限、使用权限修饰符</span></span><br><span class="line"><span class="comment">常用的权限修饰符：private public protected 却省  ---&gt;封装性</span></span><br><span class="line"><span class="comment">目前，暂时使用缺省</span></span><br><span class="line"><span class="comment">局部变量：不可以使用</span></span><br><span class="line"><span class="comment">3.默认初始化值的情况</span></span><br><span class="line"><span class="comment">属性：类的属性，根据其类型，都有默认初始化值</span></span><br><span class="line"><span class="comment">整形（byte short int long） 0</span></span><br><span class="line"><span class="comment">浮点型（float double）0.0</span></span><br><span class="line"><span class="comment">字符型（char）0 'u0000'</span></span><br><span class="line"><span class="comment">布尔型（boolean）false</span></span><br><span class="line"><span class="comment">引用数据类型（String、类、数组、接口）null</span></span><br><span class="line"><span class="comment">局部变量：没有初始化值，需要显式赋值</span></span><br><span class="line"><span class="comment">特别地：形参在调用时赋值</span></span><br><span class="line"><span class="comment">4.在内存中加载的位置不同</span></span><br><span class="line"><span class="comment">属性：加载到堆 （非static）</span></span><br><span class="line"><span class="comment">局部变量：加载到栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//属性（成员变量）</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;<span class="comment">//language:方法形参</span></span><br><span class="line">System.out.println(<span class="string">"speak "</span>+language);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">String food = <span class="string">"egg"</span>; <span class="comment">//局部变量</span></span><br><span class="line">System.out.println(<span class="string">"eat"</span>+food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-类中方法的使用"><a href="#4-4-类中方法的使用" class="headerlink" title="4.4 类中方法的使用"></a>4.4 类中方法的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类中方法的声明和使用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  方法：描述类应该具有的功能</span></span><br><span class="line"><span class="comment">  比如：Math类 sqrt() random()</span></span><br><span class="line"><span class="comment">       Scanner nextXxx()</span></span><br><span class="line"><span class="comment">       Arrays sort() binarySearch() toString() equals();</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  1.例子</span></span><br><span class="line"><span class="comment">  public void eat() &#123;&#125; //没有形参</span></span><br><span class="line"><span class="comment">  public void sleep(int hour) &#123;&#125;  //void 没有返回值</span></span><br><span class="line"><span class="comment">  public String getName() &#123;&#125; //返回值类型</span></span><br><span class="line"><span class="comment">  public String getNation(String nation) &#123;&#125; //有形参</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  2.方法的声明</span></span><br><span class="line"><span class="comment">  权限修饰符  返回值类型 方法名 形参列表()&#123;</span></span><br><span class="line"><span class="comment">  方法体</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  注意：static final abstrct 来修饰方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  3.说明</span></span><br><span class="line"><span class="comment">  3.1 权限修饰符 private public 缺省 protected  --&gt;封装性</span></span><br><span class="line"><span class="comment">  3.2 返回值类型 有返回值vs没有返回值</span></span><br><span class="line"><span class="comment">  - 如果方法有返回值，必须在方法声明时指定返回值的类型,方法中使用return关键字，返回指定类型常量或者变量</span></span><br><span class="line"><span class="comment">  - 没有返回值，使用void来表示，通常没有返回值的方法不适用return，但是要使用的话，只能return;表示结束</span></span><br><span class="line"><span class="comment">    return后不可声明执行语句</span></span><br><span class="line"><span class="comment">  - 该不该有返回值：</span></span><br><span class="line"><span class="comment">      题目要求、凭经验</span></span><br><span class="line"><span class="comment">  3.3 方法名：标识符，遵循规范 xxxYyy 见名知意</span></span><br><span class="line"><span class="comment">  3.4 形参列表 可以声明0 1 多个</span></span><br><span class="line"><span class="comment">           格式：数据类型1  形参1，数据类型2  形参2...</span></span><br><span class="line"><span class="comment">           该不该定义形参</span></span><br><span class="line"><span class="comment">  3.5 方法体</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  4.return关键字的使用：</span></span><br><span class="line"><span class="comment">  4.1.使用在方法体中</span></span><br><span class="line"><span class="comment">  4.2.作用：结束方法；有返回值的方法，使用return 数据 返回方法所要的数据</span></span><br><span class="line"><span class="comment">  4.3.return后不可以声明执行语句</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  5.方法的使用中，可以调用当前类的属性、方法</span></span><br><span class="line"><span class="comment">  特殊的：方法A中调用方法A 递归方法</span></span><br><span class="line"><span class="comment">  随意递归会导致：StackOverFlow 栈溢出</span></span><br><span class="line"><span class="comment">  方法中不能定义方法</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  //开发中一般一个源文件只写一个class</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer cust1 = <span class="keyword">new</span> Customer();</span><br><span class="line">cust1.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleep for "</span>+hour+<span class="string">" hours"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">String info = <span class="string">"come from "</span> +nation;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">students</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String major;</span><br><span class="line">String interests;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String info = name + age + major + interests;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用面向对象的方法；设计类circle计算圆的面积</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Circle areaCal = <span class="keyword">new</span> Circle();</span><br><span class="line">areaCal.radius = <span class="number">2.1</span>;</span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double c1 = areaCal.circleArea();</span></span><br><span class="line"><span class="comment">//System.out.println(c1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line">areaCal.circleArea();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//double radius;</span></span><br><span class="line"><span class="comment">//public double circleArea() &#123;</span></span><br><span class="line"><span class="comment">//double area = radius*radius*Math.PI ;</span></span><br><span class="line"><span class="comment">//return area;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">circleArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI ;</span><br><span class="line">System.out.println(<span class="string">"area is "</span>+ area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误情况:半径作为属性定义更好，而不是放在形参里</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">circleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = r*r*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习1：设计类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.1 编写程序，声明一个method方法，在方法中打印一个10*8 的*型矩形， 在main方法中调用该方法。</span></span><br><span class="line"><span class="comment">3.2 修改上一个程序，在method方法中，除打印一个10*8的*型矩形外，再 计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法， 接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment">3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个 m*n的*型矩形，并计算该矩形的面积， 将其作为方法返回值。在main方法 中调用该方法，接收返回的面积值并打印。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exer3Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Print star = <span class="keyword">new</span> Print();</span><br><span class="line">star.length = <span class="number">10</span>;</span><br><span class="line">star.width = <span class="number">8</span>;</span><br><span class="line">star.recPrt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> area = star.recArea();</span><br><span class="line">System.out.println(<span class="string">"面积为："</span>+area);</span><br><span class="line"></span><br><span class="line">star.recPrtArea(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> area1=star.recPrtArea(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(area1);</span><br><span class="line">System.out.println(star.recArea());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recPrt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;width;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;length;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recArea</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> area = length*width;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recPrtArea</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++) &#123;</span><br><span class="line">System.out.print(<span class="string">"* "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> area = m*n;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2：对象数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 4. 对象数组题目： 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩 score(int)。 </span></span><br><span class="line"><span class="comment"> 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。 </span></span><br><span class="line"><span class="comment"> 问题一：打印出3年级(state值为3）的学生信息。 </span></span><br><span class="line"><span class="comment"> 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">提示： 1) 生成随机数：Math.random()，返回值类型double;  </span></span><br><span class="line"><span class="comment">2) 四舍五入取整：Math.round(double d)，返回值类型long。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期 对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Arrays a = new Arrays();</span></span><br><span class="line"></span><br><span class="line">Students[] stus = <span class="keyword">new</span> Students[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line">&#125;   <span class="comment">//遍历学生信息</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"><span class="keyword">if</span>(stus[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">System.out.print(stus[i].number+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].state+<span class="string">" "</span>);</span><br><span class="line">System.out.print(stus[i].score+<span class="string">" "</span>+<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习2改进：将功能封装到方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对对象数组问题的改进，将操作数组的功能封装到方法中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerTest5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Students1[] stus = <span class="keyword">new</span> Students1[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="comment">//给数组的元素赋值</span></span><br><span class="line">stus[i] = <span class="keyword">new</span> Students1();</span><br><span class="line"><span class="comment">//给student对象的属性赋值</span></span><br><span class="line">stus[i].number = i+<span class="number">1</span>;</span><br><span class="line">stus[i].state = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">stus[i].score = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">ExerTest5 test = <span class="keyword">new</span> ExerTest5();  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在outline中可以看出，ExerTest5这个类中有main方法、print方法、searchState方法、</span></span><br><span class="line"><span class="comment">sort方法，如果要在main中调用其他方法，要在main中new一个ExerTest5的对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//遍历所有学生信息</span></span><br><span class="line">test.print(stus);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出state为3的学生信息</span></span><br><span class="line"></span><br><span class="line">test.searchState(stus, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//按成绩冒泡排序，遍历所有学生信息</span></span><br><span class="line"></span><br><span class="line">test.sort(stus);</span><br><span class="line">test.print(stus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  遍历Students1[]数组的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 查找Students1数组中指定年级的学生信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> landfill </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stus 要查找的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state 要查找的年级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchState</span><span class="params">(Students1[] stus,<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[i].state == state) &#123;</span><br><span class="line">System.out.println(stus[i].info());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:给Students1数组排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@landfill</span> </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Students1[] stus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;stus.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;stus.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(stus[j].score&gt;stus[j+<span class="number">1</span>].score) &#123;</span><br><span class="line">Students1 temp = stus[j];  </span><br><span class="line"><span class="comment">//交换整个对象，而不是对象中的属性score，这样就能实现按照某个属性排序的效果</span></span><br><span class="line">stus[j] = stus[j+<span class="number">1</span>];</span><br><span class="line">stus[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students1</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> number;<span class="comment">//学号</span></span><br><span class="line"><span class="keyword">int</span> state;<span class="comment">//年纪</span></span><br><span class="line"><span class="keyword">int</span> score;<span class="comment">//成绩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"学号："</span>+number +<span class="string">",年级："</span>+state+<span class="string">"成绩："</span>+score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事万物皆对象</p><p>匿名对象</p><h3 id="4-5-方法的拓展"><a href="#4-5-方法的拓展" class="headerlink" title="4.5 方法的拓展"></a>4.5 方法的拓展</h3><h4 id="4-5-1-重载"><a href="#4-5-1-重载" class="headerlink" title="4.5.1 重载"></a>4.5.1 重载</h4><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.编写程序，定义三个重载方法并调用。方法名为mOL。 </span></span><br><span class="line"><span class="comment">三个方法分别接收一个int参数、两个int参数、一个字符串参数。</span></span><br><span class="line"><span class="comment">分别 执行平方运算并输出结果，相乘并输出结果，输出字符串信息。 </span></span><br><span class="line"><span class="comment">在主类的main ()方法中分别用参数区别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.定义三个重载方法max()，</span></span><br><span class="line"><span class="comment">第一个方法求两个int值中的最大值，</span></span><br><span class="line"><span class="comment">第二个方 法求两个double值中的最大值，</span></span><br><span class="line"><span class="comment">第三个方法求三个double值中的最大值， 并分别调用三个方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OverloadExer test = <span class="keyword">new</span> OverloadExer();</span><br><span class="line">test.mOL(<span class="number">5</span>);</span><br><span class="line">test.mOL(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">test.mOL(<span class="string">"OK"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">2</span>, <span class="number">8</span>));</span><br><span class="line">System.out.println(test.max(<span class="number">0.2</span>, <span class="number">0.8</span>,<span class="number">9.3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.三个方法构成的重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(i*i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">System.out.println(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mOL</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.三个方法构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a&gt;b&amp;a&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&gt;a&amp;b&gt;c) &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-2-可变个数的形参"><a href="#4-5-2-可变个数的形参" class="headerlink" title="4.5.2 可变个数的形参"></a>4.5.2 可变个数的形参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">二、可变个数形参的方法</span><br><span class="line"> JDK5<span class="number">.0</span> variable number of arguments,允许直接定义能和多个实参相匹配的形参</span><br><span class="line"> <span class="number">1</span>.jdk5<span class="number">.0</span>新增的内容</span><br><span class="line"> <span class="number">2</span>.具体使用：</span><br><span class="line"> <span class="number">2.1</span>格式：类型...变量名</span><br><span class="line"> <span class="number">2.2</span>当调用可变个数形参的方法时，可以传入任意个数的参数</span><br><span class="line"> <span class="number">2.3</span>可变个数形参方法和本类中方法名相同，形参不同的方法构成重载</span><br><span class="line"><span class="number">2.4</span>可变个数形参方法和本类中方法名相同，形参类型相同的数组之间不构成重载，不能够共存</span><br><span class="line"> <span class="number">2.5</span>可变个数形参在方法的形参中，必须声明在末尾；</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b,String...strs)</span> <span class="comment">//编译器无法分清传入数据的类型</span></span></span><br><span class="line"><span class="function"> 2.6只能声明一个可变个数的形参，因为必须放在最后面</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class VarargsTest </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">VarargsTest test = <span class="keyword">new</span> VarargsTest();</span><br><span class="line"><span class="comment">//test.show("aa");</span></span><br><span class="line">test.show(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line"><span class="comment">//test.show();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sho"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以取0 1 2 ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String... strs)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line"><span class="comment">//实际上是个数组,也可以遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strs.length;i++) &#123;</span><br><span class="line">System.out.println(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和上面的定义是没有区别的，不能共存，jdk5.0之后</span></span><br><span class="line"><span class="comment">//public void show(Stirng[] strs) &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-3-值传递机制"><a href="#4-5-3-值传递机制" class="headerlink" title="4.5.3 值传递机制"></a>4.5.3 值传递机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">三、方法参数的值传递机制</span><br><span class="line"> <span class="number">1</span>.定义： 方法，必须由其所在类或对象调用才有意义，若方法含有函数：</span><br><span class="line"> 形参：方法声明时的参数 定义方法时（）内的参数</span><br><span class="line"> 实参：方法调用时，实际传给形参的数据参数值 </span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>.值传递机制</span><br><span class="line"> 参数传递方式：值传递</span><br><span class="line"> 即将实际参数值的副本传入方法内，而参数本身不受影响。</span><br><span class="line"> 形参是基本数据类型：将实参基本数据类型变量的数据值传递给形参</span><br><span class="line"> 形参是引用数据类型：把地址值传递给形参</span><br><span class="line"> </span><br><span class="line"> 关于变量的赋值；</span><br><span class="line">  基本数据类型：赋值得到的把保存的数据值</span><br><span class="line">  引用数据类型：赋值得到的是地址值</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsTest</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> ArgsTest test = <span class="keyword">new</span> ArgsTest();</span><br><span class="line"> Data data = <span class="keyword">new</span> Data();</span><br><span class="line"> data.m = <span class="number">10</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> data.n = <span class="number">20</span>;</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"> <span class="comment">//调用方法交换m n </span></span><br><span class="line"> <span class="comment">//复制 了一份地址到方法中，但是实参和形参指向堆中同样的对象，所以能实现交换</span></span><br><span class="line"> test.swap(data);</span><br><span class="line"> System.out.println(<span class="string">"m="</span>+data.m+<span class="string">" n="</span>+data.n);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//基本数据类型</span></span><br><span class="line"> <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = m;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span> ;</span><br><span class="line">System.out.println(m+<span class="string">" "</span> +n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="comment">//int temp = m;</span></span><br><span class="line"><span class="comment">//m = n;</span></span><br><span class="line"><span class="comment">//n = temp;</span></span><br><span class="line"><span class="comment">//System.out.println(m+" " +n);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用swap方法,因为是基本数据类型不能交换</span></span><br><span class="line"><span class="comment">//test.swap(10,20);</span></span><br><span class="line">System.out.println(m+ <span class="string">" "</span> +n); </span><br><span class="line"><span class="comment">//没有交换，因为基本数据类型传递进入形参，在swap方法中交换后，就结束了，main方法中的数据没变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用数据类型   o2得到的是o1的地址值，指向堆中的同一个对象</span></span><br><span class="line">Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">o1.orderId = <span class="number">1001</span>;</span><br><span class="line">Order o2 = o1;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line">o2.orderId = <span class="number">2002</span>;</span><br><span class="line">System.out.println(o1.orderId+ <span class="string">" "</span>+o2.orderId);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//交换两个变量值的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span> <span class="params">(Data data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = data.m;</span><br><span class="line">data.m = data.n;</span><br><span class="line">data.n = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">ValueTransferTest test = <span class="keyword">new</span> ValueTransferTest();</span><br><span class="line">test.change(s1);<span class="comment">//还是hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String比较特别，本质上是一个char[]</span></span><br><span class="line"><span class="comment">//String 是存在常量池值中的，数组是不能随意更改的，所以 s在常量池中重新</span></span><br><span class="line"><span class="comment">//new一个char[] hi;然后s得到新的地址值，所以s1的地址值和指向的对象未改变</span></span><br><span class="line">System.out.println(s1); <span class="comment">//hello</span></span><br><span class="line"><span class="comment">//System.out.println(test.change(s1));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">s = <span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsExer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArgsExer test = <span class="keyword">new</span> ArgsExer();</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//test.method(a,b);</span></span><br><span class="line"><span class="comment">//需要在方法被调用之后，仅打印出a= 100，b=20.写出method 不改变原题</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+b+<span class="string">" b="</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印流,取代原来的打印</span></span><br><span class="line"><span class="comment">//system.exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 值传递练习</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PassObject p = <span class="keyword">new</span> PassObject();</span><br><span class="line">Circle c = <span class="keyword">new</span> Circle();</span><br><span class="line">p.printAreas(c, <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"now radius is: "</span>+c.radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//circle类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求面积</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findAreas</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = radius*radius*Math.PI;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PassObject</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAreas</span><span class="params">(Circle c,<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"radius\t\tArea"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">//可以这样写，就可以在循环外使用 </span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;=time;i++) &#123;</span><br><span class="line"><span class="comment">//圆的半径</span></span><br><span class="line">c.radius = i;</span><br><span class="line"><span class="keyword">double</span> area = c.findAreas();</span><br><span class="line">System.out.println(c.radius+<span class="string">"\t\t"</span>+area);</span><br><span class="line">&#125;</span><br><span class="line">c.radius = i ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-递归方法"><a href="#4-5-4-递归方法" class="headerlink" title="4.5.4 递归方法"></a>4.5.4 递归方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 四、递归方法 recursion（了解）</span></span><br><span class="line"><span class="comment"> 1.递归方法：一个方法体内调用自身</span></span><br><span class="line"><span class="comment"> 2.一种隐式的循环，重复调用某段代码，但无需循环控制</span></span><br><span class="line"><span class="comment"> 递归一定要向一直方向递归，否则就成为无穷递归，会进入死循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算1-100之间自然数的和</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i&lt;<span class="number">101</span>;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">System.out.println(getFactorial(<span class="number">10</span>));</span><br><span class="line">System.out.println(func(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第n个数</span></span><br><span class="line">System.out.println(fibo(n));</span><br><span class="line"><span class="comment">//打印整个斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">System.out.print(fibo(i)+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二 递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n +getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//终止的情况</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n *getSum(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例3：数列f(0)=1,f(1)=4 f(n+2)=2f(n+1)+f(n)</span></span><br><span class="line"><span class="comment">//n&gt;0整数 求f（10）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*func(n-<span class="number">1</span>)+func(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例4：斐波那契数列 求n个值，打印数列</span></span><br><span class="line"><span class="comment">// 1 1 2 3 5 8 13 21... 前两项的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//System.out.println("1 1");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(fibo(n-1)+fibo(n-2));</span></span><br><span class="line"><span class="keyword">return</span> fibo(n-<span class="number">1</span>)+fibo(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例5  汉诺塔问题</span></span><br><span class="line"><span class="comment">//例6  快排</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RecursionTest test = <span class="keyword">new</span> RecursionTest();</span><br><span class="line">test.binomial();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="comment">//递归调用的次数 相当于二叉树的前序遍历 从前往后</span></span><br><span class="line"><span class="comment">/*最后几项输出结果</span></span><br><span class="line"><span class="comment">count:282 k:-1</span></span><br><span class="line"><span class="comment">count:283 k:2</span></span><br><span class="line"><span class="comment">count:284 k:1</span></span><br><span class="line"><span class="comment">count:285 k:0</span></span><br><span class="line"><span class="comment">count:286 k:-1</span></span><br><span class="line"><span class="comment">count:287 k:0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binomial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">recursion(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">count ++;</span><br><span class="line">System.out.println(<span class="string">"count:"</span>+count+<span class="string">" k:"</span>+k);</span><br><span class="line"><span class="keyword">if</span>(k&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recursion(k-<span class="number">1</span>)+recursion(k-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h3 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a>三大特征</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h4 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h4><h3 id="Object类和包装类"><a href="#Object类和包装类" class="headerlink" title="Object类和包装类"></a>Object类和包装类</h3><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="BEFORE-JDK-7-0"><a href="#BEFORE-JDK-7-0" class="headerlink" title="BEFORE JDK 7.0"></a>BEFORE JDK 7.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 接口的使用</span></span><br><span class="line"><span class="comment"> 1.接口使用interface来定义，类是一种功能，一个类可以实现多个接口</span></span><br><span class="line"><span class="comment"> 2.java中，接口和类是并列的结构</span></span><br><span class="line"><span class="comment"> 3.如何定义接口：定义接口的成员</span></span><br><span class="line"><span class="comment"> 3.1 JDK 7及以前:只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment"> 全局常量：public static final的  但是书写时可以省略</span></span><br><span class="line"><span class="comment"> public abstract</span></span><br><span class="line"><span class="comment"> 3.2 JDK 8:除了全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.接口中是不能定义构造器的，意味着接口不可以实例化</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在java开发中，接口通过让类去实现（implements)的方式使用</span></span><br><span class="line"><span class="comment"> 如果实现类覆盖了接口中所有的抽象方法，则此实现类就可以实例化</span></span><br><span class="line"><span class="comment"> 如果实现类没有全部覆盖接口中的所有方法，则此实现类就还是抽象类  重写--&gt;实现</span></span><br><span class="line"><span class="comment"> 6.java类可以实现多个接口，弥补了类的单继承性的局限</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 7.格式 class Bullet extends Object implements Attackable,Flyable&#123;&#125;  先继承后实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 8.接口和接口之间可以多继承。   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 9.接口的使用也体现了多态性  抽象类与接口的区别  都不可以实例化，如果接口或者抽象类做形参，就要使用实现类</span></span><br><span class="line"><span class="comment"> 10、接口的本质是一种规范   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Flyable.MIN_SPEED);</span><br><span class="line">Plane p = <span class="keyword">new</span> Plane();</span><br><span class="line">p.fly();</span><br><span class="line">p.stop();</span><br><span class="line">Bullet b = <span class="keyword">new</span> Bullet();</span><br><span class="line">b.attack();</span><br><span class="line">b.fly();</span><br><span class="line">b.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;</span><br><span class="line"><span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>; <span class="comment">//前面可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;<span class="comment">//省略了public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"could stop"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kite</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;  <span class="comment">//只实现了一个还是抽象类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Attackable</span>,<span class="title">Flyable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"kill"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"fly"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"stop"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span> <span class="keyword">extends</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AFTER-JDK-8-0"><a href="#AFTER-JDK-8-0" class="headerlink" title="AFTER JDK 8.0"></a>AFTER JDK 8.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interfaceAFTER;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> AFTER JDK8.0 除了定义全局常量和抽象方法，还可以定义静态方法、默认方法</span></span><br><span class="line"><span class="comment"> 1.静态方法，通过interface.method调用</span></span><br><span class="line"><span class="comment"> 2.默认方法，通过实现类的对象调用，</span></span><br><span class="line"><span class="comment"> 默认方法还可以在实现类中重写，通过实现类调用的是重写后的方法</span></span><br><span class="line"><span class="comment"> 3.如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，</span></span><br><span class="line"><span class="comment"> 在没有重写此方法的情况下，默认调用的是父类中同名同参数的方法  --&gt;类优先原则</span></span><br><span class="line"><span class="comment"> 如果重写了就调用子类自己重写后的方法。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 4.如果实现类实现的多个接口中有同名同参数的默认方法，在继承的父类中没有该同名同参数的方法，也并且没有重写。</span></span><br><span class="line"><span class="comment"> 直接调用。编译不通过，不知道该调用哪个方法   --&gt;接口冲突，因此需要在实现类中重写此方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 5.在实现类中重写了方法后调用 接口中的默认方法使用  接口名.super.默认方法名</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 6.实现类写进了接口中的默认方法，一般不怎么重写</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompareA</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;   <span class="comment">//静态方法，通过interface.method调用</span></span><br><span class="line">System.out.println(<span class="string">"compareA:BEIJING"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;  <span class="comment">//默认方法 可以省略public</span></span><br><span class="line">System.out.println(<span class="string">"compareA:SHANGHAI"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 类的成员之五：内部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 1.允许将一个类A声明在另一个类B中，则类A为内部类，类B称为外部类</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 2.分类：</span></span><br><span class="line"><span class="comment"> 成员内部类： 和其他构成平行的声明在类内   静态的和非静态的</span></span><br><span class="line"><span class="comment"> 局部内部类：方法内 代码块内 构造器内</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 3.成员内部类</span></span><br><span class="line"><span class="comment"> 一方面，作为外部类的成员：</span></span><br><span class="line"><span class="comment"> &gt; 可以调用外部类的结构</span></span><br><span class="line"><span class="comment"> &gt; 内部类可以被static修饰  分为静态非静态的内部类</span></span><br><span class="line"><span class="comment"> &gt; private default protected public    类本身只有两种权限修饰符  public 和 default</span></span><br><span class="line"><span class="comment"> 另一方面，作为一个类：</span></span><br><span class="line"><span class="comment"> &gt; 可以定义属性 方法 构造器 代码块 再定义内部类</span></span><br><span class="line"><span class="comment"> &gt; 可以被final修饰，表示不能被继承</span></span><br><span class="line"><span class="comment"> &gt; 可以被abstract修饰，表示不能被实例化</span></span><br><span class="line"><span class="comment"> 4.</span></span><br><span class="line"><span class="comment"> 4.1 如何实例化成员您外部类的对象</span></span><br><span class="line"><span class="comment"> 4.2 如何在成员内部类中区分调用外部类的结构</span></span><br><span class="line"><span class="comment"> 4.3 局部内部类如何在开发中使用   见InnerClassTest1.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建非静态成员内部类的实例化，先要把外部类实例化</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Brain b = p.<span class="keyword">new</span> Brain(); <span class="comment">//在外部的类的实例中去new一个内部类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员内部类的实例化</span></span><br><span class="line">Person.Heart h = <span class="keyword">new</span> Person.Heart();  <span class="comment">//如果是静态的内部类，可以通过这样调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员内部类 非静态的</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Brain</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Brain</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"BRAIN"</span>);</span><br><span class="line">Person.<span class="keyword">this</span>.eat();   <span class="comment">//可以在内部类的方法体中   调用外部类的方法,省略了Person.this.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(name);   <span class="comment">//调用形参传入的name</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);   <span class="comment">//调用的该方法所在类的name</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);  <span class="comment">//调用的是外部类的而name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员内部类 静态的</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Heart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Heart"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部内部类：方法中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：构造区中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部内部类：代码块中</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DD</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发中局部内部类很少会声明在构造器和代码块中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClassTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即使是在方法中也很少见局部内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个实现了Comparable接口的类：局部内部类  非匿名实现类的匿名对象</span></span><br><span class="line"><span class="comment">//class MyComparable implements Comparable&#123;</span></span><br><span class="line"><span class="comment">//@Override  //对接口的抽象方法进行重写</span></span><br><span class="line"><span class="comment">//public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return new MyComparable();     //return一个实现类，这个内部类只在该方法内使用</span></span><br><span class="line"><span class="comment">//方式二  :return一个 匿名实现类的匿名对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020/06</title>
      <link href="/paranoiddemon.github.io/2020/06/14/thoughts2020-06/"/>
      <url>/paranoiddemon.github.io/2020/06/14/thoughts2020-06/</url>
      
        <content type="html"><![CDATA[<p>1.<br>既然可以随时选择死，为什么不换种活法</p><p>2.<br>为什么这样子，我真的不理解</p><p>3.<br>人是如此的易驯服，被他们那套搞一搞，成为一头圈养的家猪，变得丑陋而讨厌，仿佛生下来就在等待屠宰，野猪的精气神儿就完全不一样。</p><p>4.<br>Welcome to the slaughterhouse!</p><p>5.<br>What kind of savages are we？ What kind of country do we live in？</p><p>6.<br>痛苦的药方就在痛苦之中</p><p>7.<br>活着成为猪和死了也不知道哪个更可怕</p><p>8.<br>行动！加速融入生活</p><p>9.<br>哦 眼泪~</p><p>10.<br>眼睛都哭模糊了，浴室，我的伤心地</p><p>11.<br>2020，罗大佑年，多次落泪，就这么飘来飘去，哪里是你的家？</p><p>12.<br>黑暗好像一颗巨石，按在胸口</p><p>13.<br>夏，十五日夜，秘密发丧，埋于后山。</p><p>14.<br>凑活过，一种普世生活哲学，好像一切都能缝补，slogan是「害想咋地？」</p><p>15.<br>舒展眉头<br>过失败而渺小的人生<br>也是一种伟大</p><p>16.<br>平行世界是真实存在的</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习 01</title>
      <link href="/paranoiddemon.github.io/2020/06/14/JavaSE01/"/>
      <url>/paranoiddemon.github.io/2020/06/14/JavaSE01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Java语言"><a href="#1-Java语言" class="headerlink" title="1. Java语言"></a>1. Java语言</h1><h2 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h2><p>JavaSE 9.04<br>IDEA 2020.1.2</p><ul><li>JVM Java virtual machine<br>Java的跨平台性<br>Java程序 运行在 JVM，JVM运行在不同的系统中</li><li>JRE(Java runtime environment)<br>包含JVM和运行所需的核心类库</li><li>JDK（Java development kit） 安装<br>程序开发工具包，包含JRE和开发人员使用的工具（编译器等）</li></ul><p>JDK 5.0 8.0 升级较大 1.8就是8.0<br>JavaSE 桌面级（不再用） /JavaEE 企业级 Web开发 /JavaME</p><h2 id="1-2-基础命令行指令"><a href="#1-2-基础命令行指令" class="headerlink" title="1.2 基础命令行指令"></a>1.2 基础命令行指令</h2><p>系统软件(操作系统）<br>应用软件 </p><p>人机交互方式<br>图形化界面 GUI graphical user interface<br>命令行 CLI command line interface<br>algorithms+data structures=programs</p><p>MS-DOS (Microsoft Disk operating system)<br>CMD<br>启动：win R cmd<br>切换盘符： 盘符：<br>进入文件夹 cd 文件夹名<br>进入多级文件夹：cd 文件夹1\文件夹2<br>返回上级 cd..<br>回根路径 cd<br>查看文件夹：dir<br>清屏：cls<br>退出：exit<br>删除：del<br>上下箭头：历史操作命令<br>删除文件夹 ：rd  (remove dir 目录得是空的<br>创建目录：md</p><h2 id="1-3-语言特点"><a href="#1-3-语言特点" class="headerlink" title="1.3 语言特点"></a>1.3 语言特点</h2><p>机器语言<br>汇编语言<br>高级语言 </p><ul><li>面向过程 C Pascal</li><li>面向对象 Java Python Scala<br>C 开发效率差，执行效率高→  Java  →  Python<br>严格的语法，丰富的类库<br>PHP JS解释型语言</li></ul><p>舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载、多重继承等（以接口取代），增加了垃圾回收期功能</p><ul><li>面向对象：<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态</li><li>健壮性</li><li>跨平台性  JVM<br>编写（.java，在记事本就可以）、编译（.class 字节码文件 javac.exe编译器），运行（JVM运行 java.exe解释器）</li></ul><p>垃圾回收：不再使用的内存空间<br>还是存在内存泄漏和内存溢出</p><p>Java web应用开发<br>后台开发：Java  PHP Python Go Node.js</p><p>Android系统结构<br>内核 linux kernel 和硬件交互<br>libraries  C<br>android runtime  C<br>application framework Java<br>applications Java<br><img src="https://i.loli.net/2020/06/13/tgTAWRYlJnyPKvi.jpg" alt="Android系统结构.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;   <span class="comment">//定义一个类的名称，类是Java中所有源代码的基本组织单位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; <span class="comment">//内容是固定写法，代表main方法，代表程序执行的起点</span></span><br><span class="line">        System.out.println(<span class="string">"hello world!"</span>);  <span class="comment">//打印输出语句，（）中即为显示的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">编译后的<span class="class">.<span class="keyword">class</span>不包含注释</span></span><br></pre></td></tr></table></figure><h2 id="1-4-注释及API文档"><a href="#1-4-注释及API文档" class="headerlink" title="1.4 注释及API文档"></a>1.4 注释及API文档</h2><p>单行注释、多行注释<br>文档注释:可以被JDK提供的javadoc工具解析，生成一套以网页文件形式体现的该程序的说明文档<br> /**<br>文档注释<br>@author xxx<br>@version v1.0<br>*/<br>注意：多行注释不可以嵌套使用</p><p>Java API 文档<br>API application programing interface 类库</p><p>注意事项：</p><ol><li><p>java程序编写-编译-运行的过程</p><ul><li>编写，以.java结尾的源文件</li><li>编译，javac file.java 生成字节码文件</li><li>运行   java 类名  运行解释字节码文件</li></ul></li><li><p>在一个java文件中可以声明多个class，但是最多只有一个类声明为public，要求声明为public的类的类名必须与源文件同名。</p></li><li><p>程序的入口是main（）方法，格式固定<br>public static void main(String[] args) { }  //args arguments参数</p></li><li><p>输出语句<br>System.out.println();  输出数据，然后换行<br>System.out.print();</p></li><li><p>每一行执行语句都以分号结束，一行的结束不是分号就是大括号</p></li><li><p>编译的过程：编译以后，会生成一个或多个字节码文件，与源文件中所声明的类的名称相同</p></li></ol><h1 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h1><h2 id="2-1-关键字和保留字"><a href="#2-1-关键字和保留字" class="headerlink" title="2.1 关键字和保留字"></a>2.1 关键字和保留字</h2><ul><li>Keywords<br>定义：被java语言赋予了特殊含义，用作专门用途的字符串（单词）<br>特点：所有字母都为小写</li><li>reserved word<br>现有java版本尚未使用，以后版本可能会作为关键字使用如goto，const</li></ul><h2 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h2><p>identifier</p><ol><li><p>自己定义的内容。类名、方法名、变量名、包名、接口名等</p></li><li><p>命名规则：不遵守，编译不通过</p><ul><li>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _ （下划线） </li><li>标识符不能以数字开头。 </li><li>标识符不能是关键字和保留字，但可以包含。 </li><li>严格区分大小写，长度无限制</li><li>不能加空格</li></ul></li><li><p>命名规范： 建议遵守</p><ul><li>类名：首字母大写，后面每个单词首字母大写（大驼峰式）。HelloWorld </li><li>方法名、变量名： 首字母小写，后面每个单词首字母大写（小驼峰式）。 helloWorld</li><li>常量名：多个单词组成时，字母全部大写，下划线连接 例：INTEGER_CACHE</li><li>包名：多单词所有字母小写 xxxyyyzzz</li></ul></li><li><p>取名：见名知义 提高可读性</p></li><li><p>用unicode字符集，支持中文但不要使用</p></li></ol><h2 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h2><ol><li><p>概念：</p><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中的最基本的存储单元。包含类型，变量名，存储的值</li></ul></li><li><p>作用：在内存中保存数据</p><p>注意：</p><ul><li>每个变量必须先声明，后使用</li><li>使用变量名来访问这块区域的数据</li><li>变量的作用域：定义在一对｛｝内</li><li>变量只有在其作用域内才有效 </li><li>同一个作用域内，不能定义重名的变量</li></ul></li><li><p>使用</p><ul><li>格式 数据类型 变量名 = 变量值；</li></ul></li><li><p>变量按数据类型分：</p><ul><li>基本数据类型 <ul><li>整数型 byte（1byte=8bit -128~127） short int（默认）long</li><li>浮点型 float double(双精度，默认) 有些小数也无法精确表示</li><li>字符型 char</li><li>布尔型 boolean</li></ul></li><li>引用数据类型 <ul><li>数组 [ ] array</li><li>类 class   字符串也属于class</li><li>接口 interface<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> myAge = <span class="number">20</span>;  <span class="comment">//默认使用</span></span><br><span class="line">System.out.println(myAge);</span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">323134L</span> ;<span class="comment">//必须以l或L结尾</span></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">127</span> ; <span class="comment">//-127~128 </span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">1.5F</span> ;<span class="comment">//4byte,范围比long还大，以f或F结尾</span></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.声明一个字符 </span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>; <span class="comment">//2byte,用'',只能有一个字符</span></span><br><span class="line"><span class="comment">//2.转义字符</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'\n'</span> ;  <span class="comment">//换行符</span></span><br><span class="line">c2 = <span class="string">'\t'</span>;</span><br><span class="line">System.out.print(<span class="string">"hello"</span> + c2);</span><br><span class="line">System.out.println(<span class="string">"你好world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.unicode值来表示字符型常量</span></span><br><span class="line"><span class="keyword">char</span> c6 = <span class="string">'\u0043'</span>;</span><br><span class="line">System.out.println(c6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.还可以用ACISS玛</span></span><br><span class="line">        <span class="keyword">char</span> c7 = <span class="number">97</span>  <span class="comment">//输出a  开发中非常少年</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔型 boolean</span></span><br><span class="line"><span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(bb1);</span><br><span class="line"><span class="keyword">boolean</span> isMarried = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">"你就不能参加\"单身\"party了，\n很遗憾"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"哈哈"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int（默认）</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>ﬂoat</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table></li></ul></li></ul></li><li><p>按照声明位置 成员变量vs局部变量</p></li><li><p>基本数据类型之间的运算规则</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基本数据类型之间的运算规则：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">前提：这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 自动类型提升：</span></span><br><span class="line"><span class="comment">    结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</span></span><br><span class="line"><span class="comment">byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特别的：当byte、char、short三种类型的变量做运算时，结果为int型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 强制类型转换：</span></span><br><span class="line"><span class="comment">使用强转符</span></span><br><span class="line"><span class="comment">可能导致精度损失</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">129</span>;</span><br><span class="line"><span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//byte b2 = b1 + i1;</span></span><br><span class="line"><span class="keyword">int</span> i2 = b1 + i1;</span><br><span class="line"><span class="keyword">long</span> l1 = b1 + i1;</span><br><span class="line">System.out.println(i2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f = b1 + i1;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = s1;</span><br><span class="line">System.out.println(d1);<span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//***************特别地*********************</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;<span class="comment">//会转换成a的ASCII码97  </span></span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i4 = c1 + i3;</span><br><span class="line">System.out.println(i4);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> cc = (<span class="keyword">char</span>)(<span class="number">2</span>+<span class="string">'A'</span>);  <span class="comment">//输出C ASCII码加两位</span></span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> s2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c2  = c1 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//char c3 = c1 + b2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s3 = b2 + s2;//编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//short s4 = b1 + b2;//编译不通过</span></span><br><span class="line"><span class="comment">//****************************************</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">12.9</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)d1;  <span class="comment">//12 强转符，截断，损失精度</span></span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b1); <span class="comment">//-128</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.编码情况</span></span><br><span class="line"><span class="keyword">long</span> <span class="number">1</span> = <span class="number">123123</span>;  </span><br><span class="line">System.out.println(l);<span class="comment">//没有报错，实际是个int型</span></span><br><span class="line"><span class="comment">//long l1 = 121111111111111111111;   超出int范围就编译失败</span></span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">121111111111111111111L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="comment">//float f1 = 12.3;   编译失败，相当于把double转为float，一定要加f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.情况2</span></span><br><span class="line"><span class="comment">//整型常量默认为int 浮点型默认为double</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//byte b1 = b + 1;  编译失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//float f1 = b + 12.3; 编译失败</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>String类型的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  String类型变量的使用</span></span><br><span class="line"><span class="comment">  1.属于引用数据类型</span></span><br><span class="line"><span class="comment">  2.使用"" 字符串</span></span><br><span class="line"><span class="comment">  3.String可以和8种基本数据类型做运算且运算只能是连接运算 +</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String s1 = <span class="string">"hello world!"</span>;</span><br><span class="line">  System.out.println(s1);</span><br><span class="line">  String s2 = <span class="string">"a"</span>;</span><br><span class="line">  String s3 = <span class="string">""</span>;  <span class="comment">//长度没有限制，不同于char一定要有一个字符</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1001</span>;</span><br><span class="line">  String numStr = <span class="string">"学号："</span>;</span><br><span class="line">  String info = numStr + num;  <span class="comment">//连接语法，输出的是Spring</span></span><br><span class="line">  <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">  String info1 = b1 + info;</span><br><span class="line">  System.out.println(info);</span><br><span class="line">  System.out.println(info1);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//----------------------</span></span><br><span class="line">  <span class="comment">//练习1</span></span><br><span class="line">  <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">  String str = <span class="string">"hello"</span>; </span><br><span class="line">  System.out.println(c + num2 + str); <span class="comment">//107hello  A:65</span></span><br><span class="line">  System.out.println(c + str + num2); <span class="comment">//ahello10</span></span><br><span class="line">  System.out.println(c + (num2 + str));<span class="comment">//a10hello</span></span><br><span class="line">  System.out.println((c + num2) + str);<span class="comment">//107hello</span></span><br><span class="line">  System.out.println(str+ num2 + c); <span class="comment">//hello10a</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//练习2</span></span><br><span class="line">  <span class="comment">//输出**   \t 为table</span></span><br><span class="line">  System.out.println(<span class="string">"* *"</span>);</span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>);   <span class="comment">//93 两个char相加会转成int</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">"\t"</span> + <span class="string">'*'</span>);<span class="comment">//只有前面的+运算是string就会传递</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">"*"</span>); <span class="comment">//51*</span></span><br><span class="line">  System.out.println(<span class="string">'*'</span> + (<span class="string">'\t'</span> + <span class="string">'*'</span>));  </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//String无法强转为int</span></span><br><span class="line">  <span class="comment">//int num1 = (int)str1  编译不通过</span></span><br><span class="line">  <span class="keyword">int</span> num1 = Integer.parseInt(str1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>进制转换（了解）</p><p>原码 反码 补码（计算机底层存储的）</p><p>二进制  0b 或0B开头<br>十进制<br>八进制 以0开头<br>十六进制 0x或 0X开头  A-F不区分大小写</p></li></ol><h2 id="2-4-运算符"><a href="#2-4-运算符" class="headerlink" title="2.4 运算符"></a>2.4 运算符</h2><h3 id="2-4-1-算术运算符"><a href="#2-4-1-算术运算符" class="headerlink" title="2.4.1 算术运算符"></a>2.4.1 算术运算符</h3><p>+  正号 加<br>-  负号 减<br>*<br>/<br>% mod<br>++  自增1<br>--  自减1<br>+  连接符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AriTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 除号：/</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> result1 = num1 / num2;</span><br><span class="line">        System.out.println(result1); <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">int</span> result2 = num1/num2*num2;</span><br><span class="line">        System.out.println(result2); <span class="comment">//10 </span></span><br><span class="line">        <span class="keyword">double</span> result3 = num1/num2; <span class="comment">//2.0 相当于把整形2赋值给double</span></span><br><span class="line">        <span class="keyword">double</span> result4 = num1/num2 + <span class="number">0.0</span>; <span class="comment">//2.0</span></span><br><span class="line">        System.out.println(result4);</span><br><span class="line">        <span class="keyword">double</span> result5 = num1/(num2+<span class="number">0.0</span>);</span><br><span class="line">        System.out.println(result5); <span class="comment">//2.4 相当于int/double</span></span><br><span class="line">        <span class="keyword">double</span> result6 = (<span class="keyword">double</span>)num1/num2; <span class="comment">//2.4 把num1强转</span></span><br><span class="line">        System.out.println(result6);</span><br><span class="line">        <span class="keyword">double</span> result7 = (<span class="keyword">double</span>)(num1/num2); <span class="comment">//2.0 把int型的2强转</span></span><br><span class="line">        System.out.println(result7);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//%:mod运算</span></span><br><span class="line">        <span class="comment">//结果的负号与被模数的符号相同</span></span><br><span class="line">        <span class="comment">//开发中，判断是否能除尽</span></span><br><span class="line">        <span class="keyword">int</span> m1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m1 % n1 = "</span> + m1 % n1 );</span><br><span class="line">        <span class="keyword">int</span> m2 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m2 % n2 = "</span> + m2 % n2);</span><br><span class="line">        <span class="keyword">int</span> m3 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m3 % n3 = "</span> + m3 % n3 );</span><br><span class="line">        <span class="keyword">int</span> m4 = -<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n4 = -<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"m4 % n4 = "</span> + m4 % n4 );</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//（前）++ ：先自增1，然后再运算   运算可以是赋值之外的运算</span></span><br><span class="line">        <span class="comment">//（后）++ ：先运算，后自增1</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = ++a1;  <span class="comment">//先a1+1 再赋值给b1</span></span><br><span class="line">        <span class="keyword">int</span> a2 = <span class="number">10</span>;    <span class="comment">//先把10赋值给b2，再自增1</span></span><br><span class="line">        <span class="keyword">int</span> b2 = a2++;</span><br><span class="line">        System.out.println(<span class="string">"a1 = "</span>+ a1 + <span class="string">",b1 = "</span> + b1 ); <span class="comment">//a1 = 11,b1 = 11</span></span><br><span class="line">        System.out.println(<span class="string">"a2 = "</span>+ a2 + <span class="string">",b2 = "</span> + b2 ); <span class="comment">//a1 = 11,b1 = 10</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">        s1++;</span><br><span class="line">        System.out.println(s1);  <span class="comment">//11  自增1 不会改变变量自身的数据类型</span></span><br><span class="line">        <span class="keyword">byte</span> bb1 = <span class="number">127</span>;</span><br><span class="line">        bb1++;</span><br><span class="line">        System.out.println(bb1);  <span class="comment">//-128  二进制+1</span></span><br><span class="line">        <span class="comment">//（前）-- 先自减1 后运算</span></span><br><span class="line">        <span class="comment">//（后）-- 先运算 后自减1</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b4 = --a4;</span><br><span class="line">        System.out.println(<span class="string">"a4="</span>+a4+<span class="string">",b4="</span>+b4); <span class="comment">//a4=9,b4=9</span></span><br><span class="line">    </span><br><span class="line">         <span class="comment">/*练习：随意给出一个整数，打印显示它的个位数，十位数，百位数的值。 格式如下： 数字xxx的情况如下： 个位数： 十位数： 百位数：</span></span><br><span class="line"><span class="comment">         例如： 数字153的情况如下： 个位数：3 十位数：5 百位数：1 */</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">153</span>;</span><br><span class="line">        <span class="keyword">int</span> hun = num/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> ten = (num-hun*<span class="number">100</span>)/<span class="number">10</span>;  <span class="comment">//  num%100/10</span></span><br><span class="line">        <span class="keyword">int</span> one = num - <span class="number">100</span>*hun-<span class="number">10</span>*ten; <span class="comment">// num%10  %1是0</span></span><br><span class="line">        System.out.println(<span class="string">"个位数："</span>+one+<span class="string">'\n'</span>+<span class="string">" 十位数："</span>+ten+<span class="string">" 百位数："</span>+hun);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-赋值运算符"><a href="#2-4-2-赋值运算符" class="headerlink" title="2.4.2 赋值运算符"></a>2.4.2 赋值运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 支持连续赋值</span><br><span class="line"> = 两边数据类型不一致 可以使用自动类型转换或强制类型转换</span><br><span class="line"> 包括：= += -= *= /= %=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetValueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//赋值符号：=</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j1 = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//连续赋值</span></span><br><span class="line">        <span class="keyword">int</span> i2,j2;</span><br><span class="line">        i2 = j2 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">10</span>,j3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//----------------------------</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        num1 += <span class="number">2</span>;<span class="comment">// 12 相当于 num1 = num1+2</span></span><br><span class="line">        num1 %= <span class="number">5</span>;   <span class="comment">//不会改变变量本身的数据类型</span></span><br><span class="line">        System.out.println(num1);</span><br><span class="line">        <span class="comment">// 开发中，如果希望变量实现+2的操作，有几种加法（前提：int num=10）</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        num = num + <span class="number">2</span>;</span><br><span class="line">        num += <span class="number">2</span>; <span class="comment">//推荐</span></span><br><span class="line">        <span class="comment">//实现 +1</span></span><br><span class="line">        <span class="comment">//前两种 以及 ++运算 （推荐） 经常使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        i *= <span class="number">0.1</span>;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 0  不改变数据类型  0.1截断</span></span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习2</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">        n *= m++;  <span class="comment">//m=3,n=6</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习3</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        n1 += (n1++) + (++n1);</span><br><span class="line">        System.out.println(n1); <span class="comment">//n = 32  10+10+12  (++n1)中的n1已经是11了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-比较运算符"><a href="#2-4-3-比较运算符" class="headerlink" title="2.4.3 比较运算符"></a>2.4.3 比较运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较运算符</span></span><br><span class="line"><span class="comment">== != &gt; &lt; &gt;= &lt;= instanceof</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.比较运算符的结果是boolean类型</span></span><br><span class="line"><span class="comment">2.区分== 和  =</span></span><br><span class="line"><span class="comment">3.== 和 != 不仅可以用于数值类型数据之间，还可以用在其他引用类型的变量之间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        System.out.println(i==j);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(i=j);   <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(b1==b2);  <span class="comment">//false</span></span><br><span class="line">        System.out.println(b1=b2);   <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-4-逻辑运算符"><a href="#2-4-4-逻辑运算符" class="headerlink" title="2.4.4 逻辑运算符"></a>2.4.4 逻辑运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符</span></span><br><span class="line"><span class="comment">&amp;逻辑与 &amp;&amp;短路与 |逻辑或 || 短路或 !逻辑非 ^ 逻辑异或</span></span><br><span class="line"><span class="comment">1.用于boolean型变量之间的运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//区分&amp;  和&amp;&amp;</span></span><br><span class="line">        <span class="comment">//运算结果相同；当符号左边是true时，都会执行右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边是false时,只有&amp;会执行右边的计算</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">        b1 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b1 &amp; (num1++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">true</span>;</span><br><span class="line">        b2 = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">10</span> ;</span><br><span class="line">        <span class="keyword">if</span>(b2&amp;&amp; (num2++ &gt; <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="comment">//b2已经是false了，短路与后面的语句就不再执行了，前面是true就要执行</span></span><br><span class="line">            System.out.println(<span class="string">"china"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"japan"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//区分：| 与 ||</span></span><br><span class="line">        <span class="comment">//运算结果相同，当符号左边是false时，二者都会执行符号右边的计算</span></span><br><span class="line">        <span class="comment">//当符号左边为true时，只有|继续执行右边语句</span></span><br><span class="line">        <span class="comment">//开发中推荐使用&amp;&amp; ||</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-位运算符"><a href="#2-4-5-位运算符" class="headerlink" title="2.4.5 位运算符"></a>2.4.5 位运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位运算符 （了解）</span></span><br><span class="line"><span class="comment">结论：</span></span><br><span class="line"><span class="comment">1.操作整型数据</span></span><br><span class="line"><span class="comment">2.&lt;&lt; 每向左移1位 相当于*2   左移 末尾补0</span></span><br><span class="line"><span class="comment">  &gt;&gt; 每向右移1位 相当于/2   右移 根据原先的符号，左边补1或0</span></span><br><span class="line"><span class="comment">  &gt;&gt;&gt; 无符号右移 都用00在前面补  负数会变成正数</span></span><br><span class="line"><span class="comment">  &amp;  二进制各位进行与运算 0位false 1为true</span></span><br><span class="line"><span class="comment">  |  二进制各位进行或运算</span></span><br><span class="line"><span class="comment">  ^  二进制各位进行异或运算</span></span><br><span class="line"><span class="comment">  ~  二进制码按补码各位取反</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  最高效方式计算 2*8？   2&lt;&lt;3 或 8&lt;&lt;1 乘法就是两个8相加或者8个2相加，底层运算更复杂</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">21</span>;</span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;2: "</span>+(i&lt;&lt;<span class="number">2</span>));  <span class="comment">//84</span></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;3: "</span>+(i&lt;&lt;<span class="number">3</span>));  <span class="comment">//168</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"i&lt;&lt;27: "</span>+(i&lt;&lt;<span class="number">27</span>)); <span class="comment">//符号改变 int 32bit 二进制的第一位是符号位，1是负数，0是正数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习： 交换两个变量的值</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一:定义临时变量（推荐）</span></span><br><span class="line">        <span class="keyword">int</span> temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：好处：不用定义临时变量 节省内存空间</span></span><br><span class="line">        <span class="comment">//弊端：相加可能超出存储范围，只能用于数值型</span></span><br><span class="line">        num1 = num1 + num2;</span><br><span class="line">        num2 = num1 - num2;</span><br><span class="line">        num1 = num1 - num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：位运算符  m = (m^n)^n 也只能用于数值类型</span></span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        num2 = num1 ^ num2;</span><br><span class="line">        num1 = num1 ^ num2;</span><br><span class="line">        System.out.println(<span class="string">"num1="</span>+num1+<span class="string">",num2="</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-6-三元运算符"><a href="#2-4-6-三元运算符" class="headerlink" title="2.4.6 三元运算符"></a>2.4.6 三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符 三目运算符</span></span><br><span class="line"><span class="comment">1.格式： (条件表达式)?表达式1 ： 表达式2</span></span><br><span class="line"><span class="comment">2.条件表达式的结果是boolean</span></span><br><span class="line"><span class="comment">    true执行表达式1</span></span><br><span class="line"><span class="comment">    false执行表达式2</span></span><br><span class="line"><span class="comment">3.表达式1和表达式2 能够统一为一个类型，才能用一个新的变量去接收</span></span><br><span class="line"><span class="comment">4.可以嵌套使用</span></span><br><span class="line"><span class="comment">5.凡是三元运算符，都可以改写为if-else；相反则不行</span></span><br><span class="line"><span class="comment">6.如果既可以用三元运算符又可以使用if-else 优先用三元运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TripleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取两个整数的较大值</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> max = (m&gt;n)? m : n;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        <span class="keyword">double</span> max0 = (m&gt;n)? <span class="number">2</span> : <span class="number">1.0</span>;</span><br><span class="line">        n=<span class="number">12</span>;</span><br><span class="line">        String maxStr = (m&gt;n)? <span class="string">"big"</span> : ((m == n)? <span class="string">"equal"</span>:<span class="string">"small"</span>);  <span class="comment">//三元运算符作为一个表达式 里面输出的是String</span></span><br><span class="line">        System.out.println(maxStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取三个数的最大值</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = -<span class="number">43</span>;</span><br><span class="line">        <span class="keyword">int</span> max1 = (n1&gt;n2)? n1 : n2;</span><br><span class="line">        <span class="keyword">int</span> max2 = (max1&gt;n3)? max1 : n3;</span><br><span class="line">        System.out.println(max2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-运算符的优先级"><a href="#2-4-7-运算符的优先级" class="headerlink" title="2.4.7 运算符的优先级"></a>2.4.7 运算符的优先级</h3><p>了解</p><h2 id="2-5-程序流程控制"><a href="#2-5-程序流程控制" class="headerlink" title="2.5 程序流程控制"></a>2.5 程序流程控制</h2><h3 id="2-5-0-使用Scanner获取数据"><a href="#2-5-0-使用Scanner获取数据" class="headerlink" title="2.5.0 使用Scanner获取数据"></a>2.5.0 使用Scanner获取数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何从键盘获取不同类型的变量：需要Scanner类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">具体实现步骤：</span></span><br><span class="line"><span class="comment">1. 导包： import java.util.Scanner; java.util为包名，Scanner为类</span></span><br><span class="line"><span class="comment">2.Scanner的实例化</span></span><br><span class="line"><span class="comment">3.调用Scanner类的相关方法，来获取指定类型的变量</span></span><br><span class="line"><span class="comment">注意：如果输入的数据类型与要求不匹配时，会报异常导致程序终止运行 InputMisMatchException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//Scanner为类 scan为标识符 new为关键字 System.in为从系统输入 新建了以个对象</span></span><br><span class="line">        System.out.println(<span class="string">"input your name:"</span>);  <span class="comment">//char以string替代，没有char相关方法</span></span><br><span class="line">        String name = scan.next();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">"input your age:"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = scan.nextInt(); <span class="comment">//nextInt为Scanner类中的方法之一</span></span><br><span class="line">        System.out.println(age);</span><br><span class="line">        System.out.println(<span class="string">"input your weight:"</span>);</span><br><span class="line">        <span class="keyword">double</span> weight = scan.nextDouble();</span><br><span class="line">        System.out.println(weight);</span><br><span class="line">        System.out.println(<span class="string">"Are u single?(true/false)"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> status = scan.nextBoolean();</span><br><span class="line">        System.out.println(status);</span><br><span class="line">        System.out.println(<span class="string">"input your gender"</span>);</span><br><span class="line">        String gender = scan.next();</span><br><span class="line">        <span class="keyword">char</span> genderChar = gender.charAt(<span class="number">0</span>); <span class="comment">//变量名.charAt()  获取索引位置0上的字符</span></span><br><span class="line">        System.out.println(genderChar);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-1-分支结构"><a href="#2-5-1-分支结构" class="headerlink" title="2.5.1 分支结构"></a>2.5.1 分支结构</h3><h4 id="if-else-if-else-结构"><a href="#if-else-if-else-结构" class="headerlink" title="if- else if -else 结构"></a>if- else if -else 结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分支结构中的if else（条件判断结构）</span></span><br><span class="line"><span class="comment">三种结构</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">------------------</span></span><br><span class="line"><span class="comment">if (条件表达式1)&#123;</span></span><br><span class="line"><span class="comment">    执行表达式1</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式2) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式2</span></span><br><span class="line"><span class="comment">&#125;else if(条件表达式3) &#123;</span></span><br><span class="line"><span class="comment">    执行表达式3&#125;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">    执行表达式n</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//举例1</span></span><br><span class="line">        <span class="keyword">int</span> heartBeats = <span class="number">79</span>;</span><br><span class="line">        <span class="keyword">if</span> (heartBeats &lt;<span class="number">60</span> || heartBeats&gt;<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"further check"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"healthy"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例2</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"anime"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"porn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例3</span></span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"false"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"teen"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"grownup"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.else 结构是可选的,如果没有结果可以不输出</span></span><br><span class="line"><span class="comment">2.针对条件表达式：</span></span><br><span class="line"><span class="comment">&gt;如果多个条件表达式之间是互斥关系（没有交集），判断和执行语句上下位置无所谓</span></span><br><span class="line"><span class="comment">&gt;如果有交集，需要根据实际情况考虑清楚应该讲那个结构声明在上面</span></span><br><span class="line"><span class="comment">&gt;如果有包含关系，通常情况下要将范围小的放在范围大的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input your grade:(0-100)"</span>);</span><br><span class="line">        <span class="keyword">int</span> grade = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (grade == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"BMW automobile"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">80</span> &amp;&amp; grade&lt;=<span class="number">99</span> )&#123;</span><br><span class="line">            <span class="comment">//不能写作 80&lt;grade&lt;=99,前面一步结果为boolean，不能和后面的int进行比较</span></span><br><span class="line">            System.out.println(<span class="string">"iPhone Xs Max"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( grade&gt;<span class="number">60</span> &amp;&amp; grade&lt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"iPad Pro"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2：将输入的三个数排序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.if-else的结构是可以嵌套的</span></span><br><span class="line"><span class="comment">2.嵌套结构中的大括号是可以省略的（还是加上好，可能经常要在其中加入其他语句），只执行if下的1句</span></span><br><span class="line"><span class="comment">3.else 就近原则 和最近的if配对</span></span><br><span class="line"><span class="comment">4.if(条件)，判断条件中如果变量是boolean，=号也能编译通过</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iftest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input three integral:(finish with enter)"</span>);</span><br><span class="line">        <span class="keyword">int</span> a = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> c = scan.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a&gt;b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;a)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;b)&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(a+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;b)&#123;</span><br><span class="line">                System.out.println(c+<span class="string">"&gt;"</span>+b+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c&lt;a)&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+a+<span class="string">"&gt;"</span>+c);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(b+<span class="string">"&gt;"</span>+c+<span class="string">"&gt;"</span>+a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：彩票问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> ranNum = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span> + <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"input your lottery number:"</span>);</span><br><span class="line">        <span class="keyword">int</span> lotNum = scan.nextInt();</span><br><span class="line">        System.out.println(ranNum);</span><br><span class="line">        <span class="keyword">int</span> rTen = ranNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> rOne = ranNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lTen = lotNum/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> lOne = lotNum%<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (lTen == rTen &amp;&amp; lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$10000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne &amp;&amp; lOne == rTen)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$3000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rTen || lOne == rOne)&#123;</span><br><span class="line">            System.out.println(<span class="string">"$1000"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lTen == rOne || lOne == rTen) &#123;</span><br><span class="line">            System.out.println(<span class="string">"$500"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"nothing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何获取随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：如何获取一个随机数：10-99</span></span><br><span class="line"><span class="keyword">double</span> value = Math.random();<span class="comment">//区间[0.0,1.0)</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">System.out.println(num)</span><br><span class="line"><span class="comment">//公式  [a,b]: (int)(Math.random()*(b-a+1)+a)</span></span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if(String的变量名.equals());</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfExer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input height(cm) wealth(10Grand) appearance(true/false:"</span>);</span><br><span class="line">        <span class="keyword">double</span> height = scan.nextDouble();</span><br><span class="line">        <span class="keyword">int</span> wealth = scan.nextInt();</span><br><span class="line">        <span class="keyword">boolean</span> appearance = scan.nextBoolean();</span><br><span class="line">        <span class="keyword">if</span> (height&gt;<span class="number">180.0</span> &amp;&amp;wealth&gt;<span class="number">1000</span> &amp;&amp; appearance== <span class="keyword">true</span> )&#123;</span><br><span class="line">            System.out.println(<span class="string">"marry him"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height&gt;<span class="number">180.0</span> ||wealth&gt;<span class="number">1000</span> || appearance== <span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"think twice"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"find a better one"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-case结构"><a href="#switch-case结构" class="headerlink" title="switch - case结构"></a>switch - case结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.格式</span></span><br><span class="line"><span class="comment">switch(表达式)&#123;</span></span><br><span class="line"><span class="comment">case 常量1：</span></span><br><span class="line"><span class="comment">     执行语句1；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">case 常量2：</span></span><br><span class="line"><span class="comment">     执行语句2；</span></span><br><span class="line"><span class="comment">     //break;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">default:</span></span><br><span class="line"><span class="comment">      执行语句n;</span></span><br><span class="line"><span class="comment">      //break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.说明：</span></span><br><span class="line"><span class="comment">&gt; 根据switch表达式的值，依次匹配case中的常量。一旦匹配成功，进入相应case中结构中</span></span><br><span class="line"><span class="comment">调用执行语句，调用完毕后，则仍然继续向下执行其他case中的执行语句，直到遇到break</span></span><br><span class="line"><span class="comment">或者switch结构结束。</span></span><br><span class="line"><span class="comment">&gt; break,在switch case结构中，一旦遇到就跳出，是可选的</span></span><br><span class="line"><span class="comment">&gt; switch 结构中的表达式只能是如下的6中数据类型之一：</span></span><br><span class="line"><span class="comment">byte short int char String（JDK7.0新增） 枚举类型(JDK 5.0新增)</span></span><br><span class="line"><span class="comment">&gt;case后面只能声明常量，不能声明范围</span></span><br><span class="line"><span class="comment">&gt;default 类似于if - else中的 else ，也是可选的，而且位置是灵活的</span></span><br><span class="line"><span class="comment">&gt;能用switch case都能用 if else，反之不行</span></span><br><span class="line"><span class="comment">&gt;写分支结构时，二者都可用时，switch中的表达式的取值不多的情况下，有限选择 switch case，因为switch case 的执行效率稍高，实际开发中用if else较多。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"zero"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"one"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"two"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"three"</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvertCapital</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input the character"</span>);</span><br><span class="line">        String character = scan.next();</span><br><span class="line">        <span class="keyword">char</span> cha = character.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (cha) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                System.out.println(<span class="string">"A"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                System.out.println(<span class="string">"B"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                System.out.println(<span class="string">"C"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                System.out.println(<span class="string">"D"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                System.out.println(<span class="string">"E"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"others"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//说明：如果执行语句相同，可以合并</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">78</span>;</span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//练习 ：一年中的第几天 但是怎么限定每个月的值的取值范围呢</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input month(1-12) &amp; date(0-31)"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> date = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> days = <span class="number">0</span>;             <span class="comment">//定义变量要初始化值</span></span><br><span class="line">        <span class="keyword">switch</span> (month)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                days = (month-<span class="number">1</span>)*<span class="number">30</span>+date+<span class="number">4</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"wrong"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"this is the "</span>+ days +<span class="string">" days of 2019"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchCaseTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的year："</span>);</span><br><span class="line">        <span class="keyword">int</span> year = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的month："</span>);</span><br><span class="line">        <span class="keyword">int</span> month = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"请输入2019年的day："</span>);</span><br><span class="line">        <span class="keyword">int</span> day = scan.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量来保存总天数</span></span><br><span class="line">        <span class="keyword">int</span> sumDays = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        sumDays += <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!= <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sumDays += <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sumDays += <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sumDays += <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sumDays += day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"2019年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日是当年的第"</span> + sumDays + <span class="string">"天"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-循环结构"><a href="#2-5-3-循环结构" class="headerlink" title="2.5.3 循环结构"></a>2.5.3 循环结构</h3><p>在某些条件满足的情况下，反复执行特定代码</p><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">For循环的使用</span><br><span class="line">一、循环结构的4个要素</span><br><span class="line">1.初始条件</span><br><span class="line">2.循环条件  boolean 类型</span><br><span class="line">3.循环体</span><br><span class="line">4.迭代条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、for 循环的结构</span><br><span class="line">for（1；2；4）&#123;</span><br><span class="line">    3;</span><br><span class="line">&#125;</span><br><span class="line">执行过程1&gt;2&gt;3&gt;4&gt;2&gt;3&gt;4&gt;...&gt;2 退出循环</span><br><span class="line"></span><br><span class="line">i在循环外是不可调用的</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class ForTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for(int i&#x3D;1;i &lt;&#x3D; 5;i++)&#123;</span><br><span class="line">            System.out.println(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;练习：</span><br><span class="line">        int num &#x3D; 1;  &#x2F;&#x2F;要在外面初始化值，不然可能后面无法输出 如果是if else则为二选一，一定会有值，可以不用初始化，如果只是if没有else也要初始化。</span><br><span class="line">        for(System.out.print(&#39;a&#39;);num &lt;&#x3D; 3;System.out.print(&#39;c&#39;),num++)&#123;</span><br><span class="line">            System.out.print(&#39;b&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;输出结果：abcbcbc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历100内的偶数,输出所有偶数的和，输出偶数的个数</span><br><span class="line">class TraverseEven &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int sum &#x3D; 0;  &#x2F;&#x2F;sum要在循环外创建，不然每次进循环就又赋值0了</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;&#x3D; 100; i++) &#123;</span><br><span class="line">            if (i % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum +&#x3D; i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);  &#x2F;&#x2F;写在for语句外面</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;练习</span><br><span class="line">    class ForExer&#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            for(int i&#x3D;1;i&lt;151;i++)&#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                if(i%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    System.out.print(&quot; foo&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if(i%5&#x3D;&#x3D;0)&#123;  &#x2F;&#x2F;这里不用else if 因为既是3也是5的倍数</span><br><span class="line">                    System.out.print(&quot; biz&quot;);</span><br><span class="line">                &#125;else if(i%7&#x3D;&#x3D;0) &#123;</span><br><span class="line">                    System.out.print(&quot; baz&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&#39;\n&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>break 关键字的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break关键字的使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输入正整数m,n  求最大公约数和最小公倍数  </span></span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"input 2 positive integral:"</span>);</span><br><span class="line">    <span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span> max = (m&gt;n)?m:n;</span><br><span class="line">    <span class="keyword">int</span> min = (m&lt;n)?m:n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max; i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"greatest common divisor is "</span>+i);</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">//一旦执行到break 就跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = min; i&lt;=m*n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % m == <span class="number">0</span> &amp;&amp; i % n == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"least common multiple is "</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while循环的使用</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">while(2)&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.写while循环不能少了迭代条件，可能导致死循环。</span></span><br><span class="line"><span class="comment">2.避免死循环</span></span><br><span class="line"><span class="comment">3.for和while可以相互转换</span></span><br><span class="line"><span class="comment">4.初始条件的作用域不同</span></span><br><span class="line"><span class="comment">5.初始化条件复杂的就用while</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法：有限性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1 2 3 4 2 3 4...2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do - while"></a>do - while</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do-while循环的使用</span></span><br><span class="line"><span class="comment">1;</span></span><br><span class="line"><span class="comment">do&#123;</span></span><br><span class="line"><span class="comment">3;</span></span><br><span class="line"><span class="comment">4;</span></span><br><span class="line"><span class="comment">&#125; while(2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行过程：</span></span><br><span class="line"><span class="comment">1  3 4  2 3 4  2 3 4 ...2</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">1.do while循环至少会执行一次循环体</span></span><br><span class="line"><span class="comment">2.使用 for while 较多，do while 较少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;<span class="number">101</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        System.out.println(sum + (<span class="keyword">char</span>)count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while-true-和-for"><a href="#while-true-和-for" class="headerlink" title="while(true) 和 for( ; ; )"></a>while(true) 和 for( ; ; )</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从键盘读入不确定个数的整数，并判断正负数的个数，输入为0时结束程序</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不再限制循环次数的结构：for(;;) while(true)</span></span><br><span class="line"><span class="comment">结束循环的方式：</span></span><br><span class="line"><span class="comment">1.循环条件返回 false</span></span><br><span class="line"><span class="comment">2.在循环体中执行break</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> postive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> negative =<span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"input"</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;<span class="comment">//while的判断条件是一个boolean</span></span><br><span class="line">            <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                postive++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                negative++;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;System.out.println(postive);</span><br><span class="line">        System.out.println(negative);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.5.x嵌套循环</span></span><br><span class="line"><span class="comment">/* 嵌套循环的使用</span></span><br><span class="line"><span class="comment">1.定义：将一个循环结构A声明在另一个循环结构B的结构体中，就构成了嵌套循环</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">内层循环；</span></span><br><span class="line"><span class="comment">外层循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.内层循环结构遍历一遍，相当于外层循环体执行了一次</span></span><br><span class="line"><span class="comment">4.外层m次，内层n次，内层循环体执行了m*n次</span></span><br><span class="line"><span class="comment">5.外层控制行数，内层控制列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileTest3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=<span class="number">4</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>;m&lt;=<span class="number">5</span>;m++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>; n&lt;=<span class="number">5</span>-m;n++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印菱形 lozenge diamond</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment"> * * * *</span></span><br><span class="line"><span class="comment">  * * *</span></span><br><span class="line"><span class="comment">   * *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileExer1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上半部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">5</span>-i;k++)&#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"* "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下半部分 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套循环的应用：九九乘法表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplicationTable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">"*"</span>+j+<span class="string">"="</span>+(i*j)+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法优化：输出质数"><a href="#算法优化：输出质数" class="headerlink" title="算法优化：输出质数"></a>算法优化：输出质数</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100以内所有质数的输出</span></span><br><span class="line"><span class="comment">//自己做的 （没有引入boolean,错误做法）</span></span><br><span class="line"><span class="comment">//流程控制结构的的使用+算法逻辑（难点）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(i-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于10的情况</span></span><br><span class="line">            <span class="comment">//if (i%2!=0&amp;&amp;i%3!=0&amp;&amp;i%5!=0&amp;&amp;i%7!=0)&#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                    count0++;</span><br><span class="line">                    <span class="keyword">break</span>;  <span class="comment">//使用break来结束循环，就能够只打印一次</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count0);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;<span class="comment">//遍历100以内的自然数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt; i;j++)&#123;<span class="comment">//j:被i去除</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;    <span class="comment">//i=2直接没进入内循环，所以是true就输出了</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对质数问题的优化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;<span class="comment">//标识i是否被j除尽，一旦除尽，修改其值</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=i-<span class="number">1</span> ;j++)&#123;</span><br><span class="line">          <span class="comment">//  for(int j = 2;j &lt;=Math.sqrt(i) ;j++)&#123;</span></span><br><span class="line">                <span class="comment">//优化2 开根号 使用两个数进行因式分解，就只要考虑小的一段，开根号为因式分解的中间临界点</span></span><br><span class="line">                <span class="comment">//对本身是质数的自然数有效</span></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123; <span class="comment">//i被j除尽</span></span><br><span class="line">                    isFlag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="comment">//break;   //优化1：只对非质数有效的优化</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(i);</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重置isFlag</span></span><br><span class="line">            isFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ;</span><br><span class="line">        <span class="comment">//衡量优化的指标  31511ms 优化1后 3560ms 优化2 后214ms</span></span><br><span class="line">        <span class="comment">//不再输出只计数       40144ms 优化1后 5064ms 优化2 后41ms</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出质数的实现方式二；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumber2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();  <span class="comment">//当前时间距离 1970.1.1的毫秒数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        label: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100000</span>;i++)&#123;<span class="comment">//遍历</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;=Math.sqrt(i) ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> label;   <span class="comment">//一旦被除尽，就进入下一个i；</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   凡是能执行到吃步骤的就都是质数</span></span><br><span class="line">                System.out.println(i);<span class="comment">//是我一开始想尝试的做法</span></span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"amount of prime number:"</span>+count);</span><br><span class="line">        System.out.println(<span class="string">"time "</span>+(end-start)) ; <span class="comment">//199</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-continue-的用法【带标签】"><a href="#break-continue-的用法【带标签】" class="headerlink" title="break continue 的用法【带标签】"></a>break continue 的用法【带标签】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">break coutinue 的使用</span></span><br><span class="line"><span class="comment">break： switch case</span></span><br><span class="line"><span class="comment">          循环结构：  结束当前循环</span></span><br><span class="line"><span class="comment">continue: 循环结构    结束当次循环</span></span><br><span class="line"><span class="comment">相同：</span></span><br><span class="line"><span class="comment">break 和continue后不能加语句，无法编译</span></span><br><span class="line"><span class="comment">默认跳出包裹此关键字最近一层的循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//break;  //123</span></span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//123567910</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BreakContinueTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       l: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// break l;   //结束指定标识的一层循环结构  123</span></span><br><span class="line">                    <span class="keyword">continue</span> l;  <span class="comment">//  结束指定标识的一层循环结构的当次循环 123123123123</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>衡量一个功能代码的优劣势：</p><ol><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率与低存储：<strong>时间复杂度</strong>、空间复杂度（衡量算法的好坏）</li></ol><p>“+score[i]);<br>            }else if(score[i]&gt;=(max-30)) {<br>                System.out.println(“student “+i+” level:”+”C”+” “+score[i]);<br>            }else {<br>                System.out.println(“student “+i+” level:”+”D”+” “+score[i]);<br>            }<br>        }    </p><pre><code>}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.2 二维数组</span><br><span class="line"></span><br><span class="line">#### 3.2.1 概念</span><br><span class="line"></span><br><span class="line">多维数组(以二维为主）</span><br><span class="line">理解一维数组array1又作为另一一维数组array2的元素而存在。</span><br><span class="line">其实从数组底层的运行机制来看，没有多维数组。</span><br><span class="line">array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</span><br><span class="line"></span><br><span class="line">#### 3.2.2 二维数组的使用</span><br><span class="line"></span><br><span class="line">1. 二维数组的声明和初始化</span><br><span class="line">2. 如何调用数组的制定位置的元素</span><br><span class="line">3. 如何获取数组的长度</span><br><span class="line">4. 如何遍历数组</span><br><span class="line">5. 数组元素的默认初始化值</span><br><span class="line">6. 数组的内存解析</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;java</span><br><span class="line">package com.atguigu.java;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">多维数组的使用(以二维为主）</span><br><span class="line">1.理解一维数组array1又作为另一一维数组array2的元素而存在。</span><br><span class="line">其实从数组底层的运行机制来看，没有多维数组。</span><br><span class="line">2.array2的堆中存放的是array1的地址  栈&gt; 堆中的地址&gt; 堆中另一个数组</span><br><span class="line"></span><br><span class="line">2.二维数组的使用：</span><br><span class="line">1）声明和初始化 静态和动态</span><br><span class="line">2）赋值和调用</span><br><span class="line">3）长度</span><br><span class="line">4）遍历（索引）</span><br><span class="line">5）默认初始化值</span><br><span class="line">6）内存解析</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">public class ArrayTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;1.二维数组的声明和初始化</span><br><span class="line">&#x2F;&#x2F;静态初始化</span><br><span class="line">int[] arr &#x3D; new int[] &#123;1,2&#125;;</span><br><span class="line">int[][] arr1 &#x3D; new int[][]&#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;6,7,8&#125;&#125;;</span><br><span class="line">&#x2F;&#x2F;动态初始化1</span><br><span class="line">String[][] arr2 &#x3D; new String[3][2]; &#x2F;&#x2F; 3个地址 指向3个另外的数组</span><br><span class="line">&#x2F;&#x2F;动态初始化2</span><br><span class="line">String[][] arr3 &#x3D; new String[3][];</span><br><span class="line">&#x2F;&#x2F;还没有赋值 外面的数组值是null，还没有指向的数组，所以也没有在堆中预留内部数组的空间</span><br><span class="line">&#x2F;&#x2F;另外的正确写法（较少用）：</span><br><span class="line">int arr4[][] &#x3D; new int[2][2];</span><br><span class="line">int[] arr5[] &#x3D; new int[2][2];</span><br><span class="line">int arr6[] &#x3D; new int[2];</span><br><span class="line">int[] arr7 &#x3D; &#123;1,2,3&#125;;&#x2F;&#x2F;类型推断</span><br><span class="line">int[][] arr8 &#x3D; &#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;;</span><br><span class="line">String[] arr9 &#x3D; &#123;&quot;A&quot;,&quot;B&quot;&#125;;</span><br><span class="line">&#x2F;&#x2F;但是分行的是不能省略的，只有一行的是可以省略的</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.如何调用数组制定位置的元素</span><br><span class="line">System.out.println(arr1[0][1]); &#x2F;&#x2F;2</span><br><span class="line">System.out.println(arr2[1][1]); &#x2F;&#x2F;null</span><br><span class="line">&#x2F;&#x2F;System.out.println(arr3[1][0]); &#x2F;&#x2F;报错NullPointerException 空指针</span><br><span class="line"></span><br><span class="line">arr3[1] &#x3D; new String[4]; </span><br><span class="line">&#x2F;&#x2F;在外面数组的索引1位置处，new一个4元素的string数据的空间 </span><br><span class="line">&#x2F;&#x2F;地址（16进制0x）赋值到索引位置1，等于创建了以个指针</span><br><span class="line">System.out.println(arr3[1][0]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.获取长度</span><br><span class="line">System.out.println(arr1.length);   &#x2F;&#x2F;3   length和内部的数组无关</span><br><span class="line">System.out.println(arr1[0].length);&#x2F;&#x2F;2   length和内部的数组无关</span><br><span class="line">System.out.println(arr1[2].length);&#x2F;&#x2F;3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.如何遍历</span><br><span class="line">&#x2F;&#x2F;嵌套循环</span><br><span class="line">&#x2F;&#x2F;二维数组：两层for循环</span><br><span class="line">for(int i &#x3D; 0;i&lt;arr1.length;i++) &#123;</span><br><span class="line">for(int j &#x3D; 0; j&lt;arr1[i].length;j++) &#123;</span><br><span class="line">System.out.println(arr1[i][j]+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.二维数组的元素的默认初始化值</span><br><span class="line">&#x2F;*</span><br><span class="line"> 分为：外层数组的元素，内层数组的元素</span><br><span class="line"> 初始化方式1：</span><br><span class="line"> int[][] arr &#x3D; new int[4][3];</span><br><span class="line"> 外层元素：arr[0],arr[1];</span><br><span class="line"> 内层元素：arr[0][1],arr[2][3];</span><br><span class="line"> 外层元素的初始化值为null </span><br><span class="line"> 内层元素的初始化值与一维相同 </span><br><span class="line"> </span><br><span class="line"> 初始化方式二：</span><br><span class="line"> int[][] arr &#x3D; new int[4][];</span><br><span class="line"> 外层元素：null</span><br><span class="line"> 内层元素：无法调用，报错 </span><br><span class="line"> </span><br><span class="line"> *&#x2F;</span><br><span class="line">int[][] arr10&#x3D; new int[4][3];</span><br><span class="line">System.out.println(arr10[0]);  &#x2F;&#x2F;[I@424c0bc4地址值 在arr[0]位置的数组的地址值</span><br><span class="line">System.out.println(arr10[0][0]); &#x2F;&#x2F;0</span><br><span class="line">System.out.println(arr10);   &#x2F;&#x2F;[[I@3c679bde &quot;[[&quot;表示二维 &quot;I&quot;表示int @后面是16进制的数组</span><br><span class="line">int[] arr11 &#x3D; new int[2];</span><br><span class="line">System.out.println(arr11);&#x2F;&#x2F;[I@3c679bde</span><br><span class="line"></span><br><span class="line">float[][] arr12&#x3D; new float[4][3];</span><br><span class="line">System.out.println(arr12[0]);  &#x2F;&#x2F;[F@8807e25</span><br><span class="line">System.out.println(arr12[0][0]); &#x2F;&#x2F;0.0</span><br><span class="line">System.out.println(arr12); &#x2F;&#x2F;[[F@63e31ee</span><br><span class="line"></span><br><span class="line">String[][] arr13&#x3D; new String[4][3];</span><br><span class="line">System.out.println(arr13[0]);  &#x2F;&#x2F;[Ljava.lang.String;@68fb2c38</span><br><span class="line">System.out.println(arr13[0][0]); &#x2F;&#x2F;null</span><br><span class="line">System.out.println(arr13); &#x2F;&#x2F;[[Ljava.lang.String;@567d299b</span><br><span class="line"></span><br><span class="line">double[][] arr14&#x3D; new double[4][];</span><br><span class="line">System.out.println(arr14[0]);  &#x2F;&#x2F;null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.内存结构<br>        //main方法结束后，变量先进后出，出栈，指针就没有了，回收内存，堆中回收外层，之后内层元素失去指针也没回收。</p><p>方法中变量都是局部变量，局部变量都是在栈中。</p><p>地址是JVM算出来的hash值，不是底层内存真实的地址<br>引用类型的变量，存的不是null就是地址值</p><img src="https://i.loli.net/2020/06/16/N9Xoq3bajlTyvV7.png" alt="二维数组的内存解析" style="zoom:85%;" /><p>数据结构</p><ol><li>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多</li><li>数据的存储结构<ul><li>线性表：一对一关系 顺序表（如：数组）、链表、栈、队列</li><li>树形结构：二叉树 数据库中的B+树</li><li>图形结构（多对多）</li></ul></li></ol><p>算法：</p><ol><li>排序算法</li><li>搜索算法</li></ol><h4 id="练习：打印杨辉三角"><a href="#练习：打印杨辉三角" class="headerlink" title="练习：打印杨辉三角"></a>练习：打印杨辉三角</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用二维数组打印一个10行的杨辉三角</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YangHuiTriangle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr[i]= <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">arr[i][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//首末赋值</span></span><br><span class="line">arr[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;arr[i].length-<span class="number">1</span>;j++) &#123;<span class="comment">//这里用length作为判断条件。</span></span><br><span class="line">arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j]; <span class="comment">//某行等于上行的两个数的相加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(arr.length);i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr[i].length;j++) &#123;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-数组涉及常见算法"><a href="#3-3-数组涉及常见算法" class="headerlink" title="3.3 数组涉及常见算法"></a>3.3 数组涉及常见算法</h3><p>/*<br>数组涉及的常见算法：<br>1.<strong>数组元素的赋值</strong>（杨辉三角、回形数）<br>2.求数值型数组中元素的最大值、最小值、平均数、总和<br>3.数组的赋值、翻转、查找（线性查找、<strong>二分法查找</strong>）<br>4.数组元素的<strong>排序算法</strong>（冒泡算法）<br> */</p><h4 id="3-3-1-数组元素赋值"><a href="#3-3-1-数组元素赋值" class="headerlink" title="3.3.1 数组元素赋值"></a>3.3.1 数组元素赋值</h4><p>杨辉三角/回形树</p><p>练习：创建一个int[6]数组，要求元素在1-30之间，且是随机赋值，同时要求元素的值各不相同;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="comment">//int temp=(int)(Math.random()*30+1);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//while(temp==arr[i]) &#123;</span></span><br><span class="line"><span class="comment">//arr[i] = (int)(Math.random()*30+1);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//temp = arr[1];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;i;j++) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[i]==arr[j]) &#123;</span><br><span class="line">arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">30</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-最大、最小，和、平均"><a href="#3-3-2-最大、最小，和、平均" class="headerlink" title="3.3.2 最大、最小，和、平均"></a>3.3.2 最大、最小，和、平均</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmStatistic</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr2 =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> avg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">arr2[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">90</span>+<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&gt;max) &#123;</span><br><span class="line">max =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(arr2[i]&lt;min) &#123;</span><br><span class="line">min =arr2[i];</span><br><span class="line">&#125;</span><br><span class="line">sum += arr2[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.print(arr2[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">avg = sum/(<span class="keyword">double</span>)arr2.length;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(avg);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-赋值、翻转、查找"><a href="#3-3-3-赋值、翻转、查找" class="headerlink" title="3.3.3 赋值、翻转、查找"></a>3.3.3 赋值、翻转、查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmAssignment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">array2=array1;   <span class="comment">//堆空间中实际上只有一个数组，array2得到array1的赋值是个地址值</span></span><br><span class="line"><span class="comment">//new一次只有一个数组</span></span><br><span class="line"><span class="comment">//不能称作数组的复制，未在堆中开辟新的内存空间，类似于快捷方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array2[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array1.length;i++) &#123;</span><br><span class="line">System.out.print(array1[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(array1);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array2);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的复制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReplicate</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array11 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] array22 = <span class="keyword">new</span> <span class="keyword">int</span>[array11.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">array22[i]=array11[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array11.length;i++) &#123;</span><br><span class="line">System.out.print(array11[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">array22[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array22.length;i++) &#123;</span><br><span class="line">System.out.print(array22[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(array11);<span class="comment">//[I@424c0bc4                          </span></span><br><span class="line">System.out.println(array22);<span class="comment">//[I@424c0bc4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现array2数组的反转</span></span><br><span class="line"><span class="comment">//写法1:多new了一个数组，要两个变量，效率不高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line">String[] array4 = <span class="keyword">new</span> String[array3.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array3.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = array3.length-i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">array4[j]=array3[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array4.length;i++) &#123;</span><br><span class="line">System.out.print(array4[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmReverse</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] array5 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"dd"</span>,<span class="string">"jj"</span>,<span class="string">"uu"</span>,<span class="string">"haha"</span>&#125;;</span><br><span class="line"><span class="comment">//String[] array6 = new String[array5.length];</span></span><br><span class="line"><span class="comment">//for(int i = 0;i&lt;array5.length/2;i++) &#123;</span></span><br><span class="line"><span class="comment">//String temp = array5[i];</span></span><br><span class="line"><span class="comment">//array5[i]=array5[array5.length-i-1];</span></span><br><span class="line"><span class="comment">//array5[array5.length-i-1]=temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//方法三：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=array5.length-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">String temp1=array5[j];</span><br><span class="line">array5[j]=array5[i];</span><br><span class="line">array5[i]=temp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array5.length;i++) &#123;</span><br><span class="line">System.out.print(array5[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找（或搜索）</span></span><br><span class="line"><span class="comment">//线性查找：一个个找</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] search = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"CC"</span>,<span class="string">"FF"</span>,<span class="string">"PPP"</span>&#125;;</span><br><span class="line">Scanner scan =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"please input the object you wanna search:"</span>);</span><br><span class="line">String object = scan.next();</span><br><span class="line"><span class="keyword">boolean</span> isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;search.length;i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(object.equals(search[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"the index of object is "</span>+i);</span><br><span class="line">isflag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(isflag) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分法查找：</span></span><br><span class="line"><span class="comment">//前提：所有查找的数组必须有序</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">98</span>,-<span class="number">22</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">46</span>,<span class="number">98</span>,<span class="number">210</span>,<span class="number">333</span>,<span class="number">456</span>&#125;;</span><br><span class="line">Scanner scan1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"input:"</span>);</span><br><span class="line"><span class="keyword">int</span> object1 = scan1.nextInt();</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;<span class="comment">//初始首索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr2.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> isflag2= <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(head &lt;= end) &#123;</span><br><span class="line"><span class="keyword">int</span> middle = (head+end)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(object1==arr2[middle]) &#123;</span><br><span class="line">System.out.println(<span class="string">"index： "</span>+middle);</span><br><span class="line">isflag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(object1 &gt; arr2[middle]) &#123;</span><br><span class="line">head = middle+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">end = middle-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isflag2) &#123;</span><br><span class="line">System.out.println(<span class="string">"not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//差值法 哈希算法</span></span><br></pre></td></tr></table></figure><h4 id="3-3-4-排序"><a href="#3-3-4-排序" class="headerlink" title="3.3.4 排序"></a>3.3.4 排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设n个记录的序列为&#123;R1 R2 ... Rn&#125;,其相应的关键字为&#123;K1,K2...Kn&#125;</span></span><br><span class="line"><span class="comment">重新排序&#123;Ri1,Ri2...Rin&#125;,满足&#123;Ki1&lt;=Ki2...&lt;=Kin&#125;,通常排序的目的是为了快速查找</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">衡量优劣： </span></span><br><span class="line"><span class="comment">时间复杂度 </span></span><br><span class="line"><span class="comment">空间复杂度 </span></span><br><span class="line"><span class="comment">稳定性：关键字相等的A,B，排序后先后书序不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">内部排序</span></span><br><span class="line"><span class="comment">外部排序：需要借助内存之外的磁盘储存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">十大内部排序算法：</span></span><br><span class="line"><span class="comment">选择排序：直接选择排序、**堆排序**</span></span><br><span class="line"><span class="comment">**交换排序**：冒泡、快速排序</span></span><br><span class="line"><span class="comment">插入排序：直接插入、折半插入、Shell排序（希尔排序）</span></span><br><span class="line"><span class="comment">**归并排序**</span></span><br><span class="line"><span class="comment">桶式排序（较少）</span></span><br><span class="line"><span class="comment">基数排序（较少）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">算法的五大特征：</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">有穷性</span></span><br><span class="line"><span class="comment">确定性</span></span><br><span class="line"><span class="comment">可行性</span></span><br><span class="line"><span class="comment">注：非确定性算法：并行算法 概率算法 深度学习</span></span><br><span class="line"><span class="comment">不要求终止的计算描述：过程</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的冒泡排序的实现</span></span><br><span class="line"><span class="comment">//n个元素，n-1趟，比较相邻的两个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlgorithmSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">0</span>,<span class="number">23</span>,<span class="number">10</span>,-<span class="number">45</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">45</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序：递归  (思想)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序算法的横向对比</span></span><br></pre></td></tr></table></figure><h3 id="3-4-Arrays-工具类的使用"><a href="#3-4-Arrays-工具类的使用" class="headerlink" title="3.4 Arrays 工具类的使用"></a>3.4 Arrays 工具类的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> java.util.Arrays:操作数组的工具类,定义了很多操作数组的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.boolean equals(int[] a, int[] b):判断两个数组是否相等</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String toString(int[] a):输出数组信息</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void fill(int[] a, int val):将指定值填充到数组</span></span><br><span class="line">Arrays.fill(arr1, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//void sort(int[] a):排序</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));<span class="comment">//[1, 2, 3]</span></span><br><span class="line">System.out.println(arr2.toString());<span class="comment">//注意两者的区别[I@16b4a017</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0].toString());  //int型不能用该方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int binarySearch(int[] a,int key)</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = Arrays.binarySearch(arr3,<span class="number">5</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//返回负数就是未找到</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-数组中的常见异常"><a href="#3-5-数组中的常见异常" class="headerlink" title="3.5 数组中的常见异常"></a>3.5 数组中的常见异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组中的常见异常：</span></span><br><span class="line"><span class="comment">1.数组角标越界异常：ArrayIndexOutOfBoundException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.空指针异常：NullPointerException</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//System.out.println(arr[5]);</span></span><br><span class="line"><span class="comment">//System.out.println(arr[-1]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况1：</span></span><br><span class="line"><span class="comment">//    int[]arr1 = null;</span></span><br><span class="line"><span class="comment">//    System.out.println(arr1[0]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line"><span class="comment">//System.out.println(arr2[0][0]);//空指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况三：</span></span><br><span class="line">String[] arr3 = <span class="keyword">new</span> String[] &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());<span class="comment">//空指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港选举制度</title>
      <link href="/paranoiddemon.github.io/2020/06/11/hkelection/"/>
      <url>/paranoiddemon.github.io/2020/06/11/hkelection/</url>
      
        <content type="html"><![CDATA[<h1 id="一、特首选举："><a href="#一、特首选举：" class="headerlink" title="一、特首选举："></a>一、特首选举：</h1><p>1、特首 </p><p>任期5年，可以连任一届，获得601票以上。</p><p>候选人需获得选委会150人以上提名（提前三个月）</p><p>2、选委会</p><p><img src="https://i.loli.net/2020/06/11/dknejl2QoXs7Nri.png" alt="选委会构成"></p><p>由20多万专业界别登记的选民选出，选举委员会委员是以个人身份投票，而选举委员会每届任期五年</p><p>其中宗教界界别分组（60名委员）是由六个指定团体提名产生。<br>香港地区全国人民代表大会代表（36名委员）及立法会议员（70名委员）为当然委员。<br>117个（港九57+新界60）经由民选区议员相互选出而产生</p><p> 选委会的代表性和有权选举的人存在诸多<strong>不合理</strong>之处：</p><blockquote><p>例如代表中小学教师的教育界有80,643人有权投票，可选出30个选举委员；与此同时，渔农界只有154人有权投票，却可选出60个选举委员。<br>有些组别例如会计界，只要是注册会计师就可以投票，全港近三万名名会计从业员中有26,001人是选民。但到了保险界，却只有保险公司的东主才可以投票，于是全港近五万名的保险从业员都没有投票权，只有131名东主是选民。至于为什么会计界和保险界有不同做法，是没有解释的。<br>回到刚才提到的渔农界，那154人和现役渔民或农民不一定有关，也不是由他们所选出，而是由规定的一系列渔农业团体作为代表。至于为什么是这些团体而不是另一些团体，这些团体是否有代表性，新成立的团体要怎样才可能为被指定的团体，同样是没有解释的。</p></blockquote><h1 id="二、立法会选举"><a href="#二、立法会选举" class="headerlink" title="二、立法会选举"></a>二、立法会选举</h1><p>职责：</p><ul><li>制定、修改和废除法律（参见：三读）</li><li>控制公共开支</li><li>监察政府工作</li><li>审核、通过政府的财政预算</li><li>接受香港居民申诉</li><li>同意终审法院法官和高等法院首席法官的任免</li><li>如立法会全体议员四分之一联合动议，指控行政长官有严重违法或渎职行为而不辞职的话，立法会可通过进行调查，并委托终审法院首席法官组成独立调查委员会进行调查。如调查委员会调查后认为有足够证据构成对行政长官的指控，立法会会对是否提出弹劾案进行表决。如果立法会以全体议员三分之二通过的话，可提出弹劾行政长官案，并报请中央人民政府决定。</li></ul><p>立法会共70议席</p><p>任期4年</p><p>35个议席：五个选区直选（300多万选民）</p><p>香港岛6席：中西区、湾仔区、东区、南区</p><p>九龙西6席：油尖旺区、深水埗区、九龙城区</p><p>九龙东5席：黄大仙区、观塘区</p><p>新界西9席：荃湾区、屯门区、元朗区、葵青区、离岛区</p><p>新界东9席：北区、大埔区、沙田区、西贡区</p><p>35个议席：29个功能界别</p><p>其中：</p><p>其他26界：26席</p><p>劳工界：3席</p><p>区议会第一界别（区议员互选1席）</p><p>区议会第二界别超级区议员（5席）由300多万选区选民直选，但是候选人提名（15个以上）及参选都来自区议会</p><p><img src="https://i.loli.net/2020/06/11/p9lvrZMm6tqkTUO.png" alt="立法会部分议席"></p><h1 id="三、区议会选举"><a href="#三、区议会选举" class="headerlink" title="三、区议会选举"></a>三、区议会选举</h1><p>任期4年，就市民日常生活事务向政府提供意见，没有立法权</p><p>18个选区</p><p>479席（每年会变化）当然议席27，民选议席452</p><p>将会影响：立法会中6席，选委会中117席的选出</p><p>2,943,842名登记选民投票，投票率71.23%     </p><p>57.44%vs41.32%：民主派vs建制派（实际票数）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySql学习笔记</title>
      <link href="/paranoiddemon.github.io/2020/06/09/mysql-notes/"/>
      <url>/paranoiddemon.github.io/2020/06/09/mysql-notes/</url>
      
        <content type="html"><![CDATA[<p>B站随意找的视频教程：<a href="https://www.bilibili.com/video/BV12b411K7Zu?p=1" target="_blank" rel="noopener">MySQL 基础+高级篇- 数据库 -sql -尚硅谷</a><br>MySql8.0：<a href="https://zhuanlan.zhihu.com/p/37152572" target="_blank" rel="noopener">MySql安装</a><br>Navicat 15： <a href="https://www.ghpym.com/navicatpatchdoc.html" target="_blank" rel="noopener">Navicat注册机</a></p><p>DB/DBMS</p><p>Sql/MySql</p><table><thead><tr><th>分类</th><th>中文</th><th>语法</th></tr></thead><tbody><tr><td>DQL（Data Query Language）</td><td>数据查询语言</td><td>select</td></tr><tr><td>DML  (Data Manipulate Language)</td><td>数据操作语言</td><td>insert 、update、delete</td></tr><tr><td>DDL（Data Define Languge）</td><td>数据定义语言</td><td>create、drop、alter</td></tr><tr><td>TCL（Transaction Control Language）</td><td>事务控制语言</td><td>commit、rollback</td></tr></tbody></table><h1 id="DQL（Data-Query-Language）"><a href="#DQL（Data-Query-Language）" class="headerlink" title="DQL（Data Query Language）"></a>DQL（Data Query Language）</h1><h2 id="进阶1：基础查询"><a href="#进阶1：基础查询" class="headerlink" title="进阶1：基础查询"></a>进阶1：基础查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表 FROM 表名；</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.查询列表可以是：表中的字段、常量值、表达式、函数</span><br><span class="line">2.查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">#1. 查询单个字段</span><br><span class="line">SELECT email FROM employees;</span><br><span class="line"></span><br><span class="line">#2. 查询多个字段</span><br><span class="line">SELECT email, last_name FROM employees;</span><br><span class="line"></span><br><span class="line">#3. 查询全部字段</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">#4. 查询常量值</span><br><span class="line">SELECT 100;</span><br><span class="line">SELECT &#39;john&#39;;</span><br><span class="line"></span><br><span class="line">#5.查询表达式</span><br><span class="line">SELECT 100*98;</span><br><span class="line"></span><br><span class="line">#6.查询函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line">#7.字段起别名</span><br><span class="line">&#x2F;*</span><br><span class="line">1.便于理解</span><br><span class="line">2.如果要查询的字段有重名，可以区分开</span><br><span class="line">*&#x2F;</span><br><span class="line">#方式一：使用as</span><br><span class="line">SELECT 100*98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#案例：查询salary，显示结果为out put,含有关键词或者空格</span><br><span class="line">SELECT salary  AS &quot;out put&quot; FROM employees;</span><br><span class="line"></span><br><span class="line">#8.去重</span><br><span class="line"></span><br><span class="line">#案例：查询员工表中中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line">#9.+号的作用</span><br><span class="line">&#x2F;*</span><br><span class="line">mysql中的+号：</span><br><span class="line">仅仅只有一个功能：运算符</span><br><span class="line"></span><br><span class="line">1.两个操作数都为数值型，则做加法运算</span><br><span class="line">  SELECT 100+90; </span><br><span class="line"></span><br><span class="line">2.其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">- SELECT &#39;123&#39;+90;   如果转换成功，则继续做加法运算</span><br><span class="line">- SELECT &#39;John&#39;+90;  如果转换失败，则将字符型数值转换成0</span><br><span class="line">- SELECT null +10;   只要其中一方为null，则结果肯定为null；</span><br><span class="line">*&#x2F;</span><br><span class="line"># 查询员工们和姓连接过程一个字段</span><br><span class="line">SELECT last_name+first_name AS 姓名 FROM employees;</span><br><span class="line">SELECT CONCAT(last_name,&#39; &#39;, first_name) AS 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#显示表的结构，并查询全部数据</span><br><span class="line">DESC departments;</span><br><span class="line">SELECT * FROM departments;</span><br><span class="line"></span><br><span class="line">#显示出employees的全部列，各个列之间用逗号连接，列头为output</span><br><span class="line">SELECT </span><br><span class="line">IFNULL(commission_pct,0) AS 奖金率,commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line">#----------------------------------------------------</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name,&#39;,&#39;,IFNULL(commission_pct,0)) AS output</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><h2 id="进阶2：条件查询"><a href="#进阶2：条件查询" class="headerlink" title="进阶2：条件查询"></a>进阶2：条件查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名 </span><br><span class="line">WHERE 筛选条件；</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1. 按条件表达式筛选</span><br><span class="line">条件运算符：&gt; &lt; &#x3D; !&#x3D; or &lt;&gt; &gt;&#x3D; &lt;&#x3D;</span><br><span class="line"></span><br><span class="line">2.按逻辑表达式筛选</span><br><span class="line">逻辑运算符：用于连接条件表达式</span><br><span class="line">&amp;&amp; || ！</span><br><span class="line">and or not</span><br><span class="line">and: 两个条件都为true</span><br><span class="line">or: 一个条件为true，则为true</span><br><span class="line">not：相反</span><br><span class="line"></span><br><span class="line">3.模糊查询</span><br><span class="line">like</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.按条件表达式筛选</span><br><span class="line">#案例1：查询工资&gt;12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;12000;</span><br><span class="line">#案例2：查询部门编号不等于90的员工名和部门编号</span><br><span class="line">SELECT</span><br><span class="line">last_name, department_id</span><br><span class="line">FROM </span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id!&#x3D;90 ;</span><br><span class="line"></span><br><span class="line">#2.按逻辑表达式筛选</span><br><span class="line"></span><br><span class="line">#案例1：查询工资在10000-20000的员工名、工资、及奖金</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(first_name,&#39; &#39;,last_name) AS &#39;name&#39;,</span><br><span class="line">salary,</span><br><span class="line">IFNULL(commission_pct,0) AS comission</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;&#x3D;10000 AND salary&lt;&#x3D;20000;</span><br><span class="line"></span><br><span class="line">#案例2：查询部门编号不在90-110之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&lt;90 OR department_id&gt;110 OR salary&gt;&#x3D;15000;</span><br><span class="line"></span><br><span class="line">#3.模糊查询</span><br><span class="line">&#x2F;*</span><br><span class="line">like </span><br><span class="line">特点：</span><br><span class="line">一般和通配符搭配使用</span><br><span class="line">通配符：</span><br><span class="line">% 任意多个字符，包含0个字符</span><br><span class="line">_ 任意单个字符</span><br><span class="line">\ 转义字符</span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null</span><br><span class="line">is not null</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.like</span><br><span class="line"></span><br><span class="line">#案例1：查询员工名中包含字符a的员工信息</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;%a%&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name like &#39;__n_l%&#39;;</span><br><span class="line"></span><br><span class="line">#案例3：查询员工名中第二个字符为_的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">last_name LIKE &#39;_a_%&#39; ESCAPE &#39;a&#39;;</span><br><span class="line"># 效果一样last_name LIKE &#39;_\_%&#39;;</span><br><span class="line"></span><br><span class="line">#2. between and </span><br><span class="line">#case 1: 查询员工编号在100-120的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id BETWEEN 100 AND 120; #包含临界值，不可以颠倒临界值顺序</span><br><span class="line"></span><br><span class="line">#3. in</span><br><span class="line">&#x2F;*</span><br><span class="line">判断某字段的值是否属于in列表中的某一项</span><br><span class="line">-提高简洁度</span><br><span class="line">-in列表的值类型必须一致或兼容</span><br><span class="line">-不支持通配符的使用</span><br><span class="line">*&#x2F;</span><br><span class="line"># case：查询员工的工种编号是IT_PROG、AD_VP、AD_PRES中的员工名和工种编号</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id &#x3D;&#39;IT_PROG&#39; OR job_id&#x3D;&#39;AD_VP&#39; OR job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line">#-------------------------------------------------------</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE </span><br><span class="line">job_id IN(&#39;IT_PROG&#39;,&#39;AD_VP&#39; ,&#39;AD_PRES&#39;);</span><br><span class="line"></span><br><span class="line">#4 is null&#x2F; is not null</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x3D; &lt;&gt;不能判断null值，is&#x2F; is not 才可以判断null值</span><br><span class="line">*&#x2F;</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL;</span><br><span class="line"></span><br><span class="line">#安全等于&lt;&#x3D;&gt; 判断null值和普通数值</span><br><span class="line"># case1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct &lt;&#x3D;&gt; NULL;</span><br><span class="line"></span><br><span class="line">#case2:查询工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary &lt;&#x3D;&gt; 12000;</span><br><span class="line"></span><br><span class="line">#查询员工号为176的姓名和部门号和年薪</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) AS &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">employee_id&#x3D;176;</span><br><span class="line"></span><br><span class="line">#测试题</span><br><span class="line">#1.查询没有奖金，且工资小于18000的salary,last_name</span><br><span class="line">SELECT</span><br><span class="line">salary,</span><br><span class="line">last_name</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">commission_pct is NULL </span><br><span class="line">AND salary&lt;18000;</span><br><span class="line"></span><br><span class="line">#2.查询employees表中，job_id不为‘IT’或者工资为12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">job_id &lt;&gt;&#39;IT&#39; OR salary&#x3D;12000;</span><br><span class="line"></span><br><span class="line">#3.查询departments的结构</span><br><span class="line">DESC departments;</span><br><span class="line"></span><br><span class="line">#4.查询departments表中涉及到了哪些位置编号</span><br><span class="line">SELECT DISTINCT</span><br><span class="line">location_id</span><br><span class="line">FROM</span><br><span class="line">departments;</span><br><span class="line"></span><br><span class="line">&#x2F;*5.SELECT * FROM employees 和</span><br><span class="line">SELECT * FROM employees WHERE commission_pct like&#39;%%&#39; AND last name like &#39;%%&#39;</span><br><span class="line">结果是否一样，原因</span><br><span class="line">不一样，值存在null的情况</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="进阶3：排序查询"><a href="#进阶3：排序查询" class="headerlink" title="进阶3：排序查询"></a>进阶3：排序查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SELECT * from employees;</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">SELECT 列表</span><br><span class="line">FROM 表</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">ORDER BY 排序列表 DESC&#x2F;ASC</span><br><span class="line"> 1.ORDER BY子句支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line"> 2.ORDER BY子句一般是放在查询语句的最后面，limit子句除外</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#case 1：查询员工信息，要求工资从高到低排序</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">DESC;</span><br><span class="line"></span><br><span class="line">#------------------------------升序是默认的，可以不用写出</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary</span><br><span class="line">ASC;</span><br><span class="line"></span><br><span class="line">#case 2：查询部门编号&gt;&#x3D;90的员工信息，按入职时间的先后（筛选条件）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">department_id&gt;&#x3D;90</span><br><span class="line">ORDER BY</span><br><span class="line">hiredate;</span><br><span class="line"></span><br><span class="line">#case 3：按年薪的高低显示员工信息（按表达式排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class="line"></span><br><span class="line">#case 4:按年薪的高低显示员工信息（按别名排序）</span><br><span class="line">SELECT</span><br><span class="line">*,salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39; </span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC;</span><br><span class="line"></span><br><span class="line">#case 5:按姓名的长度显示员工的姓名和工资（按函数）</span><br><span class="line">SELECT </span><br><span class="line">LENGTH(last_name),last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"></span><br><span class="line">#case 6:查询员工信息，先按工资排序，再按员工编号排序(按多个字段排序）</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY salary ASC,employee_id DESC;</span><br><span class="line"></span><br><span class="line">#1.查询员工的姓名、部门号、年薪，按年薪降序，按姓名升序</span><br><span class="line">SELECT</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) &#39;annual salary&#39;</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">ORDER BY</span><br><span class="line">&#39;annual salary&#39; DESC,last_name;</span><br><span class="line"></span><br><span class="line">#2.选择工资不在8000-17000的员工的姓名和工资，按工资降序</span><br><span class="line">SELECT</span><br><span class="line">last_name,salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">#salary&lt;8000 OR salary&gt;17000</span><br><span class="line">#NOT (salary BETWEEN 8000 AND 17000) </span><br><span class="line">salary NOT BETWEEN 8000 AND 17000</span><br><span class="line">ORDER BY</span><br><span class="line">salary DESC;</span><br><span class="line"></span><br><span class="line">#3.查询邮箱中包含e的员工信息，按邮箱字节数降序，按部门号升序</span><br><span class="line">SELECT </span><br><span class="line">*,LENGTH(email)</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">email like &#39;%e%&#39;</span><br><span class="line">ORDER BY</span><br><span class="line">LENGTH(email) DESC,department_id;</span><br></pre></td></tr></table></figure><h2 id="进阶4：常见函数"><a href="#进阶4：常见函数" class="headerlink" title="进阶4：常见函数"></a>进阶4：常见函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">概念：一组逻辑语句封装在方法体重，对外暴露方法名</span><br><span class="line">1.隐藏了实现细节</span><br><span class="line">2.提高代码的重用性</span><br><span class="line">调用：SELECT 函数名(实参列表) [from 表]；如果调用了表内的字段</span><br><span class="line">特点：1.函数名 2.函数功能</span><br><span class="line">函数可以自定义</span><br><span class="line">分类：</span><br><span class="line">1.单行函数：CONCAT、LENGTH，IFNULL等，做处理使用</span><br><span class="line">2.分组函数：做统计使用，传一组值，返回一个值，又称为统计函数、聚合函数、组函数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1. 单行函数</span><br><span class="line">&#x2F;*</span><br><span class="line">字符函数 concat substr instr length lpad rpad upper lower trim replace</span><br><span class="line">数学函数  ceil floor truncate mod round</span><br><span class="line">日期函数 now curdate curtime year month day hour minute second  str_to_date date_format monthname</span><br><span class="line">其他函数 version datebase user</span><br><span class="line">流程控制函数 if case的两种用法</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#一、字符函数</span><br><span class="line"></span><br><span class="line">#1.length 获取参数值的字节个数</span><br><span class="line">SELECT LENGTH(&#39;john&#39;);</span><br><span class="line">SELECT LENGTH(&#39;啊&#39;); #utf8字符集，汉字占3个字节</span><br><span class="line"></span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39; #展示字符集</span><br><span class="line"></span><br><span class="line">#2.concat 拼接字符串</span><br><span class="line">SELECT CONCAT(last_name,&#39;_&#39;,first_name) &#39;name&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.upper、lower 改变大小写</span><br><span class="line">SELECT UPPER(&#39;john&#39;);</span><br><span class="line">SELECT LOWER(&#39;jOHN&#39;);</span><br><span class="line"># e.g. 将姓大写，名小写,然后拼接</span><br><span class="line">SELECT</span><br><span class="line">CONCAT(UPPER(last_name),&#39; &#39;,LOWER(first_name)) &#39;NAME&#39; #函数可以嵌套</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#4.substr、substring 截取字符串</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,3);   #索引都是从1开始的， nihilation</span><br><span class="line">SELECT SUBSTR(&#39;annihilation&#39;,1,3); #ann 索引，长度</span><br><span class="line"></span><br><span class="line">#case: 姓名中首字符大写，其他小写后用_拼接</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2)))</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line">#5.instr 返回子串在字符串中的第一次出现的起始索引</span><br><span class="line">SELECT INSTR(&#39;annihilation&#39;,&#39;nihilation&#39;);</span><br><span class="line"></span><br><span class="line">#6.trim  去除两端的字符</span><br><span class="line">SELECT LENGTH(TRIM(&#39;  annihilation  &#39;));</span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aannihilationa&#39;); #输出nnihilation</span><br><span class="line"></span><br><span class="line">#7.lpad 用指定字符左填充指定长度</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #--------annihilation</span><br><span class="line">SELECT LPAD(&#39;annihilation&#39;,2,&#39;-&#39;) AS output;  #an</span><br><span class="line"></span><br><span class="line">#8.rpad 用指定字符右填充指定长度</span><br><span class="line">SELECT RPAD(&#39;annihilation&#39;,20,&#39;-&#39;) AS output; #annihilation--------</span><br><span class="line"></span><br><span class="line">#9.replace 替换</span><br><span class="line">SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;z&#39;);</span><br><span class="line"></span><br><span class="line">#二、数学函数</span><br><span class="line"></span><br><span class="line">#round 四舍五入</span><br><span class="line">SELECT ROUND(1.65);  #2</span><br><span class="line">SELECT ROUND(1.45);  #1</span><br><span class="line">SELECT ROUND(-1.65); #-2</span><br><span class="line">SELECT ROUND(1.657,2); #1.66 保留2位</span><br><span class="line"></span><br><span class="line">#ceil 向上取整，返回&gt;&#x3D;该参数的最小整数</span><br><span class="line">SELECT CEIL(1.52);  #2</span><br><span class="line">SELECT CEIL(1.00);  #1 </span><br><span class="line">SELECT CEIL(-1.02); #-1 </span><br><span class="line"></span><br><span class="line">#floor 向下取证，返回&lt;&#x3D;该参数的最大整数</span><br><span class="line">SELECT FLOOR(9.8)   #9</span><br><span class="line">SELECT FLOOR(-9.8)  #-10</span><br><span class="line"></span><br><span class="line">#truncate 截断</span><br><span class="line">SELECT TRUNCATE(1.699,1)  #1.6</span><br><span class="line"></span><br><span class="line">#mod 取余</span><br><span class="line">&#x2F;*</span><br><span class="line">mod(a,b): a-a&#x2F;b*b  (其中a&#x2F;b是取整数）</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT MOD(10,3); #1</span><br><span class="line">SELECT 10%3;</span><br><span class="line">SELECT MOD(-10,3); #-1  根据被除数的正负，取正负</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#三、日期函数</span><br><span class="line"></span><br><span class="line">#now 返回当前系统日期及时间 2020-06-10 17:10:22</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#curdate 返回当前系统日期   2020-06-10</span><br><span class="line">SELECT CURDATE(); </span><br><span class="line"></span><br><span class="line">#curtime 返回当前时间   17:12:15</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">#获取指定的部分：年月日、时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT YEAR(&#39;1900-1-1&#39;);</span><br><span class="line">SELECT YEAR(hiredate) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT MONTH(NOW());     # 6</span><br><span class="line">SELECT MONTHNAME(NOW()); # June</span><br><span class="line"></span><br><span class="line">#DAY(date),HOUR(time),MINUTE(time),SECOND(time)</span><br><span class="line"></span><br><span class="line">#STR_TO_DATE(str,format) 将字符串转换成指定格式的日期</span><br><span class="line">&#x2F;*格式符</span><br><span class="line">%Y  20xx</span><br><span class="line">%y  xx</span><br><span class="line">%m  01,02...12</span><br><span class="line">%c  1,2...12</span><br><span class="line">%d  01,02...31</span><br><span class="line">%H  01,02...24</span><br><span class="line">%h  01,02...12</span><br><span class="line">%i  00,01...59</span><br><span class="line">%s  00,01...69</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT STR_TO_DATE(&#39;1900-01-01&#39;,&#39;%Y-%m-%d&#39;);</span><br><span class="line"></span><br><span class="line">#case 查询入职日期1992-4-3的员工信息</span><br><span class="line">SELECT *FROM employees</span><br><span class="line">WHERE hiredate&#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br><span class="line"></span><br><span class="line">#DATE_FORMAT(date,format) 将日期转换成字符</span><br><span class="line">SELECT DATE_FORMAT(&#39;2008&#x2F;1&#x2F;1&#39;,&#39;%Y年%m月%d日&#39;);</span><br><span class="line"></span><br><span class="line">#四、其他函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT USER();</span><br><span class="line"></span><br><span class="line">#五、流程控制函数</span><br><span class="line">#1.if函数：if else的效果</span><br><span class="line">SELECT IF(10&gt;5,&#39;大&#39;,&#39;小&#39;) ; #expr1条件表达式，true返回expr2，false返回expr3</span><br><span class="line">SELECT last_name,commission_pct, IF(commission_pct is null,&#39;no&#39;,&#39;yes&#39;) # if前面要加逗号</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.case函数的使用一：switch case的效果</span><br><span class="line">&#x2F;*</span><br><span class="line">java中 </span><br><span class="line">switch(变量或表达式）&#123;</span><br><span class="line">       case 常量1：语句1；break；</span><br><span class="line"> ...</span><br><span class="line"> default:语句n;break;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">mysql中   判断等值</span><br><span class="line">  CASE 要判断的变量或表达式</span><br><span class="line">WHEN 常量1 THEN 要显示的值1或语句1； </span><br><span class="line">WHEN 常量2 THEN 要显示的值2或语句2；</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">ELSE 要显示的值n或语句n；</span><br><span class="line">  END </span><br><span class="line">#如果是在select后面，case作为表达式，只能显示为值，而不能用语句</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*案例：查询员工的工资，要求</span><br><span class="line">部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">其他部门，显示为原工资</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,department_id,</span><br><span class="line">  CASE department_id</span><br><span class="line">WHEN  30 THEN salary*1.1   #是个值，不用加分号</span><br><span class="line">WHEN  40 THEN salary*1.2 </span><br><span class="line">WHEN  50 THEN salary*1.3</span><br><span class="line">ELSE  salary</span><br><span class="line">  END AS &#39;new salary&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.case函数的使用二：类似于多重if</span><br><span class="line">&#x2F;*</span><br><span class="line">java中：</span><br><span class="line">if(条件1）｛</span><br><span class="line">语句1；</span><br><span class="line">｝</span><br><span class="line">else if(条件2）｛</span><br><span class="line">语句2；</span><br><span class="line">｝</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">语句n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql中：</span><br><span class="line">case   #后面没有变量或表达式，判断区间</span><br><span class="line">when 条件1 then 显示值1 或语句1；</span><br><span class="line">when 条件2 then 显示值2 或语句2；</span><br><span class="line">...</span><br><span class="line">else 显示值n或语句n；</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">#案例：查询员工的工资情况</span><br><span class="line">如果工资&gt;20000，显示A</span><br><span class="line">如果工资&gt;15000，显示B</span><br><span class="line">如果工资&gt;10000，显示C</span><br><span class="line">否则D</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT salary,</span><br><span class="line">CASE</span><br><span class="line">WHEN salary&gt;20000 THEN &#39;A&#39;   #字符串一定要加单引号</span><br><span class="line">WHEN salary&gt;15000THEN &#39;B&#39;</span><br><span class="line">WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">ELSE &#39;D&#39;</span><br><span class="line">END AS &#39;rank&#39;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#练习</span><br><span class="line">#1.显示系统时间（时间+日期）</span><br><span class="line">SELECT NOW();</span><br><span class="line">#2.查询员工号、姓名、工资、以及工资提高20%后的结果</span><br><span class="line">SELECT employee_id,last_name,salary,salary*1.2 as &#39;new salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">#3.将员工的姓名按首字母排序，写出姓名长度</span><br><span class="line">SELECT last_name,length(last_name) as length,substr(last_name,1,1) as initial</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY initial;</span><br><span class="line">#区别于order by last_name 效果不一样，先首字母，后第二个字母。按initial排序，后面是随机的</span><br><span class="line"></span><br><span class="line">#4.做一个查询，产生下面结果</span><br><span class="line">&#x2F;*&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span><br><span class="line">Dream Salary</span><br><span class="line">K_ing earns 24000.00 monthly but wants 72000.00</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT CONCAT(last_name,&#39; earns &#39;,salary,&#39; monthly but wants &#39;, salary*3) as &#39;Dream Salary&#39;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;&#39;K_ing&#39; and salary&#x3D;24000;</span><br><span class="line"></span><br><span class="line">#5. 使用case when，按照下面的条件</span><br><span class="line"> job     grade</span><br><span class="line">AD_PRES    A</span><br><span class="line">ST_MAN     B</span><br><span class="line">IT_PROG    C</span><br><span class="line"></span><br><span class="line">SELECT last_name,job_id job, </span><br><span class="line">CASE job_id</span><br><span class="line">WHEN &#39;AD_PRES&#39; THEN &#39;A&#39;  #字符串一定要加引号</span><br><span class="line">WHEN &#39;ST_MAN&#39;  THEN &#39;B&#39;</span><br><span class="line">WHEN &#39;IT_PROG&#39; THEN &#39;C&#39;</span><br><span class="line">END AS grade</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&#x3D;&#39;AD_PRES&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#二、分组函数</span><br><span class="line">&#x2F;*</span><br><span class="line">功能：用作统计使用，又称聚合函数、统计函数、组函数</span><br><span class="line">分类</span><br><span class="line">sum</span><br><span class="line">avg</span><br><span class="line">max</span><br><span class="line">min</span><br><span class="line">count：计算非空的</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.忽略null</span><br><span class="line">2.和dinstinct搭配使用</span><br><span class="line">3.和分组函数一同查询的字段要求是group by后的字段</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.简单使用</span><br><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT min(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,min(salary),MAX(salary),COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#2.参数支持类型</span><br><span class="line">&#x2F;*</span><br><span class="line">sum avg：数值型</span><br><span class="line">max min count ：字符型也可以做参数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#3.是否忽略null</span><br><span class="line">&#x2F;*</span><br><span class="line">null+任何数为null</span><br><span class="line">sum avg:忽略</span><br><span class="line">max min count ：忽略</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#4.搭配distinct  去重</span><br><span class="line">SELECT </span><br><span class="line">SUM(DISTINCT salary),  #中间没有逗号</span><br><span class="line">SUM(salary) </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(DISTINCT salary) FROM employees;</span><br><span class="line"></span><br><span class="line">#5.count函数的详细介绍</span><br><span class="line">SELECT COUNT(*) FROM employees; #统计行数</span><br><span class="line">SELECT COUNT(1) FROM employees; #加了1列1，统计行数</span><br><span class="line">SELECT COUNT(2） FROM employees; </span><br><span class="line">SELECT COUNT(&#39;abc&#39;) FROM employees; #加了1列常量，统计行数</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">效率：</span><br><span class="line">MYISAM存储引擎，count（*）效率高</span><br><span class="line">INNODB存储引擎，count（*）和count（1）相似，比count（字段）高</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#6.和分组函数一同查询的字段有限制</span><br><span class="line">SELECT AVG(salary),employee_id FROM employees; # employee_id的值无意义</span><br><span class="line"></span><br><span class="line">#查询最大入职时间和最小入职时间相差天数</span><br><span class="line">SELECT DATEDIFF(NOW(),&#39;1996-09-12&#39;) #前面减后面 8673</span><br><span class="line"></span><br><span class="line"># 查询部门编号为90的员工个数</span><br><span class="line">SELECT COUNT(department_id) #不能用count（department_id&#x3D;90）,结果和count(department_id)一样</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&#x3D;90;</span><br></pre></td></tr></table></figure><h2 id="进阶5：分组查询"><a href="#进阶5：分组查询" class="headerlink" title="进阶5：分组查询"></a>进阶5：分组查询</h2><figure class="highlight plain"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#查询每个部门的平均工资</span><br><span class="line">&#x2F;*</span><br><span class="line">SELECT column(要出现在group by后面, group_function()</span><br><span class="line">FROM table</span><br><span class="line">[WHERE 筛选条件]</span><br><span class="line">GROUP BY  分组的列表</span><br><span class="line">[ORDER BY 字句]</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">查询列表必须特殊，要求是分组函数和group by后出现的字段</span><br><span class="line">where一定放在from后面</span><br><span class="line"></span><br><span class="line">特点：1.分组查询中的筛选条件分为两类</span><br><span class="line">| |数据源|位置|关键字|</span><br><span class="line">|---------------|----------------------|-------------------|------|</span><br><span class="line">|分组前筛选       |原始表 |group by子句前    | where|</span><br><span class="line">    |分组后筛选 |分组后的结果集  |group by子句后     | having|</span><br><span class="line"></span><br><span class="line">分组函数（max min sum avg count）做条件肯定是放在having子句中</span><br><span class="line">能用分组前筛选的，优先考虑分组前筛选</span><br><span class="line"></span><br><span class="line">2.group by子句支持表达式，单个字段，多个字段（用逗号隔开）</span><br><span class="line">3.也可以添加排序，在整个分组查询的最后</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#简单的分组查询</span><br><span class="line"># case 1:查询每个工种的最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line"># case 2：查询每个位置上的部门个数</span><br><span class="line">SELECT COUNT(DISTINCT department_id),location_id</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY location_id;</span><br><span class="line"></span><br><span class="line">#推加筛选条件</span><br><span class="line"># case 1：邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line"># case 2:查询每个领导手下有奖金的员工的最高工资</span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line">#添加复杂的筛选条件</span><br><span class="line">#案例1：查询哪个部门的员工个数&gt;2</span><br><span class="line">#a.查询每个部门的员工数</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line">#b.根据前面的结果进行筛选</span><br><span class="line">SELECT COUNT(*), department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING COUNT(*)&gt;2;      #分号视作语句的结束，在最后面用</span><br><span class="line"></span><br><span class="line">#case 2:查询每个工种有奖金的员工最高工资&gt;12000的工种编号和最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">#case 3:查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号及最低工资</span><br><span class="line">SELECT MIN(salary), manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id </span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按表达式或函数分组</span><br><span class="line"># case：按员工姓名的长度分组，查询每一组的员工个数，筛选员工数&gt;5的</span><br><span class="line">SELECT COUNT(*),LENGTH(last_name)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY LENGTH(last_name)</span><br><span class="line">HAVING COUNT(*)&gt;5;</span><br><span class="line"></span><br><span class="line">#按多个字段分组</span><br><span class="line">#case：查询每个部门每个工种的平均工资</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id,job_id; #可以调换顺序</span><br><span class="line"></span><br><span class="line">#添加排序</span><br><span class="line">#case：查询每个部门每个工种的平均工资，并且按照平均工资高低显示</span><br><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id is NOT NULL</span><br><span class="line">GROUP BY department_id,job_id</span><br><span class="line">HAVING AVG(salary)&gt;10000     #having和group by支持别名</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#1.查询个job_id员工工资的最大值、最小值、平均值、和，按job_id升序</span><br><span class="line">SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id</span><br><span class="line">ORDER BY job_id;</span><br><span class="line"></span><br><span class="line">#2.最高最低工资的差距</span><br><span class="line">SELECT MAX(salary)-MIN(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#3.查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计入</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id is not null</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;&#x3D;6000;</span><br><span class="line"></span><br><span class="line">#4.查询所有部门的编号，员工数量和工资平均值，按平均工资降序</span><br><span class="line">SELECT department_id,COUNT(*) quantity,ROUND(AVG(salary),2) avgsal</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br><span class="line"></span><br><span class="line">#5.选择具有各个job_id的员工人数</span><br><span class="line">SELECT COUNT(*),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><h2 id="进阶6：连接查询"><a href="#进阶6：连接查询" class="headerlink" title="进阶6：连接查询"></a>进阶6：连接查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">含义：多表查询，当查询的字段来自于多个表时使用</span><br><span class="line">笛卡尔乘积现象：表1 m行，表2 n行，结果m*n行</span><br><span class="line"></span><br><span class="line">原因：没有有效的连接条件</span><br><span class="line">避免：添加有效的连接条件</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">1.按年代分类：</span><br><span class="line">sql92标准：在mysql中仅仅支持内连接，在oracle等中支持部分外连接</span><br><span class="line">sql99标准（推荐）：支持内连接+外连接（左、右）+交叉连接</span><br><span class="line"></span><br><span class="line">2.按功能分类：</span><br><span class="line">内连接：</span><br><span class="line">等值连接</span><br><span class="line">非等值连接</span><br><span class="line">自连接</span><br><span class="line">外连接：</span><br><span class="line">左外连接</span><br><span class="line">右外连接</span><br><span class="line">全外连接</span><br><span class="line">交叉连接</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM beauty;</span><br><span class="line">SELECT * FROM boys;</span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys; </span><br><span class="line"></span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#一、sql92标准</span><br><span class="line"></span><br><span class="line">#1.等值连接</span><br><span class="line">&#x2F;*</span><br><span class="line">a.多表等值连接为交集部分</span><br><span class="line">b.n表连接，至少要n-1个连接条件</span><br><span class="line">c.顺序无要求</span><br><span class="line">d.一般要起别名</span><br><span class="line">e.可以搭配排序、分组、筛选</span><br><span class="line">*&#x2F;</span><br><span class="line">#case 1</span><br><span class="line">SELECT name, boyName FROM beauty ,boys</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line"></span><br><span class="line">#case 2:查询员工名和对应的部门名</span><br><span class="line">SELECT last_name,department_name </span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.department_id&#x3D;departments.department_id;</span><br><span class="line"></span><br><span class="line">#2.为表起别名</span><br><span class="line">#case 查询员工名、工种号、工种名</span><br><span class="line">SELECT last_name,e.job_id,job_title #不知道job_id的来源。需要用表名限定</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id;   #如果起别名就全部要用，统一</span><br><span class="line"></span><br><span class="line">#3.两个表的顺序可以调换</span><br><span class="line">SELECT last_name,e.job_id,job_title #用一个表一行行去对另一个表</span><br><span class="line">FROM jobs j，employees e</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id</span><br><span class="line"></span><br><span class="line">#4.加筛选</span><br><span class="line"># case 1 :查询有奖金的员工名、部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND e.commission_pct is not null;</span><br><span class="line"></span><br><span class="line"># case 2:查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">SELECT city,department_name</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">AND city LIKE &#39;_o%&#39;;</span><br><span class="line"></span><br><span class="line">#5.加分组</span><br><span class="line">#case 1：查询每个城市的部门个数</span><br><span class="line">SELECT COUNT(*) amount ,city</span><br><span class="line">FROM departments d, locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">GROUP BY city;</span><br><span class="line"></span><br><span class="line">#case 2:查询有奖金的每个部门的部门名和部门领导编号和该部门的最低工资</span><br><span class="line">SELECT d.department_name, d.manager_id,min(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">AND commission_pct is NOT NULL</span><br><span class="line">GROUP BY e.department_id,d.manager_id;</span><br><span class="line"></span><br><span class="line">#6.加排序</span><br><span class="line">#案例：查询每个工种的工种名和员工的个数，按员工个数降序</span><br><span class="line">SELECT job_title, COUNT(*)</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br><span class="line"></span><br><span class="line">#7.三表连接</span><br><span class="line">#case 1： 查询员工名、部门名、所在的城市</span><br><span class="line"></span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e, departments d, locations l</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#2.非等值连接</span><br><span class="line">#case 1：查询员工的工资和工资级别</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e, job_grades g</span><br><span class="line">WHERE salary BETWEEN lowest_sal and highest_sal</span><br><span class="line">AND grade_level&#x3D;&#39;A&#39;;</span><br><span class="line"></span><br><span class="line">#3.自连接</span><br><span class="line">#case：查询员工名和上级的名称</span><br><span class="line">SELECT e.last_name,e.employee_id,m.last_name</span><br><span class="line">FROM employees e,employees m </span><br><span class="line">WHERE m.employee_id&#x3D;e.manager_id;</span><br><span class="line"></span><br><span class="line">#显示员工表的最大工资，工资平均值</span><br><span class="line">SELECT MAX(salary),AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#查询 员工表的job_id中包含a和e，a在前</span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id like &#39;%a%e%&#39;</span><br><span class="line"></span><br><span class="line">#Exercise</span><br><span class="line"></span><br><span class="line">#1. 显示所有员工的姓名，部门号和部门名称。 </span><br><span class="line">SELECT last_name,e.department_id,department_name</span><br><span class="line">FROM employees e,departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line">#2. 查询 90 号部门员工的 job_id 和 90 号部门的 location_id </span><br><span class="line">SELECT job_id,location_id,department_id</span><br><span class="line">FROM employees e, locations l</span><br><span class="line">WHERE department_id&#x3D;90 ;  #不用连接条件会产生笛卡尔乘积问题</span><br><span class="line">*-----------------------</span><br><span class="line">SELECT job_id,location_id,e.department_id</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;90 </span><br><span class="line">AND e.department_id&#x3D;d.department_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3. 选择所有有奖金的员工的 last_name , department_name , location_id , city </span><br><span class="line">SELECT last_name,department_name,l.location_id,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br><span class="line"></span><br><span class="line">#4. 选择city在Toronto工作的员工的 last_name , job_id , department_id , department_name</span><br><span class="line">SELECT last_name,job_id,e.department_id,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE city&#x3D;&#39;Toronto&#39;</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;   #三表连接，要写两个条件</span><br><span class="line"> </span><br><span class="line">#5.查询每个工种、每个部门的部门名、工种名和最低工资 </span><br><span class="line">SELECT j.job_id,department_name,job_title,MIN(salary)</span><br><span class="line">FROM jobs j, departments d,employees e</span><br><span class="line">WHERE j.job_id&#x3D;e.job_id</span><br><span class="line">AND e.department_id&#x3D;d.department_id</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#6.查询每个国家下的部门个数大于 2 的国家编号 </span><br><span class="line">SELECT country_id, department_id,count(*)</span><br><span class="line">FROM locations l,departments d</span><br><span class="line">WHERE l.location_id&#x3D;d.location_id</span><br><span class="line">GROUP BY country_id</span><br><span class="line">HAVING count(*)&gt;2;</span><br><span class="line">#7.择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格 式 </span><br><span class="line">&#x2F;*</span><br><span class="line">employees Emp# manager Mgr# </span><br><span class="line">kochhar   101  king    100 </span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT e.last_name employees,e.employee_id &#39;Emp#&#39;,m.last_name manager,m.employee_id &#39;Mgr#&#39;</span><br><span class="line">FROM employees e, employees m</span><br><span class="line">WHERE e.manager_id&#x3D;m.employee_id</span><br><span class="line">AND e.employee_id&#x3D;101;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wish You A Speedy Recovery</title>
      <link href="/paranoiddemon.github.io/2020/05/21/WishYouASpeedyRecovery/"/>
      <url>/paranoiddemon.github.io/2020/05/21/WishYouASpeedyRecovery/</url>
      
        <content type="html"><![CDATA[<p>最近陪我妈动手术期间的一些记录。</p><ul><li>健康是首要的。倒不是想活多久，只是没有赴死的勇气，只能期盼活着期间能不用遭遇这些痛苦。生病的痛苦是最直接易感知的，打针、开刀都令人不寒而栗，放弃一部分人的完整性是接受治疗的前提。医院称得上是人类尊严平均水平最低的场所。</li><li>不生孩子。做父母的责任之重，不是我所能承受，这是出于自私；孩子会发现存在的痛苦真相，我想必只会是孩子成长过程中的阴影，而无法给与他们任何引导，这是出于责任。</li><li>努力赚钱。医院治疗相当花钱，一直以来爸妈对我期待很高，而我到现在为止负起的责任实在太少，应该很令他们失望。</li><li>找机会去一趟精神科。心理状态似乎又开始变坏了，越发憎恶自己。以前蛮好的，不知道这些年是怎么一步步变成今天这样的。徒劳地寻找不存在的答案不过是自我折磨。前不久看《阳光普照》大哭，完全受不了阿豪妈妈伤心，所以不论怎样一定会好好生活的。</li><li>从最近的生活经验和所见所闻再次验证了这一真理：生活果然就是永恒的疲惫啊。</li><li>祝大家健康。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020/05</title>
      <link href="/paranoiddemon.github.io/2020/05/21/thoughts2020-05/"/>
      <url>/paranoiddemon.github.io/2020/05/21/thoughts2020-05/</url>
      
        <content type="html"><![CDATA[<p>1.<br>矮墙在面前颓然倒下<br>为风牺牲</p><p>2.<br>未来是尚未被复写的过去<br>黑色方碑刻着一切</p><p>3.<br>意识是痛苦的证明</p><p>4.<br>贫穷是恒久不灭的心悸</p><p>5.<br>想去Isle of Skye，观看灯塔</p><p>6.<br>被抛掷于此间的时候<br>漆黑，喑哑，无力<br>却充分感知到自我的存在<br>意识中徒劳地呼喊<br>没有一个上帝会来搭救<br>清醒后痛苦才汹涌地袭来<br>旁观甚至需要勇气</p><p>7.<br>摄影是被完全滥用的技术，人类从此失去了真诚</p><p>8.<br>阅读不提供宽慰、解脱和形而上的解答，但感到平静</p><p>9.<br>拉普拉斯妖 is watching you</p><p>10.<br>将来你必须从头开始，一点点挣脱，所有已经捆绑在身上的，绞索</p><p>11.<br>你相信什么？</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>政治哲学/Jonathan Wolff</title>
      <link href="/paranoiddemon.github.io/2020/05/10/political%20philosophy/"/>
      <url>/paranoiddemon.github.io/2020/05/10/political%20philosophy/</url>
      
        <content type="html"><![CDATA[<h1 id="一、自然状态"><a href="#一、自然状态" class="headerlink" title="一、自然状态"></a>一、自然状态</h1><h2 id="霍布斯"><a href="#霍布斯" class="headerlink" title="霍布斯"></a>霍布斯</h2><p>人的平等、人连续不断的追求幸福，即满足他们未来可能具有的任何欲求的权力</p><p>资源的稀缺，人对他人的恐惧和猜疑</p><p>人对人的战争</p><p>自然法（集体理性与个体理性，博弈论中的囚徒困境）</p><h2 id="洛克"><a href="#洛克" class="headerlink" title="洛克"></a>洛克</h2><p>存在着道德，自然法的约束，刚开始自然状态下资源不是稀缺的</p><h2 id="卢梭"><a href="#卢梭" class="headerlink" title="卢梭"></a>卢梭</h2><p>人主要受自我保存的欲望驱使</p><p>人类动机中的同情和怜悯</p><p>自然状态是不可持续的</p><p>人是在文明社会中才变得道德堕落的</p><h2 id="无政府主义"><a href="#无政府主义" class="headerlink" title="无政府主义"></a>无政府主义</h2><p>如何区分一个政府和一个依靠其他约束运行的社会</p><p>无政府主义的国家是你可以自由选择加入的</p><h1 id="二、国家证成"><a href="#二、国家证成" class="headerlink" title="二、国家证成"></a>二、国家证成</h1><h2 id="两个角度"><a href="#两个角度" class="headerlink" title="两个角度"></a>两个角度</h2><h3 id="洛克-自愿主义"><a href="#洛克-自愿主义" class="headerlink" title="洛克(自愿主义)"></a>洛克(自愿主义)</h3><p>认为人是生而自由、平等、独立的，他们并非自然而然地处于某个人的权威之下（普通人/主权者），合法的权力关系必定是人类创造和构建的。除了正当的惩罚外，唯有通过表达同意，你才会身处权威之下。</p><p>国家的正当性需诉诸同意和社会契约</p><h3 id="边沁（功利主义）"><a href="#边沁（功利主义）" class="headerlink" title="边沁（功利主义）"></a>边沁（功利主义）</h3><p>国家相较于其他方案，使得社会的幸福总量最大化，才具有正当性</p><h2 id="国家的特征（理想情况）"><a href="#国家的特征（理想情况）" class="headerlink" title="国家的特征（理想情况）"></a>国家的特征（理想情况）</h2><ul><li><p>在一定领域内垄断合法暴力，所有合法的武力都由国家来实施和监管（马克思韦伯）</p></li><li><p>为其领土内的所有人提供保护</p></li></ul><h2 id="证成国家"><a href="#证成国家" class="headerlink" title="证成国家"></a>证成国家</h2><p>需要证明普遍的政治义务，即有服从法律、纳税、保卫国家、爱国等的义务，讨论主要集中于服从法律的义务。</p><p>普遍的政治义务不是指在所有时间服从所有法律（也需要考虑法律的正当性等），而是原则这个国家范围内的所有人（当然也存在特权者）有道德义务遵守法律与指令。</p><h2 id="社会契约（自愿主义）"><a href="#社会契约（自愿主义）" class="headerlink" title="社会契约（自愿主义）"></a>社会契约（自愿主义）</h2><h3 id="自愿的义务"><a href="#自愿的义务" class="headerlink" title="自愿的义务"></a>自愿的义务</h3><p>洛克的自愿主义：需要每个人以某种方式赋予了国家凌驾于其上的权威，而仅仅说国家符合我的利益并不能推出国家的正当性。</p><h3 id="历史的同意"><a href="#历史的同意" class="headerlink" title="历史的同意"></a>历史的同意</h3><p>但在实践中，是历史中真实存在这样一份契约吗。或者契约真实存在，那对子孙后代又有何约束力？原始契约学说无法说明这一问题。</p><h3 id="默示同意"><a href="#默示同意" class="headerlink" title="默示同意"></a>默示同意</h3><p>洛克：</p><blockquote><p>每个人只要占有或享用了任何政府的任何一部分领地，就因此表达了他的默示同意。从而在他与整个政府里的任何人一同享用期间，有义务服从该政府的法律</p></blockquote><p>休谟的反驳：</p><blockquote><p>对于一个贫困的、不懂外语和外国风俗、靠着自己所得的微薄工资度日的农民或工匠，我们能够认真地说他对于是否离开自己的国家具有选择的自由吗？如果能够这样说的话，那么，对于一个睡梦中被人搬到船上、若要离船则只有跳海淹死的人，我们也可以同样宣称，他继续留在船上就表示他自愿地同意了接受船主的统治。</p></blockquote><p>卢梭：在一个“自由的”国家才能这样说，其言下之意是，在一个自由国家，做出不同意行为（离开国家的领土）是非常简单的。</p><blockquote><p>因为否则的话，家庭、财产、无处容身、生活的需要以及暴力等等，都可以不顾一个居民的意愿如何而把他留滞在国内，这时候，单凭他的居住就不能在断定他是同意契约还是破坏契约了。</p></blockquote><p>在现代国家中显然默示同意的条件难以被满足</p><h3 id="假想的同意"><a href="#假想的同意" class="headerlink" title="假想的同意"></a>假想的同意</h3><p>如果身处自然状态没那么我们会做些，想象没有国家的状态，如果我们是理性的，会尽可能的重新签订社会契约，创立国家。</p><p>反驳：假想的同意行为并不是同意行为，这和社会契约所要求的同意不一致，只能表明某类国家值得同意，是国家的特征而非我的同意提供了正当性，不是对国家的自愿主义辩护，而更像是一种功利主义辩护。</p><p>重构假想同意：我们虽未明确表示同意，但是在某种意义上可以说我们大部分人会同意，有同意国家的倾向，而假想契约的是使我们意识到我们的真实想法。但这是一种很弱意义上的同意，在其他法律或道德语境中，未表达出来甚至尚未得到承认的同意倾向很少具有约束力。</p><p>而且存在无政府主义者在假想后仍然反对国家，明确的表达了不同意。</p><h3 id="无政府主义-1"><a href="#无政府主义-1" class="headerlink" title="无政府主义"></a>无政府主义</h3><p>如果我们找不到一种办法从一些可接受的前提来证成国家，那么至少从道德上说，我们似乎就不得不接受某种无政府状态。这一批评策略似乎是无政府主义者最强有力的武器。没有人问过我，我们是否应该有一个国家，警察在行动时也没有征求过我的许可。因此，无政府主义者主张，国家与警察都是在以不合法的方式行动，至少在和我打交道时是这样。</p><p>服从国家的唯一理由是明智（对惩罚的恐惧）</p><p>负责任的公民不应该盲目地遵循法律，而应该始终对法律是否正当的问题上运用自己私人的判断。如果法律不正当就没有道德理由服从。</p><p>但是所有人都以私人判断，就会回到混乱状态。</p><p>在合理范围内接受一套共同的法律是更好选择。</p><h2 id="功利主义"><a href="#功利主义" class="headerlink" title="功利主义"></a>功利主义</h2><h3 id="直接功利主义"><a href="#直接功利主义" class="headerlink" title="直接功利主义"></a>直接功利主义</h3><p>当服从比不服从给社会带来更大的幸福</p><p>违法者的特许状（如果拿走别人的财产带来社会整体更大的幸福）</p><h3 id="间接功利主义"><a href="#间接功利主义" class="headerlink" title="间接功利主义"></a>间接功利主义</h3><p>需要一系列得到尊重的法律，不是由个人来考虑遵循法律对社会幸福水平的影响，而是从社会整体的角度。</p><h3 id="对功利主义的批评"><a href="#对功利主义的批评" class="headerlink" title="对功利主义的批评"></a>对功利主义的批评</h3><p>功利主义的论证：</p><p>前提1：从道德上，最好的社会是幸福得到最大化的社会</p><p>前提2：国家比自然状态更能促进幸福</p><p>前提3：国家与自然状态是我们仅有的两种选择</p><p>结论：我们有道德义务缔造并支持国家</p><p>各种无政府主义者会反对前提2，3姑且不论；</p><p>前提1也存在着道德风险，如果牺牲个体造就社会的幸福增加（替罪羊问题），会导致极大的非正义，惩罚无辜可以在道德上是正确的。功利主义也可以用来证成奴隶制。</p><p>功利主义需要融入权利理论（不受迫害的权利）。</p><h2 id="公平原则"><a href="#公平原则" class="headerlink" title="公平原则"></a>公平原则</h2><p>享受了国家的利益，又不承受有助于这些利益的必要负担，是不公平的。（对同意理论的改进）</p><p>休谟：从长期看，服从法律符合每个人的利益，人类并不是非常善于理性地行动，理性作为人的驱动力太弱。</p><p>这个观点背后的原则由法律理论家和哲学家哈特（H.L.A.Hart，1907—1992）明确提出</p><blockquote><p>如果一些人根据某些规则从事某种共同事业，并因此限制了他们的自由，那么那些根据要求服从了这种限制的人就有权利要求那些受益于他们的服从的人做出同样的服从。</p></blockquote><p>诺齐克的反驳：没有主动要求的利益不能创设任何回报的义务。得到了和接收了利益是不同的。</p><p>这又回到了默示同意的问题了，如何明确表示接收和拒绝利益。</p><h1 id="三、谁应当统治"><a href="#三、谁应当统治" class="headerlink" title="三、谁应当统治"></a>三、谁应当统治</h1><h2 id="民主含义及其争论"><a href="#民主含义及其争论" class="headerlink" title="民主含义及其争论"></a>民主含义及其争论</h2><h3 id="多数派统治和保护个人权利"><a href="#多数派统治和保护个人权利" class="headerlink" title="多数派统治和保护个人权利"></a>多数派统治和保护个人权利</h3><p>多数派暴政（托克维尔）</p><p>人民自己统治自己也可能存在压迫，因为人民不是同质的，具有非单一的利益</p><h3 id="代议制与直接民主"><a href="#代议制与直接民主" class="headerlink" title="代议制与直接民主"></a>代议制与直接民主</h3><h3 id="投票程序等其他争议"><a href="#投票程序等其他争议" class="headerlink" title="投票程序等其他争议"></a>投票程序等其他争议</h3><h2 id="反民主的柏拉图"><a href="#反民主的柏拉图" class="headerlink" title="反民主的柏拉图"></a>反民主的柏拉图</h2><p>专家统治（护卫者），统治是一种技能，应该交由专业的人，征求大众意见导致灾难，实际上一种仁慈的独裁制。</p><p>反驳：</p><ol><li><p>把不受制约的权力交给专家也会导致灾难，谁来监督护卫者</p></li><li><p>如何任命护卫者</p></li><li><p>投票的意义：发现公共善，人民利益的反映。</p><blockquote><p>孔多塞的论证：</p><p>前提1：一般人必须有高于五成的可能性做出正确判断<br>前提2：每个人必须按照他理解的共同善来投票而非特殊利益<br>结论：在大量人参与投票的情况下，几乎肯定可以得到正确的结果</p></blockquote></li><li><p>民主过程本身就包含了有价值的东西：自由和平等。<br>人可以在决策中有发言权等自由，且这种自由被赋予所有人</p></li></ol><h2 id="卢梭与公意"><a href="#卢梭与公意" class="headerlink" title="卢梭与公意"></a>卢梭与公意</h2><p>general will(公意)：要求同等程度上符合每个人的政策，普遍利益<br>the will of all（众意）：每个人特殊意志的产物</p><p>公意制定影响所有公民的法律，我由法律统治而非统治者统治，政府不制定法律，而是在具体事务中按照法律行事</p><ol><li><p>是否存在一种公意同等影响每一个人（不同阶级、利益立场的人）？</p></li><li><p>即便有一种公意，怎么能得到他，人为什么要按照公意而不是特殊利益投票？</p></li></ol><ul><li>消除阶层，不能有巨大的不平等；</li><li>要么不应该有党派和派系，要么应该有很多；这样特殊群体对整个集体的决定只有很小的影响；</li><li>个人必须非常强烈的认同作为一个整体的群体。比如通过公民美德教育的方式来巩固社会纽带。人们要被教育塑造得为了国家而忘记自我。（有些批评者认为这有法西斯的倾向）</li><li>审查制：监察官鼓励人们遵循大众道德</li><li>公民宗教：每个公民都应该信奉某种宗教，除了私人道德以外，每个人都应该信奉公民宗教</li></ul><p>平等：卢梭的公民不包括女性。<br>自由：无神论被禁止；不宽容其他宗教的宗教也得不到宽容；所有人都必须认可公民宗教；个人似乎不再有任何背离传统的生活实验</p><p>想到这些限制性的、很不开明的背景，我们可能会问，卢梭如何还能坚持说他已经解决了下述问题：如何找到一种结合形式，在这种结合中，“每一个与全体相联合的个人只服从其本人，并且仍然像以往一样自由”？</p><p>积极自由：卢梭所持的自由观是后来以赛亚·伯林所谓的“积极”自由观。我们将在第四章更详细地考察这个观念，不过这种自由观的基本立场是，自由不仅关乎能够遵循自己的欲望且不受他人约束（一种“消极的”观念），它还要求做出某些行为。通常，主张积极自由的理论家用“过理性人会选择的那种生活”来界定自由。就卢梭而言，这样一种理性的生活唯有在一个公民社会中才有可能。“只有嗜欲的冲动便是奴隶状态，而唯有服从人们为自己所制定的法律，才是自由。”</p><p>唯有服从公意行动才是真正自由的，这会导致<strong>被强迫成为自由的</strong></p><h3 id="对卢梭的批评"><a href="#对卢梭的批评" class="headerlink" title="对卢梭的批评"></a>对卢梭的批评</h3><ol><li>公意概念难以实现</li><li>对少数派的观点：被强迫成为自由</li><li>服从公意不是自由的（存在人反对公意）</li><li>不提倡民主集会，反对政治争论</li></ol><p>卢梭为了论证民主从工具角度是正当的，把社会团结的纽带勒的过紧，可以实现平等，但不等实现自由（多样性和多元化）</p><h2 id="参与式民主"><a href="#参与式民主" class="headerlink" title="参与式民主"></a>参与式民主</h2><p>直接民主，不仅要制定法律，还要参与所有具体事务</p><p>反对：</p><ol><li>难以实现，效率低</li><li>谁来制定议程，相对于决策，提出问题同样重要</li><li>政治生活也并不是全部，许多人也关心政治之外的事情</li></ol><h2 id="代议制民主"><a href="#代议制民主" class="headerlink" title="代议制民主"></a>代议制民主</h2><p>约翰穆勒</p><p>专制国家导致消极被动，塑造的民族不关心国家事务，不仅影响个人，也影响国家繁荣</p><p>现代社会过于庞大，直接民主不太可能</p><p>公民身份（citizenship）教育的重要性：参与陪审团和地方政府</p><p>权力分散于制衡，对选举者的制约</p><p>公民应该根据他们对普遍利益的理解来投票，出于公共善和良心</p><p>公开投票，防止选民出自个人利益投票</p><p>有一定文化水平和经济水平才能投票，防止选民太过无知，无法看到公共善</p><p>复票制（Plural voting）：先选出选举人，在由他们产生议员</p><p>对少数派的保护，限制政府活动的合法领域</p><h1 id="四、自由的地位"><a href="#四、自由的地位" class="headerlink" title="四、自由的地位"></a>四、自由的地位</h1><p>国家应该有多大的权力？</p><p>无政府主义与霍布斯是两个极端</p><p>穆勒的答案很激进，又简单得令人耳目一新。穆勒的自由原则（伤害原则）宣称，只有当一个人有可能会伤害到另一个人时，你才能限制其行动自由而不至于不正当。而不是以专断的习俗和大众道德来评判。</p><p>适用于文明共同体的任何成员，各项能力已臻于成熟，孩子和野蛮人是除外的，比如孩童就不应该有自由决定是否学习</p><h2 id="思想自由"><a href="#思想自由" class="headerlink" title="思想自由"></a>思想自由</h2><p>对穆勒来说，要注意的第一件事就是，一个观点不受欢迎并不能构成压制它的理由：“如果整个人类除一人之外全都持有一种意见，而只有那一人持有相反的意见，其他所有人不让那个人说话并不比那个人不让其他所有人说话（如果他有那种权力的话）更为正当。</p><p>穆勒主张，我们有很好的理由欢迎人们提倡哪怕是不受欢迎的观点。压制这些观点就是“对包括当代人与后代人在内的全人类的剥夺”。</p><p>穆勒主张，无论有争议的观点是对还是错，抑或既有对的也有错的，拒绝让其发声对我们绝没有任何好处。如果我们压制一个正确的观点（或一个部分正确的观点），我们就失去了以谬误（整个谬误或部分谬误）换真理的机会。而如果我们压制一个错误的观点，我们就以一种不同的方式有所失：我们失去了一个质疑、再思考并有可能重新肯定我们正确观点的机会。因此，压制并不能给我们带来任何好处，无论所压制的观点是不是真理。</p><p>不能假定自己不可能出错，许多被认为是确定无疑的观点和信念已经被证实是荒谬的（地球是平的）</p><p>这就证明了人类会犯下巨大的错误。穆勒认为，我们绝没有权利主张自己不可能出错。</p><blockquote><p>认定某一意见正确乃是因为它在一切与之竞争的场合中都未被驳倒，与认定它正确乃是为了它不受反驳，这两者之间有着天壤之别。</p></blockquote><p>即使从功利主义的角度，凭什么断定一种观念会导致更多的危害而非好处。（不信上帝、核武器知识）</p><p>信仰真理是一种实现幸福的途径</p><h2 id="对他人的伤害"><a href="#对他人的伤害" class="headerlink" title="对他人的伤害"></a>对他人的伤害</h2><p>唯有造成伤害才能限制一个人的自由。如何定义伤害，边界在哪里。</p><h2 id="证成自由原则"><a href="#证成自由原则" class="headerlink" title="证成自由原则"></a>证成自由原则</h2><p>自然权利：生命权、思想、言论自由、自由机会、迁徙自由、投票和竞选</p><p>自然权利是基本的、公理性的，但如何为这些权利辩护。</p><p>自然权利是自明的，不是从其他某种论据推出来的，那么为什么不同理论家对有什么权利却有不同看法</p><p>边沁：权利是法律的产物，不存在自然权利，洛克完全否认这种观点。</p><p>穆勒既不能接受自然权利，又不能依靠传统权利，而是从功利主义的角度推导的</p><p>henry sidgwick: government house utilitarianism</p><p>私人领域（不受干涉）和公共领域（受到干涉），如何划分界限，穆勒没有明说，只是从功利的角度去得出答案</p><p>功利主义与自由的冲突：功利主义鼓励家长式的干预，如果传统道德支配的社会是更符合功利主义的？</p><p>要理解穆勒对这个问题的回应，我们需要再看看《论自由》里那段话的措辞，在那段话里，穆勒宣称他忠实于功利：</p><blockquote><p>在所有伦理问题上，我最终都诉诸功利；但这里的功利必须是最广义上的功利，它基于一个作为进步性存在的人永久不变的利益。</p></blockquote><h2 id="个性与进步"><a href="#个性与进步" class="headerlink" title="个性与进步"></a>个性与进步</h2><p>个性的自由发展是幸福首要且必不可少的要素之一</p><p>虽然自由并非总是带来进步，但进步唯一可靠和恒久的源泉是自由</p><ol><li><p>即便人们会搞错，但个人与其他任何人相比，仍然更有可能正确地看到什么东西会使自己幸福</p><p>穆勒声称，独立地做出判断确实会带来更好的后果。但是他的意思并不是说，任何人都不应该影响他人的行为。他特别强调，如果我们觉得别人正在采取一种愚蠢或有害的行为，我们每个人都有义务尽力说服他们相信自己错了。我们可以跟他们讲道理，或者请求他们。但是我们能做的也仅限于此，绝不能采用武力。</p><p>一个人不顾别人的建议与警告可能犯下的错误，与容许别人强制他去做他们认为对他有好处的事情，危害要小得多。</p></li><li><p>从长远看，它会导致更好的决定</p><p>不仅如此，自由选择的运用本身对于人性的充分发展来说也是至关重要的。穆勒认为，那些做习俗之奴隶的人永远也不能成长为全面发展的成功的人；未必是因为他们不会幸福，而是因为他们不能发展人类最独特的一种能力，即选择能力。</p></li><li><p>生活实验是社会进步的主要因素</p><p>正如只要人类未臻于完善，存在着不同意见就是有益的，同样，存在着不同的生活试验也是有益的；各种品格只要不伤及他人就应该给予其自由发展的空间；不同生活方式的价值应该通过实践去证实。……这是构成个性与社会进步的主要因素。</p></li></ol><p>批评：对进步的乐观主义</p><p>他最重要的观点就是这样一个假定，即人类是可以进步的，能够从经验中学习。最近几个世纪的经验是否表明这个观点是错误的呢？如果是这样，那么穆勒的观点就失去了灵魂。人类持续不断地重复自己的错误。如果人们不会从他人的经验中学习，那么穆勒就不再有理由鼓励生活试验了。如果我们并不准备学习，其他人向我们展示新的生活方式又有什么意义呢？没有了这样一种对生活试验的辩护，个性与自由基于穆勒给出的那些论证而获得的正当性就大打折扣了。实际上，已经有人指出，<strong>人类通常处在穆勒专门用来描述“孩子和野蛮人”的那种状态：没有能力通过自由和平等的讨论而进步。</strong>而且，正如穆勒本人所说，这样的人不适合享受自由，至少根据功利主义的计算不适合。或许对人类进步的可能性所持的这种悲观主义是一种严重的夸大其词。但是如果真理存在于某种中间立场，如果人类并不如穆勒所设想的那样善于进步，用来支持自由的功利主义论据就相应地削弱了。进步是穆勒学说的基石。</p><h2 id="自由作为一种内在善"><a href="#自由作为一种内在善" class="headerlink" title="自由作为一种内在善"></a>自由作为一种内在善</h2><p>实现社会幸福最大化也许要求一个非自由的社会，难道就是可取的吗？</p><p>穆勒认为自由是幸福的一部分，而不是独立的价值</p><h2 id="自由主义的问题"><a href="#自由主义的问题" class="headerlink" title="自由主义的问题"></a>自由主义的问题</h2><p>毒品、酗酒、卖淫（传统道德的作用）</p><p>马克思的批评：政治解放（自由主义）相对于等级制和充满歧视的国家是一种进步，但是是实现人类解放的障碍（分离性，以自我为中心的，市民社会的对抗倾向），是一种肤浅的学说</p><p>社群主义(comunitarianism) </p><p>积极自由和消极自由（以赛亚柏林）</p><h1 id="五、分配正义"><a href="#五、分配正义" class="headerlink" title="五、分配正义"></a>五、分配正义</h1><h2 id="财产权证成"><a href="#财产权证成" class="headerlink" title="财产权证成"></a>财产权证成</h2><p>初始获取正义、转让正义、矫正正义（诺齐克）</p><p>洛克：掺入劳动论</p><p>财产所有权就是盗窃（蒲鲁东）</p><h2 id="自由市场"><a href="#自由市场" class="headerlink" title="自由市场"></a>自由市场</h2><p>功利主义理论不关心怎么来的，关心转让正义</p><p>计划经济需要计划者具备一定程度上的全知全能与仁慈，人类是做不到这一点的</p><p>反对市场：人的异化（恩格斯），剥削，非正义的不平等，浪费，经济危机</p><p>异化是资本主义特有，还是一般的现代技术特有？福利国家的修正</p><p>平等主义的分配会抑制主动精神和进取心</p><h2 id="罗尔斯的正义理论"><a href="#罗尔斯的正义理论" class="headerlink" title="罗尔斯的正义理论"></a>罗尔斯的正义理论</h2><p>一种假想的契约</p><ol><li><p>立约环境（原初状态）</p><p>无知之幕：不知道天资、阶级、社会地位、性别、种族，特殊心理倾向（道德宗教哲学观），社会经济状况，文明程度，处于正义环境（介于匮乏与丰裕之间）</p><p>弱的善理论：想要primary goods（自由、机会、财富、收入、自尊的社会基础）</p><p>行动者：理性，mutually disinterested</p></li><li><p>选择正义原则</p><p>a. 每个人都要平等的权利享有一整套最为广泛且相同的基本自由，但这些自由要与所有人类似的一套自由相容（自由原则）</p><p>b.社会与经济的不平等应该被安排得：</p><ul><li>符合处于最不利地位者的最大利益（差别原则）</li><li>职位与地位在公平的机会平等条件下向所有人开放（公平机会原则）</li></ul><p>自由原则是最优先的，公平机会原则相对于差别原则也具有优先性</p><p>自由原则和公平机会原则比较容易从理性上推导</p><p>差别原则推导：</p><ul><li><p>预期功利最大化</p></li><li><p>maximin（小中取大）</p><ul><li><p>物质条件的约束（资源有限）</p></li><li><p>逻辑约束(每个人都比其他人富裕)</p></li><li><p>形式约束：公开性约束，契约中的条款都是互相知情的（反驳总督府里的功利主义）</p><p>终结性finality，承诺的压力，当安排对你不利时，是无法改变的</p></li></ul><p>只有小中取大不冒险，因为是一次性的不可反悔的选择</p></li><li><p>maximax（大中取大）</p></li><li><p>有条件限制的功利最大化：无法明确条件限制，最终会变成小中取大</p></li></ul></li><li><p>为什么要选择这种理论</p><p>对罗尔斯的批评<br>弱的善理论是基于现代资本主义生活的<br>个人能力相对于社会赋予的因素的微不足道</p></li></ol><h2 id="诺齐克与模式"><a href="#诺齐克与模式" class="headerlink" title="诺齐克与模式"></a>诺齐克与模式</h2><p>限制财产是限制自由，与自由原则相悖</p><p>历史性正义理论 historical：了解如何获得资源和资源分配依据</p><p>即时性正义理论 end -state： 只看到某个时点的分配状况</p><p>模式化理论：根据xx来分配</p><p>非模式化理论：程序性理论，通过正当程序获得goods</p><p>模式的变化</p><ol><li><p>任何模式都会被打破</p></li><li><p>从一种模式到另一种模式是处于自愿，如果模式1是正义的，模式2也是正义的（纯粹自愿也不一定正义的）</p></li><li><p>模式想要强制实施就只能让自由付出沉重代价。不断地干预分配</p></li></ol><h1 id="六、当代问题"><a href="#六、当代问题" class="headerlink" title="六、当代问题"></a>六、当代问题</h1><p>女性主义、种族问题、性取向，压迫、传统价值观，全球正义，移民，子孙后代。</p><p>论述较浅</p><h1 id="附录：书单"><a href="#附录：书单" class="headerlink" title="附录：书单"></a>附录：书单</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>说一说在我老家，人们的生存状况</title>
      <link href="/paranoiddemon.github.io/2020/04/20/hometown/"/>
      <url>/paranoiddemon.github.io/2020/04/20/hometown/</url>
      
        <content type="html"><![CDATA[<p>（一）</p><p>以前回我奶奶家过年的时候，附近邻居有个姐姐，因为眼睛小，笑起来总是眯成一条缝，人家都叫她眯眯。我算不上认识她，我和她唯一的交集，是有一次她路过我家门口，在她快走远的时候，我恶作剧似地老远喊了声“眯眯”，她停顿一下回过头，也不怎么生气，反而是眯起眼笑了起来。</p><p>她现在疯了。清明节回我奶奶家听说的。几年前她怀孕，她爹嫌弃男孩家经济条件太差，强行拆散了这段关系，带她去做了流产。后来她爹给她相亲了几次，都是订婚不久男方又反悔，多次“退货”，在农村的讲述中用的是这个词。具体的缘由不得而知，有人说是精神状态出了问题，也有传言说是因为流产无法再有孩子了。再后来，眯眯就疯了。常常自言自语，有时候会无端端骂人。</p><p>眯眯疯了之后，每天和她妈妈形影不离，晚上也是和她妈妈一起睡的。她妈妈去年突发脑溢血去世，她爹没过几个月就再婚了，对眯眯的态度的是：谁要就赶快带走，不要一分钱彩礼。“眯眯现在可怜哦”，我奶奶如此评价。十多年前她回头的那个笑容，我可能再也无法忘记了。</p><p>（二）</p><p>很多人可能不知道农村结婚有多么简单。先找人介绍认识，男女双方可能只用见一两次面，在双方家长的陪同下，甚至不是单独的约会，就可以确定一桩婚事。如果双方（家族）凭借着一两次的了解都比较满意的话，就可以订婚，领结婚证了，不举办婚礼的话，这事情就算结束了。虽然听上去很不现代，但这就是大部分农村家庭的普遍状况。</p><p>虽然我对婚姻总体上都抱有一种悲观的立场，但这样的婚姻可能更需要一些运气。双方达成的更像是一个搭伙生活的契约，进而保持传宗接代的传统。我发现他们都是这样毫不审视地生活，完全天然地接受命运的一切安排，毫无例外。生活地幸福与否那就是个概率问题了。我有时候会有些羡慕，因为我即使知道我是怎么样的宿命，也基本上无法改变太多。除了更深更明白的绝望，审视自己的生活对我没有其他益处。</p><p>（三）</p><p>大概有十来年没有回家做清明，这些年间先后失去了三位亲人，从我爸妈那也常会听说某些认识的人的离世。死亡成了越发日常的事情，这可能就是年纪增长的一个佐证吧。生老病死，一代人接续一代人，装着家族记忆的坟一座座地立起来，孩子不断地出生，像是一个无法打破的坚实循环。</p><p>那天在山上，新草铺满了山坡，燃烧的黄纸化成成片的灰烬，在半空飘扬。祭扫有很多的仪式，“到你们这代或许就断了“，一位长辈无奈地说。我看见我爸在远处抽烟的背影，内心有些悲伤。将来有一天，我也将站在那个位置。</p><p>我的小外甥女纤雪今年十岁，时隔一年多没见，她还记得我叫我舅舅。她外公也就是我舅舅六年前也是脑溢血去世的，他生前对我很好。正月十七去世的，正月拜年还见过的，没想到会是最后一次。在我舅舅的坟前，我问纤雪认识外公吗，她说不记得了。我给了她点零花钱让她买些喜欢的东西，我问她喜欢什么，她说喜欢钱。我说你要这么多钱干什么，她说要给她妈妈买件新衣服，还让我不要生气。</p><p>在那几个小时里，我不停地和她说，近乎单方面的要求：你要好好上课，将来上大学哦。我知道我对她的人生做不了什么，对她说的这些话，与其说是对她的劝诫，更不如说是一种良心上的自我安慰。</p><p>（四）</p><p>其实在城市的生活又何异于孤魂野鬼。拥挤的、昏暗的出租屋，夏天充满异味的地铁、公交，写字楼里的格子间，伤心的街道，人来人往的娱乐场，失落人的渺小内心。这一切的一切和坟墓有多大的分别。人是城市的燃料，这台巨大的工业机器制造出绚丽的幻象，从此有了永恒的动力，而燃烧一个人的时间不过是永恒里的须臾，变成废料排出体外几乎是绝大部分的人归宿，被集体撒向旷野、江河和土坡，滋养出下一批全新的燃料。曾经熊熊燃烧过的我，最终也将步向我的命定，如果可以的话，请把我撒向大海，成为大海，化作比城市更深刻的永恒，有蚀刻一切的气势。而不是给我一块墓碑，证明我曾卑微地存在。</p>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
